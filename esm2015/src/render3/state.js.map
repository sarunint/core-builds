{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Sanitizer} from '../sanitization/security';\n\nimport {assertDefined, assertEqual} from './assert';\nimport {executeHooks} from './hooks';\nimport {TElementNode, TNode, TNodeFlags, TViewNode} from './interfaces/node';\nimport {LQueries} from './interfaces/query';\nimport {Renderer3, RendererFactory3} from './interfaces/renderer';\nimport {BINDING_INDEX, CLEANUP, CONTEXT, DECLARATION_VIEW, FLAGS, HOST_NODE, LViewData, LViewFlags, OpaqueViewState, QUERIES, RENDERER, SANITIZER, TVIEW, TView} from './interfaces/view';\nimport {assertDataInRangeInternal, isContentQueryHost} from './util';\n\n/**\n * This property gets set before entering a template.\n *\n * This renderer can be one of two varieties of Renderer3:\n *\n * - ObjectedOrientedRenderer3\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\n * size).\n *\n * - ProceduralRenderer3\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\n * that enables element manipulation. This also facilitates backwards compatibility with\n * Renderer2.\n */\nlet renderer: Renderer3;\n\nexport function getRenderer(): Renderer3 {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return renderer;\n}\n\nexport function setRenderer(r: Renderer3): void {\n  renderer = r;\n}\n\nlet rendererFactory: RendererFactory3;\n\nexport function getRendererFactory(): RendererFactory3 {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return rendererFactory;\n}\n\nexport function setRendererFactory(factory: RendererFactory3): void {\n  rendererFactory = factory;\n}\n\nexport function getCurrentSanitizer(): Sanitizer|null {\n  return viewData && viewData[SANITIZER];\n}\n\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LViewData` to only those elements.\n */\nlet elementDepthCount !: number;\n\nexport function getElementDepthCount() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return elementDepthCount;\n}\n\nexport function increaseElementDepthCount() {\n  elementDepthCount++;\n}\n\nexport function decreaseElementDepthCount() {\n  elementDepthCount--;\n}\n\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n */\nlet bindingsEnabled !: boolean;\n\nexport function getBindingsEnabled(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return bindingsEnabled;\n}\n\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport function enableBindings(): void {\n  bindingsEnabled = true;\n}\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport function disableBindings(): void {\n  bindingsEnabled = false;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n */\nexport function getCurrentView(): OpaqueViewState {\n  return viewData as any as OpaqueViewState;\n}\n\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n */\nexport function restoreView(viewToRestore: OpaqueViewState) {\n  contextViewData = viewToRestore as any as LViewData;\n}\n\n/** Used to set the parent property when nodes are created and track query results. */\nlet previousOrParentTNode: TNode;\n\nexport function getPreviousOrParentTNode(): TNode {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return previousOrParentTNode;\n}\n\nexport function setPreviousOrParentTNode(tNode: TNode) {\n  previousOrParentTNode = tNode;\n}\n\nexport function setTNodeAndViewData(tNode: TNode, view: LViewData) {\n  previousOrParentTNode = tNode;\n  viewData = view;\n}\n\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n */\nlet isParent: boolean;\n\nexport function getIsParent(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return isParent;\n}\n\nexport function setIsParent(value: boolean): void {\n  isParent = value;\n}\n\nlet tView: TView;\n\nexport function getTView(): TView {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return tView;\n}\n\nlet currentQueries: LQueries|null;\n\nexport function getCurrentQueries(): LQueries|null {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return currentQueries;\n}\n\nexport function setCurrentQueries(queries: LQueries | null): void {\n  currentQueries = queries;\n}\n\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n */\nexport function getOrCreateCurrentQueries(\n    QueryType: {new (parent: null, shallow: null, deep: null): LQueries}): LQueries {\n  // if this is the first content query on a node, any existing LQueries needs to be cloned\n  // in subsequent template passes, the cloning occurs before directive instantiation.\n  if (previousOrParentTNode && previousOrParentTNode !== viewData[HOST_NODE] &&\n      !isContentQueryHost(previousOrParentTNode)) {\n    currentQueries && (currentQueries = currentQueries.clone());\n    previousOrParentTNode.flags |= TNodeFlags.hasContentQuery;\n  }\n\n  return currentQueries || (currentQueries = new QueryType(null, null, null));\n}\n\n/**\n * This property gets set before entering a template.\n */\nlet creationMode: boolean;\n\nexport function getCreationMode(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return creationMode;\n}\n\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n */\nlet viewData: LViewData;\n\n/**\n * Internal function that returns the current LViewData instance.\n *\n * The getCurrentView() instruction should be used for anything public.\n */\nexport function getViewData(): LViewData {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return viewData;\n}\n\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n */\nlet contextViewData: LViewData = null !;\n\nexport function getContextViewData(): LViewData {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return contextViewData;\n}\n\nexport function getCleanup(view: LViewData): any[] {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\n\nexport function getTViewCleanup(view: LViewData): any[] {\n  return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n */\nlet checkNoChangesMode = false;\n\nexport function getCheckNoChangesMode(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return checkNoChangesMode;\n}\n\nexport function setCheckNoChangesMode(mode: boolean): void {\n  checkNoChangesMode = mode;\n}\n\n/** Whether or not this is the first time the current view has been processed. */\nlet firstTemplatePass = true;\n\nexport function getFirstTemplatePass(): boolean {\n  return firstTemplatePass;\n}\n\nexport function setFirstTemplatePass(value: boolean): void {\n  firstTemplatePass = value;\n}\n\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n */\nlet bindingRootIndex: number = -1;\n\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n  return bindingRootIndex;\n}\n\nexport function setBindingRoot(value: number) {\n  bindingRootIndex = value;\n}\n\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New state to become active\n * @param host Element to which the View is a child of\n * @returns the previous state;\n */\nexport function enterView(\n    newView: LViewData, hostTNode: TElementNode | TViewNode | null): LViewData {\n  const oldView: LViewData = viewData;\n  tView = newView && newView[TVIEW];\n\n  creationMode = newView && (newView[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n  firstTemplatePass = newView && tView.firstTemplatePass;\n  bindingRootIndex = newView && tView.bindingStartIndex;\n  renderer = newView && newView[RENDERER];\n\n  previousOrParentTNode = hostTNode !;\n  isParent = true;\n\n  viewData = contextViewData = newView;\n  oldView && (oldView[QUERIES] = currentQueries);\n  currentQueries = newView && newView[QUERIES];\n\n  return oldView;\n}\n\nexport function nextContextImpl<T = any>(level: number = 1): T {\n  contextViewData = walkUpViews(level, contextViewData !);\n  return contextViewData[CONTEXT] as T;\n}\n\nfunction walkUpViews(nestingLevel: number, currentView: LViewData): LViewData {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(\n                     currentView[DECLARATION_VIEW],\n                     'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW] !;\n    nestingLevel--;\n  }\n  return currentView;\n}\n\n/**\n * Resets the application state.\n */\nexport function resetComponentState() {\n  isParent = false;\n  previousOrParentTNode = null !;\n  elementDepthCount = 0;\n  bindingsEnabled = true;\n}\n\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param newView New state to become active\n * @param creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n */\nexport function leaveView(newView: LViewData, creationOnly?: boolean): void {\n  if (!creationOnly) {\n    if (!checkNoChangesMode) {\n      executeHooks(viewData, tView.viewHooks, tView.viewCheckHooks, creationMode);\n    }\n    // Views are clean and in update mode after being checked, so these bits are cleared\n    viewData[FLAGS] &= ~(LViewFlags.CreationMode | LViewFlags.Dirty);\n  }\n  viewData[FLAGS] |= LViewFlags.RunInit;\n  viewData[BINDING_INDEX] = tView.bindingStartIndex;\n  enterView(newView, null);\n}\n\nexport function assertPreviousIsParent() {\n  assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n\nexport function assertHasParent() {\n  assertDefined(previousOrParentTNode.parent, 'previousOrParentTNode should have a parent');\n}\n\nexport function assertDataInRange(index: number, arr?: any[]) {\n  if (arr == null) arr = viewData;\n  assertDataInRangeInternal(index, arr || viewData);\n}\n\nexport function assertDataNext(index: number, arr?: any[]) {\n  if (arr == null) arr = viewData;\n  assertEqual(\n      arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);\n}\n"]}