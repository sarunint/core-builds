{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/debug.ts"],"names":[],"mappings":";;;;;;;;;;;AAWA,OAAO,EAAiB,qBAAqB,EAAC,MAAM,kBAAkB,CAAC;AAEvE,OAAO,EAAC,gBAAgB,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,EAAC,MAAM,mBAAmB,CAAC;AAG3F,OAAO,EAAC,KAAK,EAAC,MAAM,mBAAmB,CAAC;;;;;;AAOxC,MAAM,OAAO,4BAA6B,SAAQ,qBAAqB;;;;;;IACrE,cAAc,CAAC,OAAY,EAAE,UAA8B;;QACzD,MAAM,QAAQ,qBAAG,KAAK,CAAC,cAAc,CAAC,OAAO,EAAE,UAAU,CAAmB,EAAC;QAC7E,QAAQ,CAAC,mBAAmB,GAAG,CAAC,aAAkB,EAAE,EAAE,CAAC,IAAI,mBAAmB,CAAC,aAAa,CAAC,CAAC;QAC9F,OAAO,QAAQ,CAAC;KACjB;CACF;;;;;;AAOD,MAAM,mBAAmB;;;;IACvB,YAAoB,WAAgB;QAAhB,gBAAW,GAAX,WAAW,CAAK;KAAI;;;;IAExC,IAAI,SAAS,KAAkB,OAAO,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE;;;;IAEhF,IAAI,IAAI,KAAU,OAAO,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE;;;;IAEnE,IAAI,QAAQ,KAAe,OAAO,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;;;;IAElE,IAAI,SAAS,KAAU,OAAO,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;;;;IAEnE,IAAI,cAAc;;QAChB,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;QAChD,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;;QACtC,MAAM,KAAK,qBAAG,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAU,EAAC;;QAClE,MAAM,eAAe,GAAG,KAAK,CAAC,KAAK,gCAAgC,CAAC;QAEpE,IAAI,eAAe,GAAG,CAAC,EAAE;;YACvB,MAAM,iBAAiB,GAAG,KAAK,CAAC,KAAK,wCAA0C,CAAC;;YAChF,MAAM,eAAe,GAAG,iBAAiB,GAAG,eAAe,CAAC;;YAC5D,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;;YAChD,MAAM,aAAa,qBACf,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,EAAE,eAAe,CAAwB,EAAC;YAEvF,OAAO,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAC7D;QAED,OAAO,EAAE,CAAC;KACX;;;;IAED,IAAI,UAAU,KAA2B,OAAO,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;;;;IAGjF,IAAI,OAAO,KAAU,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,EAAE;;;;IAGjE,IAAI,sBAAsB,KAAU,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,EAAE;;;;IAGhF,IAAI,UAAU,KAAU,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,EAAE;;;;;;IAGpE,QAAQ,CAAC,OAAgB,EAAE,GAAG,MAAa,IAAU,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE;CACjF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Renderer2, RendererType2} from '../render/api';\nimport {DebugContext} from '../view';\nimport {DebugRenderer2, DebugRendererFactory2} from '../view/services';\n\nimport {getHostComponent, getInjector, getLocalRefs, loadContext} from './discovery_utils';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode, TNodeFlags} from './interfaces/node';\nimport {TVIEW} from './interfaces/view';\n\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nexport class Render3DebugRendererFactory2 extends DebugRendererFactory2 {\n  createRenderer(element: any, renderData: RendererType2|null): Renderer2 {\n    const renderer = super.createRenderer(element, renderData) as DebugRenderer2;\n    renderer.debugContextFactory = (nativeElement: any) => new Render3DebugContext(nativeElement);\n    return renderer;\n  }\n}\n\n/**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nclass Render3DebugContext implements DebugContext {\n  constructor(private _nativeNode: any) {}\n\n  get nodeIndex(): number|null { return loadContext(this._nativeNode).nodeIndex; }\n\n  get view(): any { return loadContext(this._nativeNode).lViewData; }\n\n  get injector(): Injector { return getInjector(this._nativeNode); }\n\n  get component(): any { return getHostComponent(this._nativeNode); }\n\n  get providerTokens(): any[] {\n    const lDebugCtx = loadContext(this._nativeNode);\n    const lViewData = lDebugCtx.lViewData;\n    const tNode = lViewData[TVIEW].data[lDebugCtx.nodeIndex] as TNode;\n    const directivesCount = tNode.flags & TNodeFlags.DirectiveCountMask;\n\n    if (directivesCount > 0) {\n      const directiveIdxStart = tNode.flags >> TNodeFlags.DirectiveStartingIndexShift;\n      const directiveIdxEnd = directiveIdxStart + directivesCount;\n      const viewDirectiveDefs = this.view[TVIEW].data;\n      const directiveDefs =\n          viewDirectiveDefs.slice(directiveIdxStart, directiveIdxEnd) as DirectiveDef<any>[];\n\n      return directiveDefs.map(directiveDef => directiveDef.type);\n    }\n\n    return [];\n  }\n\n  get references(): {[key: string]: any} { return getLocalRefs(this._nativeNode); }\n\n  // TODO(pk): check previous implementation and re-implement\n  get context(): any { throw new Error('Not implemented in ivy'); }\n\n  // TODO(pk): check previous implementation and re-implement\n  get componentRenderElement(): any { throw new Error('Not implemented in ivy'); }\n\n  // TODO(pk): check previous implementation and re-implement\n  get renderNode(): any { throw new Error('Not implemented in ivy'); }\n\n  // TODO(pk): check previous implementation and re-implement\n  logError(console: Console, ...values: any[]): void { console.error(...values); }\n}\n"]}