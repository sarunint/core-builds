{"version":3,"file":"discovery_utils.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/discovery_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injector} from '../di/injector';\n\nimport {assertDefined} from './assert';\nimport {discoverDirectives, discoverLocalRefs, getContext, isComponentInstance} from './context_discovery';\nimport {LContext} from './interfaces/context';\nimport {TElementNode, TNode, TNodeFlags} from './interfaces/node';\nimport {CONTEXT, FLAGS, LViewData, LViewFlags, PARENT, RootContext, TVIEW} from './interfaces/view';\nimport {getComponentViewByIndex, readPatchedLViewData} from './util';\nimport {NodeInjector} from './view_engine_compatibility';\n\n\n\n/**\n * NOTE: The following functions might not be ideal for core usage in Angular...\n *\n * Each function below is designed\n */\n\n/**\n * Returns the component instance associated with the target.\n *\n * If a DOM is used then it will return the component that\n *    owns the view where the element is situated.\n * If a component instance is used then it will return the\n *    instance of the parent component depending on where\n *    the component instance is exists in a template.\n * If a directive instance is used then it will return the\n *    component that contains that directive in it's template.\n */\nexport function getComponent<T = {}>(target: {}): T|null {\n  const context = loadContext(target) !;\n\n  if (context.component === undefined) {\n    let lViewData: LViewData|null = context.lViewData;\n    while (lViewData) {\n      const ctx = lViewData ![CONTEXT] !as{};\n      if (ctx && isComponentInstance(ctx)) {\n        context.component = ctx;\n        break;\n      }\n      lViewData = lViewData[FLAGS] & LViewFlags.IsRoot ? null : lViewData ![PARENT] !;\n    }\n    if (context.component === undefined) {\n      context.component = null;\n    }\n  }\n\n  return context.component as T;\n}\n\n/**\n * Returns the host component instance associated with the target.\n *\n * This will only return a component instance of the DOM node\n * contains an instance of a component on it.\n */\nexport function getHostComponent<T = {}>(target: {}): T|null {\n  const context = loadContext(target);\n  const tNode = context.lViewData[TVIEW].data[context.nodeIndex] as TNode;\n  if (tNode.flags & TNodeFlags.isComponent) {\n    const componentView = getComponentViewByIndex(context.nodeIndex, context.lViewData);\n    return componentView[CONTEXT] as any as T;\n  }\n  return null;\n}\n\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n */\nexport function getRootContext(target: LViewData | {}): RootContext {\n  const lViewData = Array.isArray(target) ? target : loadContext(target) !.lViewData;\n  const rootLViewData = getRootView(lViewData);\n  return rootLViewData[CONTEXT] as RootContext;\n}\n\n/**\n * Returns a list of all the components in the application\n * that are have been bootstrapped.\n */\nexport function getRootComponents(target: {}): any[] {\n  return [...getRootContext(target).components];\n}\n\n/**\n * Returns the injector instance that is associated with\n * the element, component or directive.\n */\nexport function getInjector(target: {}): Injector {\n  const context = loadContext(target);\n  const tNode = context.lViewData[TVIEW].data[context.nodeIndex] as TElementNode;\n\n  return new NodeInjector(tNode, context.lViewData);\n}\n\n/**\n * Returns a list of all the directives that are associated\n * with the underlying target element.\n */\nexport function getDirectives(target: {}): Array<{}> {\n  const context = loadContext(target) !;\n\n  if (context.directives === undefined) {\n    context.directives = discoverDirectives(context.nodeIndex, context.lViewData, false);\n  }\n\n  return context.directives || [];\n}\n\n/**\n * Returns LContext associated with a target passed as an argument.\n * Throws if a given target doesn't have associated LContext.\n */\nexport function loadContext(target: {}): LContext {\n  const context = getContext(target);\n  if (!context) {\n    throw new Error(\n        ngDevMode ? 'Unable to find the given context data for the given target' :\n                    'Invalid ng target');\n  }\n  return context;\n}\n\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param componentOrView any component or view\n */\nexport function getRootView(componentOrView: LViewData | {}): LViewData {\n  let lViewData: LViewData;\n  if (Array.isArray(componentOrView)) {\n    ngDevMode && assertDefined(componentOrView, 'lViewData');\n    lViewData = componentOrView as LViewData;\n  } else {\n    ngDevMode && assertDefined(componentOrView, 'component');\n    lViewData = readPatchedLViewData(componentOrView) !;\n  }\n  while (lViewData && !(lViewData[FLAGS] & LViewFlags.IsRoot)) {\n    lViewData = lViewData[PARENT] !;\n  }\n  return lViewData;\n}\n\n/**\n *  Retrieve map of local references (local reference name => element or directive instance).\n */\nexport function getLocalRefs(target: {}): {[key: string]: any} {\n  const context = loadContext(target) !;\n\n  if (context.localRefs === undefined) {\n    context.localRefs = discoverLocalRefs(context.lViewData, context.nodeIndex);\n  }\n\n  return context.localRefs || {};\n}\n"]}