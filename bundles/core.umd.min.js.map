{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/core/esm5/src/util/property.js","../../../packages/core/esm5/src/di/injection_token.js","../../../packages/core/esm5/src/util/decorators.js","../../../packages/core/esm5/src/change_detection/constants.js","../../../packages/core/esm5/src/metadata/resource_loading.js","../../../packages/core/esm5/src/metadata/view.js","../../../packages/core/esm5/src/util.js","../../../packages/core/esm5/src/render3/ng_dev_mode.js","../../../packages/core/esm5/src/render3/definition.js","../../../packages/core/esm5/src/render3/jit/compiler_facade.js","../../../packages/core/esm5/src/di/injector_compatibility.js","../../../packages/core/esm5/src/render3/assert.js","../../../packages/core/esm5/src/change_detection/change_detection_util.js","../../../packages/core/esm5/src/render3/interfaces/injector.js","../../../packages/core/esm5/src/render3/util.js","../../../packages/core/esm5/src/render3/context_discovery.js","../../../packages/core/esm5/src/render3/node_assert.js","../../../packages/core/esm5/src/render3/hooks.js","../../../packages/core/esm5/src/render3/state.js","../../../packages/core/esm5/src/render3/di.js","../../../packages/core/esm5/src/util/noop.js","../../../packages/core/esm5/src/render3/interfaces/renderer.js","../../../packages/core/esm5/src/render3/node_manipulation.js","../../../packages/core/esm5/src/render3/node_selector_matcher.js","../../../packages/core/esm5/src/render3/styling/player_factory.js","../../../packages/core/esm5/src/render3/styling/core_player_handler.js","../../../packages/core/esm5/src/render3/styling/util.js","../../../packages/core/esm5/src/render3/styling/class_and_style_bindings.js","../../../packages/core/esm5/src/render3/instructions.js","../../../packages/core/esm5/src/render3/errors.js","../../../packages/core/esm5/src/di/forward_ref.js","../../../packages/core/esm5/src/di/injector.js","../../../packages/core/esm5/src/render3/view_ref.js","../../../packages/core/esm5/src/render3/view_engine_compatibility.js","../../../packages/core/esm5/src/render3/discovery_utils.js","../../../packages/core/esm5/src/render3/publish_global_util.js","../../../packages/core/esm5/src/render3/component.js","../../../packages/core/esm5/src/render3/features/inherit_definition_feature.js","../../../packages/core/esm5/src/render3/features/ng_onchanges_feature.js","../../../packages/core/esm5/src/di/r3_injector.js","../../../packages/core/esm5/src/render3/di_setup.js","../../../packages/core/esm5/src/render3/features/providers_feature.js","../../../packages/core/esm5/src/linker/component_factory_resolver.js","../../../packages/core/esm5/src/linker/element_ref.js","../../../packages/core/esm5/src/render/api.js","../../../packages/core/esm5/src/render3/component_ref.js","../../../packages/core/esm5/src/render3/i18n.js","../../../packages/core/esm5/src/render3/ng_module_ref.js","../../../packages/core/esm5/src/render3/pure_function.js","../../../packages/core/esm5/src/render3/pipe.js","../../../packages/core/esm5/src/event_emitter.js","../../../packages/core/esm5/src/linker/template_ref.js","../../../packages/core/esm5/src/render3/query.js","../../../packages/core/esm5/src/sanitization/bypass.js","../../../packages/core/esm5/src/sanitization/inert_body.js","../../../packages/core/esm5/src/sanitization/url_sanitizer.js","../../../packages/core/esm5/src/sanitization/html_sanitizer.js","../../../packages/core/esm5/src/sanitization/security.js","../../../packages/core/esm5/src/sanitization/style_sanitizer.js","../../../packages/core/esm5/src/sanitization/sanitization.js","../../../packages/core/esm5/src/render3/jit/environment.js","../../../packages/core/esm5/src/type.js","../../../packages/core/esm5/src/reflection/reflection_capabilities.js","../../../packages/core/esm5/src/render3/jit/util.js","../../../packages/core/esm5/src/render3/jit/module.js","../../../packages/core/esm5/src/render3/jit/directive.js","../../../packages/core/esm5/src/render3/jit/pipe.js","../../../packages/core/esm5/src/metadata/directives.js","../../../packages/core/esm5/src/di/util.js","../../../packages/core/esm5/src/metadata/ng_module.js","../../../packages/core/esm5/src/version.js","../../../packages/core/esm5/src/render3/jit/injectable.js","../../../packages/core/esm5/src/di/injectable.js","../../../packages/core/esm5/src/errors.js","../../../packages/core/esm5/src/error_handler.js","../../../packages/core/esm5/src/di/reflective_errors.js","../../../packages/core/esm5/src/di/reflective_key.js","../../../packages/core/esm5/src/reflection/reflector.js","../../../packages/core/esm5/src/di/reflective_provider.js","../../../packages/core/esm5/src/di/reflective_injector.js","../../../packages/core/esm5/src/application_init.js","../../../packages/core/esm5/src/application_tokens.js","../../../packages/core/esm5/src/console.js","../../../packages/core/esm5/src/linker/compiler.js","../../../packages/core/esm5/src/profile/wtf_impl.js","../../../packages/core/esm5/src/zone/ng_zone.js","../../../packages/core/esm5/src/testability/testability.js","../../../packages/core/esm5/src/application_ref.js","../../../packages/core/esm5/src/linker/ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/query_list.js","../../../packages/core/esm5/src/linker/system_js_ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/view_container_ref.js","../../../packages/core/esm5/src/change_detection/change_detector_ref.js","../../../packages/core/esm5/src/linker/view_ref.js","../../../packages/core/esm5/src/debug/debug_node.js","../../../packages/core/esm5/src/change_detection/differs/default_iterable_differ.js","../../../packages/core/esm5/src/change_detection/differs/default_keyvalue_differ.js","../../../packages/core/esm5/src/change_detection/differs/iterable_differs.js","../../../packages/core/esm5/src/change_detection/differs/keyvalue_differs.js","../../../packages/core/esm5/src/i18n/tokens.js","../../../packages/core/esm5/src/application_module.js","../../../packages/core/esm5/src/view/types.js","../../../packages/core/esm5/src/view/errors.js","../../../packages/core/esm5/src/view/util.js","../../../packages/core/esm5/src/view/element.js","../../../packages/core/esm5/src/view/ng_module.js","../../../packages/core/esm5/src/view/view_attach.js","../../../packages/core/esm5/src/view/refs.js","../../../packages/core/esm5/src/view/provider.js","../../../packages/core/esm5/src/view/query.js","../../../packages/core/esm5/src/view/ng_content.js","../../../packages/core/esm5/src/view/pure_expression.js","../../../packages/core/esm5/src/view/text.js","../../../packages/core/esm5/src/view/view.js","../../../packages/core/esm5/src/view/services.js","../../../packages/core/esm5/src/view/entrypoint.js","../../../packages/core/esm5/src/render3/debug.js","../../../packages/core/esm5/src/render3/metadata.js","../../../packages/core/esm5/src/render3/players.js"],"names":["exports","module","factory","require","extendStatics","d","b","__proto__","Array","p","hasOwnProperty","__","this","constructor","Object","create","prototype","assign","t","s","i","n","arguments","length","call","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","InjectionToken","_desc","options","ngMetadataName","ngInjectableDef","undefined","defineInjectable","providedIn","toString","metaCtor","makeMetadataCtor","props","DecoratorFactory","args","_i","apply","concat","annotationInstance","_a","bind","cls","typeFn","ANNOTATIONS","defineProperty","value","push","additionalProcessing","parentClass","values","propName","ParamDecoratorFactory","parameters","PARAMETERS","index","PropDecoratorFactory","name","meta","PROP_METADATA","unshift","decoratorInstance","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Errored","Destroyed","componentResourceResolutionQueue","Set","ShadowDom","newCounters","__window","window","__self","self","WorkerGlobalScope","_symbolIterator","Symbol_1","iterator","getOwnPropertyNames","Map","keys","scheduleMicroTask","fn","Zone","promise","then","stringify","token","map","join","overriddenName","res","firstTemplatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererRemoveNode","EMPTY","ngDevMode","typePrototype","type","declaredInputs","def","providersResolver","consts","componentDefinition","vars","hostVars","template","hostBindings","contentQueriesRefresh","inputs","outputs","exportAs","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewChecked","ngAfterViewChecked","onPush","changeDetection","ChangeDetectionStrategy","directiveDefs","pipeDefs","viewQuery","features","data","encapsulation","ViewEncapsulation","Emulated","styles","EMPTY_ARRAY","directiveTypes","feature","pipeTypes","id","_renderCompCount","invertObject","forEach","extractDirectiveDef","getComponentDef","getDirectiveDef","extractPipeDef","getPipeDef","defineNgModule","bootstrap","declarations","imports","obj","secondary","minifiedKey","publicName","declaredName","isArray","newLookup","defineBase","baseDefinition","definePipe","pipeDef","_global","globalNg","ÉµcompilerFacade","Error","_currentInjector","setCurrentInjector","injector","setInjectImplementation","impl","injectInjectorOnly","flags","injectRootLimpMode","notFoundValue","injectableDef","getInjectableDef","injectArgs","types","arg","j","Optional","SkipSelf","Self","Inject","inject","assertComponentType","actual","msg","devModeEqual","a","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","comparator","iterator1","getSymbolIterator","iterator2","item1","next","item2","done","WrappedValue","wrap","isWrapped","SimpleChange","isFirstChange","resolving","injectImpl","injectImplementation","FactoryPrototype","NodeInjectorFactory","stringify$1","readElementValue","getRootView","assertDefined","lViewData","readPatchedLViewData","getRootContext$1","viewOrComponent","readPatchedData","parentView","startView","viewOffset","nodeIndex","component","isComponentInstance","findViaComponent","directiveInstance","TVIEW","firstChild","getDirectiveStartIndex","directiveIndexEnd","getDirectiveEndIndex","directiveIndexStart","findViaDirective","discoverDirectives","native","context","existingCtx","createLContext","attachPatchData","directives","mpValue","rElement","parent_1","parentNode","parentContext","findViaNativeElement","getComponentViewByInstance","componentInstance","view","getComponentViewByIndex","HOST","getNativeByTNode","traverseNextElement","child","componentIndices","elementComponentIndex","CONTEXT","directiveStartIndex","assertNodeOfPossibleTypes","typeName","queueInitHooks","assertEqual","initHooks","queueLifecycleHooks","start","end","queueContentHooks","contentHooks","queueViewHooks","afterViewInit","viewHooks","executeInitHooks","currentView","creationMode","executeHooks","allHooks","checkHooks","contextViewData","getTView","checkNoChangesMode","mode","bindingRootIndex","enterView","newView","hostTNode","oldView","viewData","FLAGS","bindingStartIndex","renderer","RENDERER","previousOrParentTNode","isParent","nestingLevel","DECLARATION_VIEW","resetComponentState","creationOnly","viewCheckHooks","includeViewProviders","setIncludeViewProviders","v","getOrCreateNodeInjectorForNode","hostView","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","getParentInjectorView","parentLoc","hasParentInjector","parentData","parentIndex","parent","PARENT_INJECTOR","getParentInjectorLocation","HOST_NODE","NG_ELEMENT_ID","nextNgElementId","b6","bloomBit","b7","b5","tData","mask","injectAttributeImpl","attrNameToInject","attrs","attrName","bloomHash","bloomHashBitOrFactory","saveViewData","getViewData","setTNodeAndViewData","savePreviousOrParentTNode","parentLocation","NO_PARENT_INJECTOR","shouldSearchParent","instance","searchTokensOnInjector","previousTView","NOT_FOUND","bloomHasToken","moduleInjector","INJECTOR","get","currentTView","canAccessViewProviders","nodeFlags","startInjectables","nodeProviderIndexes","startDirectives","directiveCount","providerTokenOrDef","tInjectables","getNodeInjectable","lData","previousIncludeViewProviders","canSeeViewProviders","previousInjectImplementation","getPreviousOrParentTNode","injectorView","getFactoryOf","typeAny","getInjectorDef","getInheritedFactory","getPrototypeOf","RendererStyleFlags3","getLContainer","embeddedView","containerHostIndex","CONTAINER_INDEX","PARENT","projectionNodeIndex","viewToWalk","rootTNode","nextTNode","action","renderParent","beforeNode","nodeOrContainer","isLContainer","executeNodeAction","NATIVE","lContainer","VIEWS","node","head","componentView","projectionNodeStack$1","NEXT","findComponentView","insertBefore","isProceduralRenderer","removeChild","getContainerRenderParent","assertNodeType","insertView","lView","containerIndex","views","splice","QUERIES","detachView","removeIndex","detached","viewToDetach","addRemoveViewFromContainer","removeView","containerHost","destroyLView","destroyNode","walkTNodeTree","rootView","childIndex","viewOrContainer","HEADER_OFFSET","getLViewChild","container","cleanUpView","getParentState","state","cleanup","removeEventListener","listener","cleanupFn","CLEANUP","getRenderParent","nativeParentNode","tNodeParent","getHighestElementContainer","canInsertNativeNode","currentNode","nativeInsertBefore","appendChild","childEl","childTNode","parentEl","getParentNative","parentTNode","indexOf","RENDER_PARENT","getBeforeNodeForView","ngContainer","containerNative","viewTNode","parentNative","projectedTNode","projectionView","ngContainerChildTNode","appendProjectedNode","tProjectionNode","isNodeMatchingSelector","selector","nodeClassesLen","matchEndIdx","nodeAttrs","selectOnlyMarkerIdx","current","tagName","isPositive","skipToNextSelector","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","maybeAttrName","assertNotEqual","matchIndex","cssClassToMatch","selectOnlyMode","isNodeMatchingSelectorList","ngProjectAsAttrIdx","NG_PROJECT_AS_ATTR_NAME","getProjectAsAttrValue","selectors","ngProjectAsAttrVal","textSelectors","BoundPlayerFactory","_players","player","CorePlayerHandler","queuePlayer","initialStylingValues","storageIndex","slotValue","wrapper","element","stylingTemplate","getTNode","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","nonFactoryPlayerIndex","destroy","playerHandler","isClassBased_5","currFlag","ClassAndStylePlayerBuilder","currPlayerIndex","getPlayerBuilderIndex","singleIndex","playerBuildersAreDirty","hasPlayerBuilderChanged","playerBuilder","newIndex","setValue","value_1","indexForMulti","getMultiOrSingleIndex","valueForMulti","getValue","multiDirty","singleDirty","valueExists","setDirty","setContextDirty","renderStyleAndClassBindings","rootOrView","isFirstRender","classesStore","stylesStore","totalPlayersQueued","multiStartIndex","getMultiStartIndex","styleSanitizer","getStyleSanitizer","limitToSingleClasses","valueToApply","isClassBased_6","readInitialValue","getInitialValue","flag","setClass","prop","setStyle","getPlayerContext","playersStartIndex","builder","playerInsertionIndex","buildPlayer","oldPlayer","setContextPlayersDirty","sanitizer","store","DashCase","setProperty","className","add","addClass","isDirtyYes","adjustedIndex","setPlayerBuilder","insertionIndex","allocPlayerContext","getPlayerBuilder","startIndex","flagA","tmpFlag","flagB","getPointers","indexB","singleIndexA","getInitialIndex","_flag","singleIndexB","setFlag","pointers","indexA","setProp","getProp","setPlayerBuilderIndex","insertNewMultiProperty","classBased","playerIndex","doShift","indexStartPosition","isDirty","isClassBased","isSanitizable","prepareInitialFlag","_element","_type","_dirty","_factory","currentPlayer","_values","rf","getCreationMode","getCheckNoChangesMode","expandoInstructions","BINDING_INDEX","expandoStartIndex","setBindingRoot","currentDirectiveIndex","instruction","currentElementIndex","ACTIVE_INDEX","container_1","dynamicViewData","contentQueries","directiveDefIdx","refreshContentQueries","components","parentFirstTemplatePass","createLViewData","blueprint","slice","getIsParent","createViewNode","createTNode","setIsParent","renderEmbeddedTemplate","viewToRender","_previousOrParentTNode","setFirstTemplatePass","leaveView","renderComponentOrTemplate","componentOrContext","templateFn","getRendererFactory","rendererFactory","begin","namespaceHTML","getRenderFlags","_currentNamespace","elementStart","localRefs","elementCreate","assertDataInRange","createNodeAtIndex","elementDepthCount","overriddenRenderer","rendererToUse","getRenderer","createElement","createDirectivesAndLocals","localRefExtractor","getFirstTemplatePass","baseResolveDirective","totalHostVars","saveNameToExportMap","exportsMap","registry","matches","isComponentDef","throwMultipleComponentError","addComponentLogic","localIndex","localNames","createTView","viewIndex","pipes","initialViewLength","fill","createViewBlueprint","contentCheckHooks","destroyHooks","pipeDestroyHooks","isProc","namespaceURI","attrVal","setAttributeNS","attrName_1","setAttribute","createRenderer","rNode","elementOrSelector","defaultRenderer","selectRootElement","querySelector","createError","eventName","listenerFn","useCapture","storeCleanupFn","listen","wrappedListener","e","preventDefault","wrapListenerWithPreventDefault","addEventListener","cleanupInstances","getCleanup","getTViewCleanup","generatePropertyAliases","storeCleanupWithContext","elementEnd","setPreviousOrParentTNode","currentQueries","getCurrentQueries","elementAttribute","element_1","getNativeByIndex","removeAttribute","strValue","NO_CHANGE","dataValue","inputData","initializeTNodeInputs","isComponent","tViews","tParent","providerIndexes","initialInputs","setInputsForProperty","count","tNodeFlags","propStore","isInput","direction","defs","directiveDef","propertyAliasMap","internalName","elementStyling","classDeclarations","styleDeclarations","hasClassInput","stylesLookup","classesLookup","hasPassedDeclarations","initialStyleDeclarations","totalStyleDeclarations","initialClassDeclarations","initialStaticClasses","totalProps","styleProps","classNames","maxLength","multiStart","indexForSingle","initialFlag","indexForInitial","initialValue","onlyProcessSingleClasses","createStylingContextTemplate","delegateToClassInput","initialClasses","getStylingContext","getRootContext","stylingContext","classes","classesInput","stylesInput","classesPlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","ignoreAllClassUpdates","ignoreAllStyleUpdates","applyAllClasses","split","isClassBased_2","propIndex","classesStartIndex","newValue","newProp","playerBuilderIndex","classesPlayerBuilderIndex","stylesPlayerBuilderIndex","ctxIndex","hasValueChanged","indexOfEntry","findEntryPositionByProp","flagToCompare","valueToCompare","newFlag","dirty","isClassBased_3","propLimit","isClassBased_4","textNative","createTextNode","textBinding","element_2","generateExpandoInstructionBlock","elementIndex","prefillHostVars","postProcessDirective","directive","postProcessBaseDirective","directiveIndex","initialInputData","minifiedInputName","attrValue","inputsToStore","generateInitialInputs","setInputsFromAttrs","queueComponentIndexForCheck","initNodeFlags","numberOfDirectives","directiveFactory","addToViewTree","getCurrentSanitizer","createLContainer","hostNative","isForViewContainerRef","containerInternal","comment","createComment","rendererCreateComment","loadInternal","containerRefreshEnd","nextIndex","containerTNode","tContainerNode","startIdx","viewBlockId","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","createView","embeddedViewEnd","viewHost","adjustedElementIndex","projectionDef","componentNode","projection","noOfNodeBuckets","pData","tails","componentChild","bucketIndex","matchingSelectorIndex","nextNode","selectorIndex","nodeToProject","currentComponentView","projectedView","firstProjectedNode","projectionNodeStack","adjustedHostIndex","TAIL","markViewDirty","nothingScheduled","clean","_CLEAN_PROMISE","Promise","r","res_1","scheduler","tickRootContext","flushPlayers","hostTView","renderFlags","viewFlags","refreshDescendantViews","updateViewQuery","interpolationV","different","content","interpolation2","prefix","v0","i0","v1","suffix","interpolation3","i1","v2","interpolation4","i2","v3","bindingUpdated4","interpolation5","i3","v4","bindingUpdated","interpolation6","i4","v5","bindingUpdated2","interpolation7","i5","v6","bindingUpdated3","interpolation8","i6","v7","loadQueryList","queryListIdx","getBinding","bindingIndex","assertLessThan","isDifferent","oldValue","currValue","throwErrorIfNoChangesMode","savedContentQueriesLength","CONTENT_QUERIES","queryList","tViewContentQueries","CLEAN_PROMISE","resolveForwardRef","__forward_ref__","forwardRef","NullInjector","_THROW_IF_NOT_FOUND","StaticInjector","THROW_IF_NOT_FOUND","NULL","INJECTOR$1","Injector","__NG_ELEMENT_ID__","SWITCH_INJECTOR_FACTORY","noop","EMPTY$1","NULL_INJECTOR$1","records","provider","provide","deps","providerDeps","annotations","annotation","useExisting","USE_VALUE","useNew","useValue","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","set","MULTI_PROVIDER_FN","record","resolvedProvider","tryResolveToken","_records","tokenPath","NG_TEMP_TOKEN_PATH","SOURCE","message","formatError","tokens","NO_NEW_LINE","depRecords","depRecord","childRecord","resolveToken","CIRCULAR","text","charAt","substr","parts","JSON","_appRef","_viewContainerRef","ViewRef","_context","_lookUpContext","configurable","viewAttached","_view","detectChanges","checkNoChanges","_super","_this","RootViewRef","detectChangesInRootView","ElementRefToken","ElementRef_","__extends","TemplateRefToken","TemplateRef_","_declarationParentView","elementRef","_tView","_renderer","_queries","_injectorIndex","container$$1","declarationView","queries","viewRef","_tViewNode","hostContainer","R3TemplateRef","createElementRef","NodeInjector$$1","createViewRef","componentIndex","getComponent","ctx","getHostComponent","loadContext","getRootContext$2","componentOrView","getInjector","NodeInjector","getDirectives","getContext","getLocalRefs","result","localRefName","_published","publishDefaultGlobalUtils","publishGlobalUtil","w","GLOBAL_PUBLISH_EXPANDO_KEY","createRootComponentView","getOrCreateTView","createRootComponent","componentDef","hostFeatures","instantiateRootComponent","createRootContext","defaultScheduler","LifecycleHooksFeature","rootTView","InheritDefinitionFeature","definition","isComponentDef$1","superType","ngComponentDef","ngDirectiveDef","baseDef","ngBaseDef","superDef","writeableDef","maybeUnwrapEmpty","prevHostBindings_1","superHostBindings_1","prevViewQuery_1","superViewQuery_1","prevContentQueries_1","dirIndex","superContentQueries_1","prevContentQueriesRefresh_1","queryIndex","superContentQueriesRefresh_1","onDestroy","features_1","superPrototype","NgOnChangesFeature","privateMinKey_1","PRIVATE_PREFIX","originalProperty","checkProto","proto","getter","setter_1","simpleChanges","writable","currentChange","currentValue","_loop_1","delegateHook","ngOnChanges","NULL_INJECTOR$2","NULL_INJECTOR","getNullInjector","createInjector","defType","additionalProviders","R3Injector","destroyed","deepForEach","processProvider","makeRecord","assertNotDestroyed","service","ngOnDestroy","injectableDefInScope","injectableDefFactory","NOT_YET","hydrate","ngModule","providers","EMPTY_ARRAY$1","parents","has","imported","processInjectorType","delete","isTypeProvider","providerToFactory","isValueProvider","existing","multiRecord_1","CIRCULAR$1","isRootInjector","isFactoryProvider","classRef_1","hasDeps","resolveProvider$1","lInjectablesBlueprint","isComponent$$1","isViewProvider","beginIndex","endIndex","cptViewProvidersCount","providerFactory","directiveInject","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","factoryFn","f","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","multiFactoryAdd","isComponentProvider","item","arr","_","factories","multiResolve","multiProviders","componentCount","ProvidersFeature","viewProviders","noComponentFactoryError","error","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","ComponentFactoryResolver","_parent","_ngModule","_factories","CodegenComponentFactoryResolver","ComponentFactoryBoundToModule","componentType","nativeElement","ElementRef","templateUrl","slotCount","animations","Important","Renderer2","ComponentFactoryResolver$$1","nonMinified","minified","array","ROOT_CONTEXT","SCHEDULER","ComponentFactory","ComponentFactory$$1","toRefArray","projectableNodes","rootSelectorOrNode","isInternalRootView","WRAP_RENDERER_FACTORY2","domRendererFactory3","hostRNode","locateHostElement","rootFlags","tElementNode","projection$$1","nodeList","previousTNode","firstTNode","ComponentRef","componentRef","ComponentRef$$1","viewEngine_ComponentFactory","location","destroyCbs","changeDetectorRef","viewEngine_ComponentRef","appendI18nNode","rendererMoveNode","i18nApply","instructions","localPreviousTNode","localParentTNode","elementTNode","textRNode","removedElement","removedTNode","load","NgModuleRef","_bootstrapComponents","ngModuleDef","getNgModuleDef","ngModuleType","viewEngine_NgModuleRef","COMPONENT_FACTORY_RESOLVER","NgModuleFactory","NgModuleRef$$1","callback","NgModuleFactory$$1","pureFunction0","slotOffset","pureFn","thisArg","pureFunction1","exp","pureFunction2","exp1","exp2","pureFunction3","exp3","pureFunction4","exp4","pureFunction5","exp5","getBindingRoot","pureFunction6","exp6","pureFunction7","exp7","pureFunction8","exp8","pureFunctionV","exps","getPipeDef$1","pipeName","pipeRegistry","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","EventEmitter","isAsync","emit","schedulerFn","err","completeFn","generatorOrNext","__isAsync","setTimeout","complete","Subscription","sink","subscribe","errorFn","rxjs","Subject","TemplateRef","predicate","descend","read","deep","createQuery","shallowResults","deepResults","LQueries_","addNode","shallow","isContentQueryHost","copyQueriesToContainer","query","containerValues","list","copyQueriesToView","insertView$1","removeView$1","viewValuesIdx","removed","queryRead","matchingIdx","getIdxOfMatchingDirective","queryReadByTNodeType","ViewEngine_TemplateRef","addMatch","getIdxOfMatchingSelector","directiveIdx","previous","changes","QueryList_","some","reset","unsubscribe","memoryIndex","assertPreviousIsParent","QueryType","QueryList","track","queryRefresh","queryListImpl","_valuesTree","bypassSanitizationTrustString","trustedString","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","DOMParser","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_XHR","html","xhr","XMLHttpRequest","responseType","open","send","parseFromString","templateEl","elAttrs","el","childNode","nodeType","Node","ELEMENT_NODE","stripCustomNsAttrs","DATA_URL_PATTERN","_sanitizeUrl","url","String","match","SAFE_URL_PATTERN","tagSet","tags","sets","sets_1","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","merge$1","OPTIONAL_END_TAG_BLOCK_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","startElement","TEXT_NODE","chars","sanitizedSomething","endElement","checkClobberedElement","nodeName","toLowerCase","VALID_ELEMENTS","buf","attributes","elAttr","lower","VOID_ELEMENTS","SanitizingHtmlSerializer","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","replace","SURROGATE_PAIR_REGEXP","charCodeAt","NON_ALPHANUMERIC_REGEXP","inertBodyHelper","InertBodyHelper","unsafeHtml","unsafeHtmlInput","parsedHtml","mXSSAttempts","safeHtml","sanitizeChildren","getTemplateContent","isDevMode","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","_sanitizeStyle","trim","urlMatch","URL_RE","SAFE_STYLE_VALUE","outsideSingle","c","outsideDouble","hasBalancedQuotes","sanitizeHtml","sanitize","sanitizeStyle","unsafeStyle","sanitizeUrl","unsafeUrl","sanitizeResourceUrl","unsafeResourceUrl","angularCoreEnv","ÉµdefineBase","ÉµdefineComponent","r3.definePipe","ÉµdefineDirective","r3.directiveInject","r3.getFactoryOf","defineInjector","ÉµdefineNgModule","ÉµdefinePipe","ÉµdirectiveInject","ÉµgetFactoryOf","ÉµgetInheritedFactory","r3.ProvidersFeature","ÉµinjectAttribute","injectAttribute","ÉµtemplateRefExtractor","templateRefExtractor","ÉµNgOnChangesFeature","ÉµProvidersFeature","r3.nextContext","ÉµInheritDefinitionFeature","r3.containerRefreshStart","ÉµelementAttribute","Éµbind","Éµcontainer","ÉµnextContext","nextContext","ÉµcontainerRefreshStart","r3.namespaceSVG","ÉµcontainerRefreshEnd","r3.enableBindings","ÉµloadQueryList","ÉµnamespaceHTML","r3.elementStart","ÉµnamespaceMathML","r3.elementEnd","ÉµnamespaceSVG","r3.element","ÉµenableBindings","r3.elementContainerStart","ÉµdisableBindings","r3.elementContainerEnd","ÉµelementStart","ÉµelementEnd","Éµelement","ÉµEC","ÉµeC","ÉµpureFunction0","r3.pureFunction5","ÉµpureFunction1","r3.pureFunction6","ÉµpureFunction2","r3.pureFunction7","ÉµpureFunction3","r3.pureFunction8","ÉµpureFunction4","r3.pureFunctionV","ÉµpureFunction5","ÉµpureFunction6","r3.restoreView","ÉµpureFunction7","ÉµpureFunction8","ÉµpureFunctionV","ÉµgetCurrentView","r3.interpolation4","ÉµrestoreView","restoreView","Éµinterpolation1","r3.interpolation6","Éµinterpolation2","r3.interpolation7","Éµinterpolation3","r3.interpolation8","Éµinterpolation4","r3.interpolationV","Éµinterpolation5","Éµinterpolation6","r3.listener","Éµinterpolation7","Éµinterpolation8","r3.projection","ÉµinterpolationV","ÉµelementClassProp","r3.pipeBind1","Éµlistener","Éµload","Éµprojection","r3.pipeBind4","ÉµelementProperty","r3.pipeBindV","ÉµpipeBind1","ÉµpipeBind2","ÉµpipeBind3","r3.query","ÉµpipeBind4","ÉµpipeBindV","ÉµprojectionDef","r3.reference","Éµpipe","pipe","Éµquery","ÉµqueryRefresh","ÉµregisterContentQuery","r3.elementStylingApply","Éµreference","r3.template","ÉµelementStyling","ÉµelementStylingMap","r3.textBinding","ÉµelementStyleProp","elementStyleProp","ÉµelementStylingApply","r3.embeddedViewEnd","Éµtemplate","Éµtext","ÉµtextBinding","r3.i18nStart","ÉµembeddedViewStart","embeddedViewStart","ÉµembeddedViewEnd","r3.i18nApply","Éµi18nAttribute","sanitization.sanitizeHtml","Éµi18nExp","i18nExp","Éµi18nStart","i18nStart","Éµi18nEnd","i18nEnd","Éµi18nApply","ÉµsanitizeHtml","sanitization.sanitizeUrl","ÉµsanitizeStyle","unsafeScript","Type","Function","DELEGATE_CTOR","_reflect","reflect","ReflectionCapabilities","paramTypes","paramAnnotations","_ownParameters","exec","typeStr","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","parentCtor","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","paramAnnotations_1","getParentCtor","_ownAnnotations","typeOrFunc","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","setter","resolveEnum","decoratorInvocations","annotationCls","decoratorInvocation","parentProto","ctor","compiler","dep","host","setTokenAndResolvedType","resolved","R3ResolvedDependencyType","Token","param","optional","skipSelf","Host","Attribute","attributeName","moduleType","declaration","NG_COMPONENT_DEF","patchComponentDefWithScope","transitiveScopes","NG_DIRECTIVE_DEF","NG_PIPE_DEF","compileNgModuleDefs","flatten$1","EMPTY_ARRAY$2","NG_MODULE_DEF","flatten","compileNgModule","expandModuleWithProviders","emitInline","ngInjectorDef","NG_INJECTOR_DEF","reflectDependencies","getCompilerFacade","compileInjector","from","compilation","dir","transitiveScopesFor","isNgModule","transitiveCompileScopes","scopes","exported","declared","importedTyped","importedScope","entry","exportedTyped","exportedScope","out","compileComponent","metadata","styleUrls","ngSelectorScope","compileDirective","facade","directiveMetadata","getReflect","typeArgumentCount","EMPTY_OBJ","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","typeSourceSpan","isQueryAnn","field","ann","queriesMeta","propertyName","convertToR3QueryMetadata","ngPipeDef","compilePipe","inheritedBaseDef","initializeBaseDef","convertInjectableProviderToFactory","reflectionCapabilities","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","full","major","USE_VALUE$2","srcMeta","meta_1","hasAProvider","isUseClassProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","compilerMeta","ctorDeps","userDeps","compileInjectable","injectableType","render3CompileInjectable","defaultErrorLogger","console","ErrorHandler","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","_console","getOriginalError","constructResolvingPath","findFirstClosedCycle","reverse","errMsg","constructResolvingMessage","wrappedError","addKey","noAnnotationError","params","ii","parameter","signature","ReflectiveKey","_globalKeyRegistry","numberOfKeys","enumerable","_allKeys","newKey","KeyRegistry","size","caps","Reflector","method","importUri","fromKey","ReflectiveDependency","resolvedFactories","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","resolvedDeps","reflector","_dependenciesFor","aliasInstance","constructDependencies","normalizedProvidersMap","ResolvedReflectiveProvider_","_normalizeProviders","_extractToken","_createDependency","paramMetadata","visibility","ReflectiveInjector_","_providers","_constructionCounter","len","keyIds","objs","resolveAndInstantiate","instantiateResolved","getProviderAtIndex","_new","_instantiateProvider","_instantiate","ResolvedReflectiveFactory$$1","originalException","_getByReflectiveDependency","injectionError","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","UNDEFINED","inj","inj_","_mapProviders","displayName","ApplicationInitStatus","appInits","initialized","runInitializers","asyncInitPromises","resolve","initResult","isPromise","all","catch","reject","Injectable","APP_ID","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","warn","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","clearCacheFor","getModuleId","detectWTF","trace","wtf","events","hasPendingMicrotasks","onStable","assertZonePatched","zone","_nesting","_outer","_inner","fork","isAngularZone","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","invoke","hasTaskState","hasTask","change","microTask","checkStable","hasPendingMacrotasks","macroTask","onHandleError","handleError","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","isStable","onMicrotaskEmpty","runOutsideAngular","NoopNgZone","_ngZone","run","taskTrackingZone","_watchAngularEvents","onUnstable","_didWork","_isZoneStable","NgZone","assertNotInAngularZone","_runCallbacksIfReady","Testability","increasePendingRequestCount","decreasePendingRequestCount","_pendingCount","_callbacks","cb","pop","clearTimeout","timeoutId","doneCb","getPendingTasks","filter","updateCb","pending_1","macroTasks","timeout","getPendingRequestCount","using","exactMatch","TestabilityRegistry","unregisterApplication","getTestability","elem","findInAncestors","NgProbeToken","createPlatform","_platform","ALLOW_MULTIPLE_PLATFORMS","PlatformRef","createPlatformFactory","parentPlatformFactory","marker","desc","extraProviders","getPlatform","injectedProviders","assertPlatform","requiredToken","platform","_injector","moduleFactory","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","remove","_modules","onError","errorHandler","initStatus","donePromise","_moduleDoBootstrap","compilerOptions","appRef","ApplicationRef","ngDoBootstrap","_destroyed","optionsReducer","dst","reduce","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_stable","componentTypes","tick","Observable","observer","assertInAngularZone","merge","unstableSub","componentFactory","ComponentFactory$1","componentOrFactory","selectorOrNode","compRef","_unloadComponent","testability","registerApplication","_loadComponent","_runningTick","_tickScope","_views","attachView","wtfCreateScope","Console","_results","flatten$2","flat","first","loadAndCompile","path","exportName","loadFactory","factoryClassSuffix","System","import","_config","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","checkNotEmpty","modulePath","ViewContainerRef","ViewContainerRefToken","ViewContainerRef_","_lContainer","_hostTNode","_hostView","startTNode","parentTNode_1","getParentInjectorViewOffset","global","getParentInjectorTNode","clear","_viewRefs","templateRef","adjustedIdx","_adjustIndex","ngModuleRef","contextInjector","parentInjector","insert","move","shift","parentOfHostNative","commentNode","nativeNextSibling","createContainerRef","ChangeDetectorRef","ViewRef$1","EmbeddedViewRef","EventListener","DebugNode","nativeNode","_debugContext","listeners","DebugElement","references","providerTokens","properties","addChild","childNodes","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","triggerEventHandler","eventObj","DefaultIterableDifferFactory","DefaultIterableDiffer","trackByFn","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","nextRemove","addRemoveOffset","adjPreviousIndex","getPreviousIndex","moveOffsets","currentIndex","_nextRemoved","previousIndex","localCurrentIndex","localMovePreviousIndex","offset","diff","collection","check","index_1","_trackByFn","looseIdentical","trackById","itemTrackBy","mayBeDirty","_verifyReinsertion","_addIdentityChange","_next","nextRecord","_nextPrevious","_nextAdded","_removalsTail","previousRecord","_prev","_moveAfter","_reinsertAfter","reinsertRecord","_addToRemovals","_unlink","_nextMoved","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","_remove","toIndex","_identityChangesTail","_identityChangesHead","_nextIdentityChange","_head","_tail","_nextDup","_DuplicateItemRecordList","atOrAfterIndex","_prevDup","duplicates","moveOffset","isJsObject","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_reset","_forEach","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","before","record_1","_maybeAddToChanges","KeyValueChangeRecord_","_nextChanged","_addToAdditions","_addToChanges","IterableDiffers","iterable","find","supports","KeyValueDiffers","kv","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","defaultIterableDiffers","APP_INITIALIZER","_iterableDiffersFactory","_keyValueDiffersFactory","NgModule","APPLICATION_MODULE_PROVIDERS","shiftInitState","priorInitState","newInitState","initState","shouldCallLifecycleInitHook","initIndex","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","isFirstCheck","_tokenKeyCache","tokenKey","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","currView","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","markParentViewsForCheck","nodes","asElementData","handleEvent","declaredViewContainer","viewParentEl","matchedQueries","valueType","queryId","matchedQueryIds","filterQueryId","splitDepsDsl","sourceName","renderHost","componentRendererType","Native","renderElement","resolveDefinition","DEFINITION_CACHE","NOOP","visitRootRenderNodes","nextSibling","nodeDef","visitRenderNode","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","childCount","projectedNodes","root","renderNode","bindingFlags","execRenderNodeAction","rn","embeddedViews","_embeddedViews","k","NS_PREFIX_RE","splitNamespace","calcBindingFlags","bindings","elDef","getParentRenderElement","preserveContent","ns","name_2","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","elementEventFullName","output","listenTarget","listenerView","checkAndUpdateElementValue","elData","binding","renderNode$$1","securityContext","renderValue","setElementAttribute","setElementClass","unit","resolveNgModuleDep","depDef","former","InjectorRefTokenKey","tokenKey_1","INJECTORRefTokenKey$1","providerDef","_def","providersByKey","_createProviderInstance","providerInstance","UNDEFINED_VALUE","_createProviderInstance$1","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","elementData","viewContainerParent","addToArray","vcElementData","projectedViews","dvcElementData","_projectedViews","viewDef","parentNodeDef","attachProjectedView","detachEmbeddedView","removeFromArray","renderAttachEmbeddedView","prevView","prevRenderNode","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","ngContentSelectors","inputsArr","templateName","outputsArr","componentNodeIndex","EMPTY_CONTEXT","asProviderData","tslib_1.__extends","VERSION","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","Injector_","createViewContainerData","_data","attachToViewContainerRef","viewRef_","oldViewIndex","newViewIndex","dirtyParentQueries","renderDetachView","createChangeDetectorRef","fs","disposables","detachFromAppRef","attachToAppRef","vcRef","createTemplateData","_parentView","createInjector$1","createRendererV1","RendererAdapter","namespaceAndName","hostElement","parentElement","createText","projectNodes","attachViewAfter","viewRootNodes","attributeValue","isAdd","styleName","styleValue","setText","animate","bootstrapComponents","NgModuleRef_","_moduleType","provDef","injectFlags","lifecycles","checkIndex","matchedQueriesDsl","splitMatchedQueriesDsl","depDefs","outputIndex","childFlags","directChildFlags","childMatchedQueries","createPipeInstance","createDirectiveInstance","outputObservable","subscription","eventHandlerClosure","createClass","allowPrivateServices","callFactory","tokenKey$$1","ChangeDetectorRefTokenKey","RendererV1TokenKey","findCompView","searchView","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","INJECTORRefTokenKey","allProviders","publicProviders","providerData","providerDef_1","isComponentView","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ngAfterViewInit","isEmbeddedView","tplDef","filterId","queryIds","asQueryList","checkAndUpdateQuery","newValues","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","dvc","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","nonMinifiedName","nodeCount","lastRenderRootNode","parentEnd","anchorDef$$1","compRenderer","rendererType","outputCount","createViewNodes","compViewDef","nodeData","createProviderInstance","initView","execEmbeddedViewsAction","ViewAction","CheckNoChanges","updateRenderer","markProjectedViewsForCheck","updateDirectives","CheckAndUpdate","execQueriesAction","callInit","checkAndUpdateNode","argStyle","v8","v9","bindLen","changed","checkAndUpdateElementInline","_addInterpolationPart","checkAndUpdateTextInline","updateProp","checkAndUpdateDirectiveInline","asPureExpressionData","transform","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","i_1","checkNoChangesNode","checkNoChangesQuery","Destroy","asTextData","renderText","destroyViewNodes","CreateViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","execComponentViewsAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","createProdRootView","prodCheckAndUpdateNode","RendererFactory2","Sanitizer","viewDef$$1","viewDefOverrides","hasOverrides","providerOverrides","hasDeprecatedOverrides","override","deprecatedBehavior","modules","comp","compFactory","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","elIndex","prodCheckNoChangesNode","callWithDebugContext","DebugAction","debugUpdateDirectives","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","attr","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","elView","elOrCompView","childDef","collectReferences","findHostElement","logError","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","oldAction","_currentAction","oldNodeIndex","_currentNodeIndex","_currentView","getCurrentDebugContext","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","debugContextFactory","namespace","debugCtx","debugEl","getDebugNode","debugChildEl","debugRefEl","oldChild","removeClass","style","NgModuleFactory_","_ngModuleDefFactory","initServicesIfNeeded","isRoot","Render3DebugRendererFactory2","Render3DebugContext","_nativeNode","lDebugCtx","directivesCount","directiveIdxEnd","directiveIdxStart","urlMap","cachedResourceResolve","resp","resourceResolver","unwrapResponse","urlFetches","styleUrl","styleOffset","opts","componentTag","translation","placeholders","staticText","i18nTagRegex","idx","b1","b2","translationParts","nbTemplates","templateRoots","maxIndex","tmplIndex","tmplInstructions","partIndex","phIndex","currentElements","templateRootIndex","openedTagCount","phVisited","currentExpressions","newTmplIndex","phKeys","ph","tmplElements","tmplExpressions","lastChildIndex","clazz","__assign","throwInvalidRefError","element$$1","nonFactoryPlayersStart","players","moduleFactories","templateFactory","componentProvider","UNDEFINED_RENDERER_TYPE_ID","outputDefs","fixedAttrs","_b","bindingDefs","_c","namespaceAndName_1","suffixOrSecurityContext","_d","ns_1","name_1","_e","None","isFilled","resolveRendererType2","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","_toStringWithNull","constAndInterp","APP_ROOT","propToIndex","nbKeys","globalBindingIdx","nodeIdx","currentElementHasPublicProviders","currentElementHasPrivateProviders","currentParent","viewBindingCount","currentRenderParent","viewMatchedQueries","nodeMatchedQueries","isPrivateService","newParent","isNgContainer","viewNodeFlags","rootNodeFlags","viewRootNodeFlags"],"mappings":"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","file":"/mnt/c/Users/Sarun/dev/angular/dist/packages-dist/core/bundles/core.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === /** @type {?} */ (getClosureSafeProperty)) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nexport function fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=property.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nInjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    InjectionToken.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nexport { InjectionToken };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /** @type {?} */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nexport function InjectableDefToken() { }\n/** @type {?} */\nInjectableDefToken.prototype.ngInjectableDef;\n//# sourceMappingURL=injection_token.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * \\@ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * \\@publicApi\n * @record\n */\nexport function TypeDecorator() { }\n/** @type {?} */\nexport var ANNOTATIONS = '__annotations__';\n/** @type {?} */\nexport var PARAMETERS = '__parameters__';\n/** @type {?} */\nexport var PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, [this].concat(args));\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, [cls].concat(args));\n            /** @type {?} */\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\n    return /** @type {?} */ (DecoratorFactory);\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            /** @type {?} */\n            var values = props.apply(void 0, args);\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(name, props, parentClass) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            /** @type {?} */\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (/** @type {?} */ (cls))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @return {?}\n         */\n        function PropDecorator(target, name) {\n            /** @type {?} */\n            var constructor = target.constructor;\n            /** @type {?} */\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, [target, name].concat(args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=decorators.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    /**\n       * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n       * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n       * Change detection can still be explictly invoked.\n       */\n    OnPush: 0,\n    /**\n       * Use the default `CheckAlways` strategy, in which change detection is automatic until\n       * explicitly deactivated.\n       */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nvar ChangeDetectorStatus = {\n    /**\n       * A state in which, after calling `detectChanges()`, the change detector\n       * state becomes `Checked`, and must be explicitly invoked or reactivated.\n       */\n    CheckOnce: 0,\n    /**\n       * A state in which change detection is skipped until the change detector mode\n       * becomes `CheckOnce`.\n       */\n    Checked: 1,\n    /**\n       * A state in which change detection continues automatically until explictly\n       * deactivated.\n       */\n    CheckAlways: 2,\n    /**\n       * A state in which a change detector sub tree is not a part of the main tree and\n       * should be skipped.\n       */\n    Detached: 3,\n    /**\n       * Indicates that the change detector encountered an error checking a binding\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\n       * detectors in this state do not detect changes.\n       */\n    Errored: 4,\n    /**\n       * Indicates that the change detector has been destroyed.\n       */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `\\@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `\\@Compenent.templateUrl` into\n * // `\\@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n * @return {?}\n */\nexport function resolveComponentResources(resourceResolver) {\n    /** @type {?} */\n    var urlFetches = [];\n    /** @type {?} */\n    var urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        var promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component) {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n                component.templateUrl = undefined;\n            });\n        }\n        /** @type {?} */\n        var styleUrls = component.styleUrls;\n        /** @type {?} */\n        var styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    componentResourceResolutionQueue.clear();\n    return Promise.all(urlFetches).then(function () { return null; });\n}\n/** @type {?} */\nvar componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function componentNeedsResolution(component) {\n    return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @return {?}\n */\nexport function clearResolutionOfComponentResourcesQueue() {\n    componentResourceResolutionQueue.clear();\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n//# sourceMappingURL=resource_loading.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ViewEncapsulation = {\n    /**\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n       * selectors.\n       *\n       * This is the default option.\n       */\n    Emulated: 0,\n    /**\n       * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n       * Use the native encapsulation mechanism of the renderer.\n       *\n       * For the DOM this means using the deprecated [Shadow DOM\n       * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    Native: 1,\n    /**\n       * Don't provide any template or style encapsulation.\n       */\n    None: 2,\n    /**\n       * Use Shadow DOM to encapsulate styles.\n       *\n       * For the DOM this means using modern [Shadow\n       * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    ShadowDom: 3,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nvar __global = typeof global !== 'undefined' && global;\n/** @type {?} */\nvar _global = __global || __window || __self;\n/** @type {?} */\nvar promise = Promise.resolve(0);\nexport { _global as global };\n/** @type {?} */\nvar _symbolIterator = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        /** @type {?} */\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            /** @type {?} */\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                /** @type {?} */\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    /** @type {?} */\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    /** @type {?} */\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n * @param {?} fn\n * @return {?}\n */\nexport function noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nexport function ngDevModeResetPerfCounters() {\n    /** @type {?} */\n    var newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n    // NOTE: Under Ivy we may have both window & global defined in the Node\n    //    environment since ensureDocument() in render3.ts sets global.window.\n    if (typeof window != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (window))['ngDevMode'] = newCounters;\n    }\n    if (typeof global != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (global))['ngDevMode'] = newCounters;\n    }\n    if (typeof self != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (self))['ngDevMode'] = newCounters;\n    }\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n//# sourceMappingURL=ng_dev_mode.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { noSideEffects } from '../util';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from './fields';\n/** @type {?} */\nexport var EMPTY = {};\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY);\n    Object.freeze(EMPTY_ARRAY);\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    /** @type {?} */\n    var type = componentDefinition.type;\n    /** @type {?} */\n    var typePrototype = type.prototype;\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    /** @type {?} */\n    var def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        hostVars: componentDefinition.hostVars || 0,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || /** @type {?} */ ((null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n        attributes: componentDefinition.attributes || null,\n        declaredInputs: declaredInputs,\n        inputs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        outputs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        pipeDefs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: /** @type {?} */ (null),\n    };\n    def._ = /** @type {?} */ (noSideEffects(function () {\n        /** @type {?} */\n        var directiveTypes = /** @type {?} */ ((componentDefinition.directives));\n        /** @type {?} */\n        var feature = componentDefinition.features;\n        /** @type {?} */\n        var pipeTypes = /** @type {?} */ ((componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach(function (fn) { return fn(def); });\n        def.directiveDefs = directiveTypes ?\n            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef); } :\n            null;\n        def.pipeDefs = pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null;\n    }));\n    return /** @type {?} */ (def);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractDirectiveDef(type) {\n    /** @type {?} */\n    var def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return /** @type {?} */ ((def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractPipeDef(type) {\n    /** @type {?} */\n    var def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return /** @type {?} */ ((def));\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function defineNgModule(def) {\n    /** @type {?} */\n    var res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n    };\n    return /** @type {?} */ (res);\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName')\n *   propName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   a0: 'propName1',\n *   b1: ['publicName', 'propName2'],\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'publicName': 'b1'\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in:\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'propName2': 'b1'\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY;\n    /** @type {?} */\n    var newLookup = {};\n    for (var minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            var publicName = obj[minifiedKey];\n            /** @type {?} */\n            var declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[declaredName] = minifiedKey);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nexport function defineBase(baseDefinition) {\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/** *\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n  @type {?} */\nexport var defineDirective = /** @type {?} */ ((defineComponent));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nexport function definePipe(pipeDef) {\n    return /** @type {?} */ ((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getComponentDef(type) {\n    return (/** @type {?} */ (type))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getDirectiveDef(type) {\n    return (/** @type {?} */ (type))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getPipeDef(type) {\n    return (/** @type {?} */ (type))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getNgModuleDef(type) {\n    return (/** @type {?} */ (type))[NG_MODULE_DEF] || null;\n}\n//# sourceMappingURL=definition.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { global } from '../../util';\nexport { R3ResolvedDependencyType } from './compiler_facade_interface';\n/**\n * @return {?}\n */\nexport function getCompilerFacade() {\n    /** @type {?} */\n    var globalNg = global[\"ng\"];\n    if (!globalNg || !globalNg.ÉµcompilerFacade) {\n        throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n            \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n            \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n            \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n    }\n    return globalNg.ÉµcompilerFacade;\n}\n//# sourceMappingURL=compiler_facade.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getInjectableDef } from './defs';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /**\n       * Specifies that an injector should retrieve a dependency from any injector until reaching the\n       * host element of the current component. (Only used with Element Injector)\n       */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nexport { InjectFlags };\n/** *\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n  @type {?} */\nvar _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    /** @type {?} */\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/** *\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n  @type {?} */\nvar _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nexport function setInjectImplementation(impl) {\n    /** @type {?} */\n    var previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function injectInjectorOnly(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & 8 /* Optional */ ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nexport function injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & 8 /* Optional */)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    /** @type {?} */\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        /** @type {?} */\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            var type = undefined;\n            /** @type {?} */\n            var flags = 0 /* Default */;\n            for (var j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= 8 /* Optional */;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= 4 /* SkipSelf */;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= 2 /* Self */;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(/** @type {?} */ ((type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n//# sourceMappingURL=injector_compatibility.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getComponentDef, getNgModuleDef } from './definition';\n/**\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNumber(actual, msg) {\n    if (typeof actual != 'number') {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertSame(actual, expected, msg) {\n    if (actual !== expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertComponentType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertNgModuleType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(\"ASSERTION ERROR: \" + msg);\n}\n//# sourceMappingURL=assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getSymbolIterator, looseIdentical } from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    /** @type {?} */\n    var isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nWrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.wrap = /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.unwrap = /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.isWrapped = /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nexport { WrappedValue };\nif (false) {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nvar /**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nSimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    SimpleChange.prototype.isFirstChange = /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    function () { return this.firstChange; };\n    return SimpleChange;\n}());\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nexport { SimpleChange };\nif (false) {\n    /** @type {?} */\n    SimpleChange.prototype.previousValue;\n    /** @type {?} */\n    SimpleChange.prototype.currentValue;\n    /** @type {?} */\n    SimpleChange.prototype.firstChange;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    var iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        var item1 = iterator1.next();\n        /** @type {?} */\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        var iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=change_detection_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport var TNODE = 8;\n/** @type {?} */\nexport var PARENT_INJECTOR = 8;\n/** @type {?} */\nexport var INJECTOR_SIZE = 9;\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LViewData`s to traverse and index in the `LViewData`\n * pointing to the parent injector.\n * @record\n */\nexport function RelativeInjectorLocation() { }\n/** @type {?} */\nRelativeInjectorLocation.prototype.__brand__;\n/** @enum {number} */\nvar RelativeInjectorLocationFlags = {\n    InjectorIndexMask: 32767,\n    AcrossHostBoundary: 32768,\n    ViewOffsetShift: 16,\n    NO_PARENT: -1,\n};\nexport { RelativeInjectorLocationFlags };\n/** @type {?} */\nexport var NO_PARENT_INJECTOR = /** @type {?} */ (-1);\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nvar /**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nNodeInjectorFactory = /** @class */ (function () {\n    function NodeInjectorFactory(factory, /**\n           * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n           */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n    return NodeInjectorFactory;\n}());\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport { NodeInjectorFactory };\nif (false) {\n    /**\n     * The inject implementation to be activated when using the factory.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.injectImpl;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.resolving;\n    /**\n     * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.canSeeViewProviders;\n    /**\n     * An array of factories to use in case of `multi` provider.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.multi;\n    /**\n     * Number of `multi`-providers which belong to the component.\n     *\n     * This is needed because when multiple components and directives declare the `multi` provider\n     * they have to be concatenated in the correct order.\n     *\n     * Example:\n     *\n     * If we have a component and directive active an a single element as declared here\n     * ```\n     * component:\n     *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n     *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n     *\n     * directive:\n     *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n     * ```\n     *\n     * Then the expected results are:\n     *\n     * ```\n     * providers: ['component', 'directive']\n     * viewProviders: ['component', 'componentView', 'directive']\n     * ```\n     *\n     * The way to think about it is that the `viewProviders` have been inserted after the component\n     * but before the directives, which is why we need to know how many `multi`s have been declared by\n     * the component.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.componentProviders;\n    /**\n     * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n     * See `providerFactory`.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.index;\n    /**\n     * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n     * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n     * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n     *\n     * Example:\n     *\n     * Given:\n     * ```\n     * provides: [ {provide: String, useValue: 'all', multi: true} ],\n     * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n     * ```\n     *\n     * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n     * of view injection. We further have to make sure that the shared instances (in our case\n     * `all`) are the exact same instance in both the content as well as the view injection. (We\n     * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n     * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n     * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n     * ['all', 'viewOnly']`).\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.providerFactory;\n    /**\n     * Factory to invoke in order to create a new instance.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.factory;\n}\n/** @type {?} */\nvar FactoryPrototype = NodeInjectorFactory.prototype;\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n/** @type {?} */\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { devModeEqual } from '../change_detection/change_detection_util';\nimport { global } from '../util';\nimport { assertDefined, assertLessThan } from './assert';\nimport { ACTIVE_INDEX } from './interfaces/container';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { NO_PARENT_INJECTOR } from './interfaces/injector';\nimport { CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, PARENT, TVIEW } from './interfaces/view';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nexport function isDifferent(a, b, checkNoChangesMode) {\n    if (ngDevMode && checkNoChangesMode) {\n        return !devModeEqual(a, b);\n    }\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function stringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    /** @type {?} */\n    var result = [];\n    /** @type {?} */\n    var i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        var item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n/**\n * Retrieves a value from any `LViewData` or `TData`.\n * @template T\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function loadInternal(index, arr) {\n    ngDevMode && assertDataInRangeInternal(index + HEADER_OFFSET, arr);\n    return arr[index + HEADER_OFFSET];\n}\n/**\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function assertDataInRangeInternal(index, arr) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n/**\n * Takes the value of a slot in `LViewData` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LViewData. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param {?} value The initial value in `LViewData`\n * @return {?}\n */\nexport function readElementValue(value) {\n    while (Array.isArray(value)) {\n        value = /** @type {?} */ (value[HOST]);\n    }\n    return value;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} arr\n * @return {?}\n */\nexport function getNativeByIndex(index, arr) {\n    return readElementValue(arr[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getNativeByTNode(tNode, hostView) {\n    return readElementValue(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function getTNode(index, view) {\n    return /** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nexport function getComponentViewByIndex(nodeIndex, hostView) {\n    /** @type {?} */\n    var slotValue = hostView[nodeIndex];\n    return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isContentQueryHost(tNode) {\n    return (tNode.flags & 16384 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isComponent(tNode) {\n    return (tNode.flags & 4096 /* isComponent */) === 4096 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function isComponentDef(def) {\n    return (/** @type {?} */ (def)).template !== null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isLContainer(value) {\n    // Styling contexts are also arrays, but their first index contains an element node\n    return Array.isArray(value) && typeof value[ACTIVE_INDEX] === 'number';\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function isRootView(target) {\n    return (target[FLAGS] & 64 /* IsRoot */) !== 0;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param {?} target\n * @return {?}\n */\nexport function getRootView(target) {\n    ngDevMode && assertDefined(target, 'component');\n    /** @type {?} */\n    var lViewData = Array.isArray(target) ? (/** @type {?} */ (target)) : /** @type {?} */ ((readPatchedLViewData(target)));\n    while (lViewData && !(lViewData[FLAGS] & 64 /* IsRoot */)) {\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n    }\n    return lViewData;\n}\n/**\n * @param {?} viewOrComponent\n * @return {?}\n */\nexport function getRootContext(viewOrComponent) {\n    /** @type {?} */\n    var rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return /** @type {?} */ (rootView[CONTEXT]);\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedData(target) {\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedLViewData(target) {\n    /** @type {?} */\n    var value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : (/** @type {?} */ (value)).lViewData;\n    }\n    return null;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function getParentInjectorIndex(parentLocation) {\n    return (/** @type {?} */ ((parentLocation))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function getParentInjectorViewOffset(parentLocation) {\n    return (/** @type {?} */ ((parentLocation))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LViewData instance from which to start walking up the view tree\n * @return {?} The LViewData instance that contains the parent injector\n */\nexport function getParentInjectorView(location, startView) {\n    /** @type {?} */\n    var viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    var parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = /** @type {?} */ ((parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LViewData instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nexport function getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        /** @type {?} */\n        var injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        var parentTNode_1 = startTNode.parent;\n        while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n            parentTNode_1 = parentTNode_1.parent;\n        }\n        return parentTNode_1;\n    }\n    /** @type {?} */\n    var viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    var parentView = startView;\n    /** @type {?} */\n    var parentTNode = /** @type {?} */ (startView[HOST_NODE]);\n    while (viewOffset > 0) {\n        parentView = /** @type {?} */ ((parentView[DECLARATION_VIEW]));\n        parentTNode = /** @type {?} */ (parentView[HOST_NODE]);\n        viewOffset--;\n    }\n    return parentTNode;\n}\n/** @type {?} */\nexport var defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(global);\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport './ng_dev_mode';\nimport { assertEqual } from './assert';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { CONTEXT, HEADER_OFFSET, HOST, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, getNativeByTNode, readElementValue, readPatchedData } from './util';\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LViewData` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n * @param {?} target\n * @return {?}\n */\nexport function getContext(target) {\n    /** @type {?} */\n    var mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LViewData instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            var lViewData = /** @type {?} */ ((mpValue));\n            /** @type {?} */\n            var nodeIndex = void 0;\n            /** @type {?} */\n            var component = undefined;\n            /** @type {?} */\n            var directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lViewData, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lViewData, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = discoverDirectives(nodeIndex, lViewData, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lViewData, /** @type {?} */ (target));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            /** @type {?} */\n            var native = readElementValue(lViewData[nodeIndex]);\n            /** @type {?} */\n            var existingCtx = readPatchedData(native);\n            /** @type {?} */\n            var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lViewData, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (var i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        var rElement = /** @type {?} */ (target);\n        ngDevMode && assertDomElement(rElement);\n        /** @type {?} */\n        var parent_1 = /** @type {?} */ (rElement);\n        while (parent_1 = parent_1.parentNode) {\n            /** @type {?} */\n            var parentContext = readPatchedData(parent_1);\n            if (parentContext) {\n                /** @type {?} */\n                var lViewData = void 0;\n                if (Array.isArray(parentContext)) {\n                    lViewData = /** @type {?} */ (parentContext);\n                }\n                else {\n                    lViewData = parentContext.lViewData;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lViewData) {\n                    return null;\n                }\n                /** @type {?} */\n                var index = findViaNativeElement(lViewData, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    var native = readElementValue(lViewData[index]);\n                    /** @type {?} */\n                    var context = createLContext(lViewData, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return (/** @type {?} */ (mpValue)) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lViewData\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lViewData, nodeIndex, native) {\n    return {\n        lViewData: lViewData,\n        nodeIndex: nodeIndex, native: native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nexport function getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    var lViewData = readPatchedData(componentInstance);\n    /** @type {?} */\n    var view;\n    if (Array.isArray(lViewData)) {\n        /** @type {?} */\n        var nodeIndex = findViaComponent(lViewData, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lViewData);\n        /** @type {?} */\n        var context = createLContext(lViewData, nodeIndex, /** @type {?} */ (view[HOST]));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        var context = /** @type {?} */ ((lViewData));\n        view = getComponentViewByIndex(context.nodeIndex, context.lViewData);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nexport function attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LViewData and returns the matching index\n * @param {?} lViewData\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lViewData, target) {\n    /** @type {?} */\n    var tNode = lViewData[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        var native = /** @type {?} */ ((getNativeByTNode(tNode, lViewData)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else if (tNode.parent) {\n        return tNode.parent.next || null;\n    }\n    return null;\n}\n/**\n * Locates the component within the given LViewData and returns the matching index\n * @param {?} lViewData\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lViewData, componentInstance) {\n    /** @type {?} */\n    var componentIndices = lViewData[TVIEW].components;\n    if (componentIndices) {\n        for (var i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            var elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            var componentView = getComponentViewByIndex(elementComponentIndex, lViewData);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lViewData);\n        /** @type {?} */\n        var rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LViewData and returns the matching index\n * @param {?} lViewData\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lViewData, directiveInstance) {\n    /** @type {?} */\n    var tNode = lViewData[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        var directiveIndexStart = getDirectiveStartIndex(tNode);\n        /** @type {?} */\n        var directiveIndexEnd = getDirectiveEndIndex(tNode, directiveIndexStart);\n        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lViewData[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * @param {?} element\n * @return {?}\n */\nfunction assertDomElement(element) {\n    assertEqual(element && (element.nodeType == Node.ELEMENT_NODE || element.nodeType == Node.TEXT_NODE), true, 'The provided value must be an instance of an HTMLElement');\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lViewData The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nexport function discoverDirectives(nodeIndex, lViewData, includeComponents) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lViewData[TVIEW].data[nodeIndex]);\n    /** @type {?} */\n    var directiveStartIndex = getDirectiveStartIndex(tNode);\n    /** @type {?} */\n    var directiveEndIndex = getDirectiveEndIndex(tNode, directiveStartIndex);\n    if (!includeComponents && tNode.flags & 4096 /* isComponent */)\n        directiveStartIndex++;\n    return lViewData.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lViewData\n * @param {?} nodeIndex\n * @return {?}\n */\nexport function discoverLocalRefs(lViewData, nodeIndex) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lViewData[TVIEW].data[nodeIndex]);\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        var result = {};\n        for (var i = 0; i < tNode.localNames.length; i += 2) {\n            /** @type {?} */\n            var localRefName = tNode.localNames[i];\n            /** @type {?} */\n            var directiveIndex = /** @type {?} */ (tNode.localNames[i + 1]);\n            result[localRefName] =\n                directiveIndex === -1 ? /** @type {?} */ ((getNativeByTNode(tNode, lViewData))) : lViewData[directiveIndex];\n        }\n        return result;\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getDirectiveStartIndex(tNode) {\n    // the tNode instances store a flag value which then has a\n    // pointer which tells the starting index of where all the\n    // active directives are in the master directive array\n    return tNode.flags >> 16 /* DirectiveStartingIndexShift */;\n}\n/**\n * @param {?} tNode\n * @param {?} startIndex\n * @return {?}\n */\nfunction getDirectiveEndIndex(tNode, startIndex) {\n    /** @type {?} */\n    var count = tNode.flags & 4095 /* DirectiveCountMask */;\n    return count ? (startIndex + count) : -1;\n}\n//# sourceMappingURL=context_discovery.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined, assertEqual } from './assert';\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nexport function assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nexport function assertNodeOfPossibleTypes(tNode) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    var found = types.some(function (type) { return tNode.type === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n//# sourceMappingURL=node_assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from './assert';\nimport { FLAGS } from './interfaces/view';\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LViewData\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nexport function queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} flags\n * @param {?} tView\n * @return {?}\n */\nexport function queueLifecycleHooks(flags, tView) {\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var start = flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var count = flags & 4095 /* DirectiveCountMask */;\n        /** @type {?} */\n        var end = start + count;\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (tView.data[i]);\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeInitHooks(currentView, tView, creationMode) {\n    if (currentView[FLAGS] & 16 /* RunInit */) {\n        executeHooks(currentView, tView.initHooks, tView.checkHooks, creationMode);\n        currentView[FLAGS] &= ~16 /* RunInit */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} data\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeHooks(data, allHooks, checkHooks, creationMode) {\n    /** @type {?} */\n    var hooksToCall = creationMode ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(data, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nexport function callHooks(currentView, arr) {\n    for (var i = 0; i < arr.length; i += 2) {\n        (/** @type {?} */ (arr[i + 1])).call(currentView[/** @type {?} */ (arr[i])]);\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined, assertEqual } from './assert';\nimport { executeHooks } from './hooks';\nimport { BINDING_INDEX, CLEANUP, CONTEXT, DECLARATION_VIEW, FLAGS, HOST_NODE, QUERIES, RENDERER, SANITIZER, TVIEW } from './interfaces/view';\nimport { assertDataInRangeInternal, isContentQueryHost } from './util';\n/** *\n * This property gets set before entering a template.\n *\n * This renderer can be one of two varieties of Renderer3:\n *\n * - ObjectedOrientedRenderer3\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\n * size).\n *\n * - ProceduralRenderer3\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\n * that enables element manipulation. This also facilitates backwards compatibility with\n * Renderer2.\n  @type {?} */\nvar renderer;\n/**\n * @return {?}\n */\nexport function getRenderer() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return renderer;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function setRenderer(r) {\n    renderer = r;\n}\n/** @type {?} */\nvar rendererFactory;\n/**\n * @return {?}\n */\nexport function getRendererFactory() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return rendererFactory;\n}\n/**\n * @param {?} factory\n * @return {?}\n */\nexport function setRendererFactory(factory) {\n    rendererFactory = factory;\n}\n/**\n * @return {?}\n */\nexport function getCurrentSanitizer() {\n    return viewData && viewData[SANITIZER];\n}\n/** *\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LViewData` to only those elements.\n  @type {?} */\nvar elementDepthCount;\n/**\n * @return {?}\n */\nexport function getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nexport function increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nexport function decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** *\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n  @type {?} */\nvar bindingsEnabled;\n/**\n * @return {?}\n */\nexport function getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function disableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nexport function getCurrentView() {\n    return /** @type {?} */ ((viewData));\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nexport function restoreView(viewToRestore) {\n    contextViewData = /** @type {?} */ ((viewToRestore));\n}\n/** *\n * Used to set the parent property when nodes are created and track query results.\n  @type {?} */\nvar previousOrParentTNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function setTNodeAndViewData(tNode, view) {\n    previousOrParentTNode = tNode;\n    viewData = view;\n}\n/** *\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n  @type {?} */\nvar isParent;\n/**\n * @return {?}\n */\nexport function getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setIsParent(value) {\n    isParent = value;\n}\n/** @type {?} */\nvar tView;\n/**\n * @return {?}\n */\nexport function getTView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return tView;\n}\n/** @type {?} */\nvar currentQueries;\n/**\n * @return {?}\n */\nexport function getCurrentQueries() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentQueries;\n}\n/**\n * @param {?} queries\n * @return {?}\n */\nexport function setCurrentQueries(queries) {\n    currentQueries = queries;\n}\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nexport function getOrCreateCurrentQueries(QueryType) {\n    // if this is the first content query on a node, any existing LQueries needs to be cloned\n    // in subsequent template passes, the cloning occurs before directive instantiation.\n    if (previousOrParentTNode && previousOrParentTNode !== viewData[HOST_NODE] &&\n        !isContentQueryHost(previousOrParentTNode)) {\n        currentQueries && (currentQueries = currentQueries.clone());\n        previousOrParentTNode.flags |= 16384 /* hasContentQuery */;\n    }\n    return currentQueries || (currentQueries = new QueryType(null, null, null));\n}\n/** *\n * This property gets set before entering a template.\n  @type {?} */\nvar creationMode;\n/**\n * @return {?}\n */\nexport function getCreationMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return creationMode;\n}\n/** *\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n  @type {?} */\nvar viewData;\n/**\n * Internal function that returns the current LViewData instance.\n *\n * The getCurrentView() instruction should be used for anything public.\n * @return {?}\n */\nexport function getViewData() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return viewData;\n}\n/** *\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n  @type {?} */\nvar contextViewData = /** @type {?} */ ((null));\n/**\n * @return {?}\n */\nexport function getContextViewData() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextViewData;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/** *\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n  @type {?} */\nvar checkNoChangesMode = false;\n/**\n * @return {?}\n */\nexport function getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nexport function setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/** *\n * Whether or not this is the first time the current view has been processed.\n  @type {?} */\nvar firstTemplatePass = true;\n/**\n * @return {?}\n */\nexport function getFirstTemplatePass() {\n    return firstTemplatePass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setFirstTemplatePass(value) {\n    firstTemplatePass = value;\n}\n/** *\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n  @type {?} */\nvar bindingRootIndex = -1;\n/**\n * @return {?}\n */\nexport function getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nexport function enterView(newView, hostTNode) {\n    /** @type {?} */\n    var oldView = viewData;\n    tView = newView && newView[TVIEW];\n    creationMode = newView && (newView[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n    firstTemplatePass = newView && tView.firstTemplatePass;\n    bindingRootIndex = newView && tView.bindingStartIndex;\n    renderer = newView && newView[RENDERER];\n    previousOrParentTNode = /** @type {?} */ ((hostTNode));\n    isParent = true;\n    viewData = contextViewData = newView;\n    oldView && (oldView[QUERIES] = currentQueries);\n    currentQueries = newView && newView[QUERIES];\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nexport function nextContextImpl(level) {\n    if (level === void 0) { level = 1; }\n    contextViewData = walkUpViews(level, /** @type {?} */ ((contextViewData)));\n    return /** @type {?} */ (contextViewData[CONTEXT]);\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = /** @type {?} */ ((currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nexport function resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = /** @type {?} */ ((null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @param {?=} creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n * @return {?}\n */\nexport function leaveView(newView, creationOnly) {\n    if (!creationOnly) {\n        if (!checkNoChangesMode) {\n            executeHooks(viewData, tView.viewHooks, tView.viewCheckHooks, creationMode);\n        }\n        // Views are clean and in update mode after being checked, so these bits are cleared\n        viewData[FLAGS] &= ~(1 /* CreationMode */ | 4 /* Dirty */);\n    }\n    viewData[FLAGS] |= 16 /* RunInit */;\n    viewData[BINDING_INDEX] = tView.bindingStartIndex;\n    enterView(newView, null);\n}\n/**\n * @return {?}\n */\nexport function assertPreviousIsParent() {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @return {?}\n */\nexport function assertHasParent() {\n    assertDefined(previousOrParentTNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nexport function assertDataInRange(index, arr) {\n    if (arr == null)\n        arr = viewData;\n    assertDataInRangeInternal(index, arr || viewData);\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nexport function assertDataNext(index, arr) {\n    if (arr == null)\n        arr = viewData;\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\n}\n//# sourceMappingURL=state.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getInjectableDef, getInjectorDef } from '../di/defs';\nimport { injectRootLimpMode, setInjectImplementation } from '../di/injector_compatibility';\nimport { assertDefined, assertEqual } from './assert';\nimport { getComponentDef, getDirectiveDef, getPipeDef } from './definition';\nimport { NG_ELEMENT_ID } from './fields';\nimport { NO_PARENT_INJECTOR, PARENT_INJECTOR, TNODE, isFactory } from './interfaces/injector';\nimport { DECLARATION_VIEW, HOST_NODE, INJECTOR, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { getPreviousOrParentTNode, getViewData, setTNodeAndViewData } from './state';\nimport { getParentInjectorIndex, getParentInjectorView, hasParentInjector, isComponent, stringify } from './util';\n/** *\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n  @type {?} */\nvar includeViewProviders = false;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    var oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/** *\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n  @type {?} */\nvar BLOOM_SIZE = 256;\n/** @type {?} */\nvar BLOOM_MASK = BLOOM_SIZE - 1;\n/** *\n * Counter used to generate unique IDs for directives.\n  @type {?} */\nvar nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nexport function bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    var id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    /** @type {?} */\n    var bloomBit = id & BLOOM_MASK;\n    /** @type {?} */\n    var mask = 1 << bloomBit;\n    /** @type {?} */\n    var b7 = bloomBit & 0x80;\n    /** @type {?} */\n    var b6 = bloomBit & 0x40;\n    /** @type {?} */\n    var b5 = bloomBit & 0x20;\n    /** @type {?} */\n    var tData = /** @type {?} */ (tView.data);\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    var tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 4096 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    var parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    var parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    var parentView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    var injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        var parentData = /** @type {?} */ (parentView[TVIEW].data);\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (var i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return /** @type {?} */ (tNode.parent.injectorIndex); // ViewOffset is 0, AcrossHostBoundary is 0\n    }\n    /** @type {?} */\n    var hostTNode = view[HOST_NODE];\n    /** @type {?} */\n    var viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = /** @type {?} */ ((view[DECLARATION_VIEW]));\n        hostTNode = /** @type {?} */ ((view[HOST_NODE]));\n        viewOffset++;\n    }\n    /** @type {?} */\n    var acrossHostBoundary = hostTNode && hostTNode.type === 3 /* Element */ ?\n        32768 /* AcrossHostBoundary */ :\n        0;\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) |\n            acrossHostBoundary : /** @type {?} */ (-1);\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nexport function diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    var attrs = tNode.attrs;\n    if (attrs) {\n        for (var i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            var attrName = attrs[i];\n            if (attrName === 1 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return /** @type {?} */ (attrs[i + 1]);\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} tNode\n * @param {?} lViewData\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue\n * @return {?} the value from the injector or `null` when not found\n */\nexport function getOrCreateInjectable(tNode, lViewData, token, flags, notFoundValue) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    /** @type {?} */\n    var bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n        /** @type {?} */\n        var savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var saveViewData = getViewData();\n        setTNodeAndViewData(tNode, lViewData);\n        try {\n            /** @type {?} */\n            var value = bloomHash();\n            if (value == null && !(flags & 8 /* Optional */)) {\n                throw new Error(\"No provider for \" + stringify(token));\n            }\n            else {\n                return value;\n            }\n        }\n        finally {\n            setTNodeAndViewData(savePreviousOrParentTNode, saveViewData);\n        }\n    }\n    else if (typeof bloomHash == 'number') {\n        /** @type {?} */\n        var previousTView = null;\n        /** @type {?} */\n        var injectorIndex = getInjectorIndex(tNode, lViewData);\n        /** @type {?} */\n        var parentLocation = NO_PARENT_INJECTOR;\n        // If we should skip this injector, start by searching the parent injector.\n        if (flags & 4 /* SkipSelf */) {\n            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lViewData) :\n                lViewData[injectorIndex + PARENT_INJECTOR];\n            if (!shouldSearchParent(flags, parentLocation)) {\n                injectorIndex = -1;\n            }\n            else {\n                previousTView = lViewData[TVIEW];\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lViewData = getParentInjectorView(parentLocation, lViewData);\n            }\n        }\n        // Traverse up the injector tree until we find a potential match or until we know there\n        // *isn't* a match.\n        while (injectorIndex !== -1) {\n            parentLocation = lViewData[injectorIndex + PARENT_INJECTOR];\n            /** @type {?} */\n            var tView = lViewData[TVIEW];\n            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                /** @type {?} */\n                var instance = searchTokensOnInjector(injectorIndex, lViewData, token, previousTView);\n                if (instance !== NOT_FOUND) {\n                    return instance;\n                }\n            }\n            if (shouldSearchParent(flags, parentLocation) &&\n                bloomHasToken(bloomHash, injectorIndex, lViewData)) {\n                // The def wasn't found anywhere on this node, so it was a false positive.\n                // Traverse up the tree and continue searching.\n                previousTView = tView;\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lViewData = getParentInjectorView(parentLocation, lViewData);\n            }\n            else {\n                // If we should not search parent OR If the ancestor bloom filter value does not have the\n                // bit corresponding to the directive we can give up on traversing up to find the specific\n                // injector.\n                injectorIndex = -1;\n            }\n        }\n    }\n    if (flags & 8 /* Optional */ && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (2 /* Self */ | 1 /* Host */)) === 0) {\n        /** @type {?} */\n        var moduleInjector = lViewData[INJECTOR];\n        if (moduleInjector) {\n            return moduleInjector.get(token, notFoundValue, flags & 8 /* Optional */);\n        }\n        else {\n            return injectRootLimpMode(token, notFoundValue, flags & 8 /* Optional */);\n        }\n    }\n    if (flags & 8 /* Optional */) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(\"NodeInjector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n}\n/** @type {?} */\nvar NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @param {?} token\n * @param {?} previousTView\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, injectorView, token, previousTView) {\n    /** @type {?} */\n    var currentTView = injectorView[TVIEW];\n    /** @type {?} */\n    var tNode = /** @type {?} */ (currentTView.data[injectorIndex + TNODE]);\n    /** @type {?} */\n    var nodeFlags = tNode.flags;\n    /** @type {?} */\n    var nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    var tInjectables = currentTView.data;\n    /** @type {?} */\n    var canAccessViewProviders = false;\n    // We need to determine if view providers can be accessed by the starting element.\n    // It happens in 2 cases:\n    // 1) On the initial element injector , if we are instantiating a token which can see the\n    // viewProviders of the component of that element. Such token are:\n    // - the component itself (but not other directives)\n    // - viewProviders tokens of the component (but not providers tokens)\n    // 2) Upper in the element injector tree, if the starting element is actually in the view of\n    // the current element. To determine this, we track the transition of view during the climb,\n    // and check the host node of the current view to identify component views.\n    if (previousTView == null && isComponent(tNode) && includeViewProviders ||\n        previousTView != null && previousTView != currentTView &&\n            (currentTView.node == null || /** @type {?} */ ((currentTView.node)).type === 3 /* Element */)) {\n        canAccessViewProviders = true;\n    }\n    /** @type {?} */\n    var startInjectables = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    var startDirectives = nodeFlags >> 16 /* DirectiveStartingIndexShift */;\n    /** @type {?} */\n    var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    var startingIndex = canAccessViewProviders ? startInjectables : startInjectables + cptViewProvidersCount;\n    /** @type {?} */\n    var directiveCount = nodeFlags & 4095 /* DirectiveCountMask */;\n    for (var i = startingIndex; i < startDirectives + directiveCount; i++) {\n        /** @type {?} */\n        var providerTokenOrDef = /** @type {?} */ (tInjectables[i]);\n        if (i < startDirectives && token === providerTokenOrDef ||\n            i >= startDirectives && (/** @type {?} */ (providerTokenOrDef)).type === token) {\n            return getNodeInjectable(tInjectables, injectorView, i, /** @type {?} */ (tNode));\n        }\n    }\n    return NOT_FOUND;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nexport function getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    var value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        var factory = value;\n        if (factory.resolving) {\n            throw new Error(\"Circular dep for \" + stringify(tData[index]));\n        }\n        /** @type {?} */\n        var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        var previousInjectImplementation = void 0;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        var savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var saveViewData = getViewData();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveViewData);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nexport function bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    /** @type {?} */\n    var tokenId = (/** @type {?} */ (token))[NG_ELEMENT_ID];\n    return typeof tokenId === 'number' ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nexport function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    /** @type {?} */\n    var mask = 1 << bloomHash;\n    /** @type {?} */\n    var b7 = bloomHash & 0x80;\n    /** @type {?} */\n    var b6 = bloomHash & 0x40;\n    /** @type {?} */\n    var b5 = bloomHash & 0x20;\n    /** @type {?} */\n    var value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} parentLocation\n * @return {?}\n */\nfunction shouldSearchParent(flags, parentLocation) {\n    return !(flags & 2 /* Self */ ||\n        (flags & 1 /* Host */ &&\n            ((/** @type {?} */ ((parentLocation))) & 32768 /* AcrossHostBoundary */)));\n}\n/**\n * @return {?}\n */\nexport function injectInjector() {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (getPreviousOrParentTNode());\n    return new NodeInjector(tNode, getViewData());\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _hostView) {\n        this._tNode = _tNode;\n        this._hostView = _hostView;\n        this._injectorIndex = getOrCreateNodeInjectorForNode(_tNode, _hostView);\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    NodeInjector.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        setTNodeAndViewData(this._tNode, this._hostView);\n        return getOrCreateInjectable(this._tNode, this._hostView, token);\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nif (false) {\n    /** @type {?} */\n    NodeInjector.prototype._injectorIndex;\n    /** @type {?} */\n    NodeInjector.prototype._tNode;\n    /** @type {?} */\n    NodeInjector.prototype._hostView;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getFactoryOf(type) {\n    /** @type {?} */\n    var typeAny = /** @type {?} */ (type);\n    /** @type {?} */\n    var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getInheritedFactory(type) {\n    /** @type {?} */\n    var proto = /** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor);\n    /** @type {?} */\n    var factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return function (t) { return new t(); };\n    }\n}\n//# sourceMappingURL=di.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {...?} args\n * @return {?}\n */\nexport function noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // Do nothing.\n}\n//# sourceMappingURL=noop.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags3 };\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/** @typedef {?} */\nvar Renderer3;\nexport { Renderer3 };\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nexport function ObjectOrientedRenderer3() { }\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createComment;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElement;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElementNS;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createTextNode;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.querySelector;\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nexport function isProceduralRenderer(renderer) {\n    return !!((/** @type {?} */ (renderer)).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nexport function ProceduralRenderer3() { }\n/** @type {?} */\nProceduralRenderer3.prototype.destroy;\n/** @type {?} */\nProceduralRenderer3.prototype.createComment;\n/** @type {?} */\nProceduralRenderer3.prototype.createElement;\n/** @type {?} */\nProceduralRenderer3.prototype.createText;\n/**\n * This property is allowed to be null / undefined,\n * in which case the view engine won't call it.\n * This is used as a performance optimization for production mode.\n * @type {?|undefined}\n */\nProceduralRenderer3.prototype.destroyNode;\n/** @type {?} */\nProceduralRenderer3.prototype.appendChild;\n/** @type {?} */\nProceduralRenderer3.prototype.insertBefore;\n/** @type {?} */\nProceduralRenderer3.prototype.removeChild;\n/** @type {?} */\nProceduralRenderer3.prototype.selectRootElement;\n/** @type {?} */\nProceduralRenderer3.prototype.parentNode;\n/** @type {?} */\nProceduralRenderer3.prototype.nextSibling;\n/** @type {?} */\nProceduralRenderer3.prototype.setAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.removeAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.addClass;\n/** @type {?} */\nProceduralRenderer3.prototype.removeClass;\n/** @type {?} */\nProceduralRenderer3.prototype.setStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.removeStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.setProperty;\n/** @type {?} */\nProceduralRenderer3.prototype.setValue;\n/** @type {?} */\nProceduralRenderer3.prototype.listen;\n/**\n * @record\n */\nexport function RendererFactory3() { }\n/** @type {?} */\nRendererFactory3.prototype.createRenderer;\n/** @type {?|undefined} */\nRendererFactory3.prototype.begin;\n/** @type {?|undefined} */\nRendererFactory3.prototype.end;\n/** @type {?} */\nexport var domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nexport function RNode() { }\n/** @type {?} */\nRNode.prototype.parentNode;\n/** @type {?} */\nRNode.prototype.nextSibling;\n/** @type {?} */\nRNode.prototype.removeChild;\n/**\n * Insert a child node.\n *\n * Used exclusively for adding View root nodes into ViewAnchor location.\n * @type {?}\n */\nRNode.prototype.insertBefore;\n/**\n * Append a child node.\n *\n * Used exclusively for building up DOM which are static (ie not View roots)\n * @type {?}\n */\nRNode.prototype.appendChild;\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nexport function RElement() { }\n/** @type {?} */\nRElement.prototype.style;\n/** @type {?} */\nRElement.prototype.classList;\n/** @type {?} */\nRElement.prototype.className;\n/** @type {?} */\nRElement.prototype.setAttribute;\n/** @type {?} */\nRElement.prototype.removeAttribute;\n/** @type {?} */\nRElement.prototype.setAttributeNS;\n/** @type {?} */\nRElement.prototype.addEventListener;\n/** @type {?} */\nRElement.prototype.removeEventListener;\n/** @type {?|undefined} */\nRElement.prototype.setProperty;\n/**\n * @record\n */\nexport function RCssStyleDeclaration() { }\n/** @type {?} */\nRCssStyleDeclaration.prototype.removeProperty;\n/** @type {?} */\nRCssStyleDeclaration.prototype.setProperty;\n/**\n * @record\n */\nexport function RDomTokenList() { }\n/** @type {?} */\nRDomTokenList.prototype.add;\n/** @type {?} */\nRDomTokenList.prototype.remove;\n/**\n * @record\n */\nexport function RText() { }\n/** @type {?} */\nRText.prototype.textContent;\n/**\n * @record\n */\nexport function RComment() { }\n/** @type {?} */\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=renderer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from './assert';\nimport { attachPatchData } from './context_discovery';\nimport { callHooks } from './hooks';\nimport { NATIVE, RENDER_PARENT, VIEWS, unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { CLEANUP, CONTAINER_INDEX, FLAGS, HEADER_OFFSET, HOST_NODE, NEXT, PARENT, QUERIES, RENDERER, TVIEW, unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nimport { getNativeByTNode, isLContainer, isRootView, readElementValue, stringify } from './util';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * Retrieves the parent element of a given node.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function getParentNative(tNode, currentView) {\n    return tNode.parent == null ? getHostNative(currentView) :\n        getNativeByTNode(tNode.parent, currentView);\n}\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n * @param {?} currentView\n * @return {?}\n */\nexport function getHostNative(currentView) {\n    /** @type {?} */\n    var hostTNode = /** @type {?} */ (currentView[HOST_NODE]);\n    return hostTNode && hostTNode.type !== 2 /* View */ ?\n        (/** @type {?} */ (getNativeByTNode(hostTNode, /** @type {?} */ ((currentView[PARENT]))))) :\n        null;\n}\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nexport function getLContainer(tNode, embeddedView) {\n    if (tNode.index === -1) {\n        /** @type {?} */\n        var containerHostIndex = embeddedView[CONTAINER_INDEX];\n        return containerHostIndex > -1 ? /** @type {?} */ ((embeddedView[PARENT]))[containerHostIndex] : null;\n    }\n    else {\n        // This is a inline view node (e.g. embeddedViewStart)\n        return /** @type {?} */ (((embeddedView[PARENT]))[/** @type {?} */ ((tNode.parent)).index]);\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nexport function getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    var container = getLContainer(tViewNode, view);\n    return container ? container[RENDER_PARENT] : null;\n}\n/** @enum {number} */\nvar WalkTNodeTreeAction = {\n    /** node insert in the native environment */\n    Insert: 0,\n    /** node detach from the native environment */\n    Detach: 1,\n    /** node destruction using the renderer's API */\n    Destroy: 2,\n};\n/** *\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    var rootTNode = /** @type {?} */ (viewToWalk[TVIEW].node);\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    /** @type {?} */\n    var currentView = viewToWalk;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (rootTNode.child);\n    while (tNode) {\n        /** @type {?} */\n        var nextTNode = null;\n        if (tNode.type === 3 /* Element */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n            /** @type {?} */\n            var nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            var lContainer = /** @type {?} */ (((currentView))[tNode.index]);\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n            if (renderParent)\n                lContainer[RENDER_PARENT] = renderParent;\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            var componentView = findComponentView(/** @type {?} */ ((currentView)));\n            /** @type {?} */\n            var componentHost = /** @type {?} */ (componentView[HOST_NODE]);\n            /** @type {?} */\n            var head = (/** @type {?} */ (componentHost.projection))[/** @type {?} */ (tNode.projection)];\n            // Must store both the TNode and the view because this projection node could be nested\n            // deeply inside embedded views, and we need to get back down to this particular nested view.\n            projectionNodeStack[++projectionNodeIndex] = tNode;\n            projectionNodeStack[++projectionNodeIndex] = /** @type {?} */ ((currentView));\n            if (head) {\n                currentView = /** @type {?} */ ((componentView[PARENT]));\n                nextTNode = /** @type {?} */ (currentView[TVIEW].data[head.index]);\n            }\n        }\n        else {\n            // Otherwise, this is a View or an ElementContainer\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.next === null && (tNode.flags & 8192 /* isProjected */)) {\n                currentView = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n                tNode = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n            }\n            nextTNode = tNode.next;\n            /**\n                   * Find the next node in the TNode tree, taking into account the place where a node is\n                   * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n                   *\n                   * If there is no sibling node, then it goes to the next sibling of the parent node...\n                   * until it reaches rootNode (at which point null is returned).\n                   */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[TVIEW].node;\n                if (tNode === null || tNode === rootTNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = /** @type {?} */ ((currentView[PARENT]));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */ && currentView[NEXT]) {\n                    currentView = /** @type {?} */ (currentView[NEXT]);\n                    nextTNode = currentView[TVIEW].node;\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lViewData LViewData for which we want a host element node\n * @return {?} The host node\n */\nexport function findComponentView(lViewData) {\n    /** @type {?} */\n    var rootTNode = lViewData[HOST_NODE];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lViewData[PARENT], 'viewData.parent');\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n        rootTNode = lViewData[HOST_NODE];\n    }\n    return lViewData;\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n    if (action === 0 /* Insert */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).insertBefore(/** @type {?} */ ((parent)), node, /** @type {?} */ (beforeNode)) : /** @type {?} */ ((parent)).insertBefore(node, /** @type {?} */ (beforeNode), true);\n    }\n    else if (action === 1 /* Detach */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).removeChild(/** @type {?} */ ((parent)), node) : /** @type {?} */ ((parent)).removeChild(node);\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++; /** @type {?} */\n        (((/** @type {?} */ (renderer)).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify(value)) :\n        renderer.createTextNode(stringify(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    var renderParent = getContainerRenderParent(/** @type {?} */ (viewToWalk[TVIEW].node), viewToWalk);\n    ngDevMode && assertNodeType(/** @type {?} */ (viewToWalk[TVIEW].node), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        var renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    if (rootView[TVIEW].childIndex === -1) {\n        return cleanUpView(rootView);\n    }\n    /** @type {?} */\n    var viewOrContainer = getLViewChild(rootView);\n    while (viewOrContainer) {\n        /** @type {?} */\n        var next = null;\n        if (viewOrContainer.length >= HEADER_OFFSET) {\n            /** @type {?} */\n            var view = /** @type {?} */ (viewOrContainer);\n            if (view[TVIEW].childIndex > -1)\n                next = getLViewChild(view);\n        }\n        else {\n            /** @type {?} */\n            var container = /** @type {?} */ (viewOrContainer);\n            if (container[VIEWS].length)\n                next = container[VIEWS][0];\n        }\n        if (next == null) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer))[NEXT] && viewOrContainer !== rootView) {\n                cleanUpView(viewOrContainer);\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(viewOrContainer || rootView);\n            next = viewOrContainer && /** @type {?} */ ((viewOrContainer))[NEXT];\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} parentView The new parent of the inserted view\n * @param {?} index The index at which to insert the view\n * @param {?} containerIndex The index of the container node, if dynamic\n * @return {?}\n */\nexport function insertView(lView, lContainer, parentView, index, containerIndex) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    // Dynamically inserted views need a reference to their parent container's host so it's\n    // possible to jump from a view to its container's next when walking the node tree.\n    if (containerIndex > -1) {\n        lView[CONTAINER_INDEX] = containerIndex;\n        lView[PARENT] = parentView;\n    }\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        /** @type {?} */ ((lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 8 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @param {?} detached Whether or not this view is already detached.\n * @return {?}\n */\nexport function detachView(lContainer, removeIndex, detached) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    /** @type {?} */\n    var viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = /** @type {?} */ (viewToDetach[NEXT]);\n    }\n    views.splice(removeIndex, 1);\n    if (!detached) {\n        addRemoveViewFromContainer(viewToDetach, false);\n    }\n    if (viewToDetach[QUERIES]) {\n        /** @type {?} */ ((viewToDetach[QUERIES])).removeView();\n    }\n    viewToDetach[CONTAINER_INDEX] = -1;\n    viewToDetach[PARENT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~8 /* Attached */;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} containerHost\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nexport function removeView(lContainer, containerHost, removeIndex) {\n    /** @type {?} */\n    var view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex, !!containerHost.detached);\n    destroyLView(view);\n}\n/**\n * Gets the child of the given LViewData\n * @param {?} viewData\n * @return {?}\n */\nexport function getLViewChild(viewData) {\n    /** @type {?} */\n    var childIndex = viewData[TVIEW].childIndex;\n    return childIndex === -1 ? null : viewData[childIndex];\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nexport function destroyLView(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n        walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n    }\n    destroyViewTree(view);\n    // Sets the destroyed flag\n    view[FLAGS] |= 32 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(state, rootView) {\n    /** @type {?} */\n    var tNode;\n    if (state.length >= HEADER_OFFSET && (tNode = /** @type {?} */ (((/** @type {?} */ (state))))[HOST_NODE]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return /** @type {?} */ (getLContainer(/** @type {?} */ (tNode), /** @type {?} */ (state)));\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state[PARENT] === rootView ? null : state[PARENT];\n    }\n}\n/**\n * Removes all listeners and call all onDestroys in a given view.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n    if ((/** @type {?} */ (viewOrContainer)).length >= HEADER_OFFSET) {\n        /** @type {?} */\n        var view = /** @type {?} */ (viewOrContainer);\n        removeListeners(view);\n        executeOnDestroys(view);\n        executePipeOnDestroys(view);\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (view[TVIEW].id === -1 && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            (/** @type {?} */ (view[RENDERER])).destroy();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} viewData\n * @return {?}\n */\nfunction removeListeners(viewData) {\n    /** @type {?} */\n    var cleanup = /** @type {?} */ ((viewData[TVIEW].cleanup));\n    if (cleanup != null) {\n        for (var i = 0; i < cleanup.length - 1; i += 2) {\n            if (typeof cleanup[i] === 'string') {\n                /** @type {?} */\n                var native = readElementValue(viewData[cleanup[i + 1]]);\n                /** @type {?} */\n                var listener = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i + 2]];\n                native.removeEventListener(cleanup[i], listener, cleanup[i + 3]);\n                i += 2;\n            }\n            else if (typeof cleanup[i] === 'number') {\n                /** @type {?} */\n                var cleanupFn = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i]];\n                cleanupFn();\n            }\n            else {\n                /** @type {?} */\n                var context = /** @type {?} */ ((viewData[CLEANUP]))[cleanup[i + 1]];\n                cleanup[i].call(context);\n            }\n        }\n        viewData[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    /** @type {?} */\n    var destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(view, destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} viewData\n * @return {?}\n */\nfunction executePipeOnDestroys(viewData) {\n    /** @type {?} */\n    var pipeDestroyHooks = viewData[TVIEW] && viewData[TVIEW].pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks(/** @type {?} */ ((viewData)), pipeDestroyHooks);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function getRenderParent(tNode, currentView) {\n    if (canInsertNativeNode(tNode, currentView)) {\n        // If we are asked for a render parent of the root component we need to do low-level DOM\n        // operation as LTree doesn't exist above the topmost host node. We might need to find a render\n        // parent of the topmost host node if the root component injects ViewContainerRef.\n        if (isRootView(currentView)) {\n            return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n        }\n        /** @type {?} */\n        var hostTNode = currentView[HOST_NODE];\n        /** @type {?} */\n        var tNodeParent = tNode.parent;\n        if (tNodeParent != null && tNodeParent.type === 4 /* ElementContainer */) {\n            tNode = getHighestElementContainer(tNodeParent);\n        }\n        return tNode.parent == null && /** @type {?} */ ((hostTNode)).type === 2 /* View */ ?\n            getContainerRenderParent(/** @type {?} */ (hostTNode), currentView) : /** @type {?} */ (getParentNative(tNode, currentView));\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(tNode) {\n    // If the parent is null, then we are inserting across views. This happens when we\n    // insert a root element of the component view into the component host element and it\n    // should always be eager.\n    if (tNode.parent == null ||\n        // We should also eagerly insert if the parent is a regular, non-component element\n        // since we know that this relationship will never be broken.\n        tNode.parent.type === 3 /* Element */ && !(tNode.parent.flags & 4096 /* isComponent */)) {\n        return true;\n    }\n    // Parent is a Component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would than move it to its final destination.\n    return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reasons:\n * - view is not inserted into any container (view was created but not inserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view if this view was inserted into a container\n * and\n * the container itself has its render parent determined.\n * @param {?} viewTNode\n * @param {?} view\n * @return {?}\n */\nfunction canInsertNativeChildOfView(viewTNode, view) {\n    /** @type {?} */\n    var container = /** @type {?} */ ((getLContainer(viewTNode, view)));\n    if (container == null || container[RENDER_PARENT] == null) {\n        // The `View` is not inserted into a `Container` or the parent `Container`\n        // itself is disconnected. So we have to delay.\n        return false;\n    }\n    // The parent `Container` is in inserted state, so we can eagerly insert into\n    // this location.\n    return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} tNode\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the child should be inserted now (or delayed until later).\n */\nexport function canInsertNativeNode(tNode, currentView) {\n    /** @type {?} */\n    var currentNode = tNode;\n    /** @type {?} */\n    var parent = tNode.parent;\n    if (tNode.parent && tNode.parent.type === 4 /* ElementContainer */) {\n        currentNode = getHighestElementContainer(tNode);\n        parent = currentNode.parent;\n    }\n    if (parent === null)\n        parent = currentView[HOST_NODE];\n    if (parent && parent.type === 2 /* View */) {\n        return canInsertNativeChildOfView(/** @type {?} */ (parent), currentView);\n    }\n    else {\n        // Parent is a regular element or a component\n        return canInsertNativeChildOfElement(currentNode);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nexport function nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nexport function nativeParentNode(renderer, node) {\n    return /** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nexport function nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?} childEl The child that should be appended\n * @param {?} childTNode The TNode of the child element\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(childEl, childTNode, currentView) {\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        /** @type {?} */\n        var parentEl = getParentNative(childTNode, currentView);\n        /** @type {?} */\n        var parentTNode = childTNode.parent || /** @type {?} */ ((currentView[HOST_NODE]));\n        if (parentTNode.type === 2 /* View */) {\n            /** @type {?} */\n            var lContainer = /** @type {?} */ (getLContainer(/** @type {?} */ (parentTNode), currentView));\n            /** @type {?} */\n            var views = lContainer[VIEWS];\n            /** @type {?} */\n            var index = views.indexOf(currentView);\n            nativeInsertBefore(renderer, /** @type {?} */ ((lContainer[RENDER_PARENT])), childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var renderParent = /** @type {?} */ ((getRenderParent(childTNode, currentView)));\n            nativeInsertBefore(renderer, renderParent, childEl, parentEl);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parentEl))), childEl) : /** @type {?} */ ((parentEl)).appendChild(childEl);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Gets the top-level ng-container if ng-containers are nested.\n *\n * @param {?} ngContainer The TNode of the starting ng-container\n * @return {?} tNode The TNode of the highest level ng-container\n */\nfunction getHighestElementContainer(ngContainer) {\n    while (ngContainer.parent != null && ngContainer.parent.type === 4 /* ElementContainer */) {\n        ngContainer = ngContainer.parent;\n    }\n    return ngContainer;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nexport function getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        var view = /** @type {?} */ (views[index + 1]);\n        /** @type {?} */\n        var viewTNode = /** @type {?} */ (view[HOST_NODE]);\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param {?} childTNode The TNode of the child to remove\n * @param {?} childEl The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nexport function removeChild(childTNode, childEl, currentView) {\n    // We only remove the element if not in View or not projected.\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        var parentNative = /** @type {?} */ (((getParentNative(childTNode, currentView))));\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parentNative), childEl) : /** @type {?} */ ((parentNative)).removeChild(childEl);\n        return true;\n    }\n    return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nexport function appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    var native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    var renderParent = getRenderParent(tProjectionNode, currentView);\n    /** @type {?} */\n    var nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        nodeOrContainer[RENDER_PARENT] = renderParent;\n        /** @type {?} */\n        var views = nodeOrContainer[VIEWS];\n        for (var i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var ngContainerChildTNode = /** @type {?} */ (projectedTNode.child);\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            nodeOrContainer[RENDER_PARENT] = renderParent;\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n//# sourceMappingURL=node_manipulation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertDefined, assertNotEqual } from './assert';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/node';\nimport { NG_PROJECT_AS_ATTR_NAME, unusedValueExportToPlacateAjd as unused2 } from './interfaces/projection';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2;\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    var nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    var matchIndex = /** @type {?} */ ((nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    var matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && /** @type {?} */ ((nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && /** @type {?} */ ((nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @return {?} true if node matches the selector.\n */\nexport function isNodeMatchingSelector(tNode, selector) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    var mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    var nodeAttrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(1 /* SelectOnly */) : -1;\n    /** @type {?} */\n    var skipToNextSelector = false;\n    for (var i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        var current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(/** @type {?} */ (current))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = (/** @type {?} */ (current)) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && current !== tNode.tagName) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            var attrName = mode & 8 /* CLASS */ ? 'class' : current;\n            /** @type {?} */\n            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            /** @type {?} */\n            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                var nodeAttrValue = void 0;\n                /** @type {?} */\n                var maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = /** @type {?} */ (nodeAttrs[attrIndexInNode + 1]);\n                }\n                if (mode & 8 /* CLASS */ &&\n                    !isCssClassMatching(/** @type {?} */ (nodeAttrValue), /** @type {?} */ (selectorAttrValue)) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    var selectOnlyMode = false;\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 1 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @return {?}\n */\nexport function isNodeMatchingSelectorList(tNode, selector) {\n    for (var i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    var nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return /** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]);\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nexport function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=node_selector_matcher.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nexport function bindPlayerFactory(factoryFn, value) {\n    return /** @type {?} */ (new BoundPlayerFactory(factoryFn, value));\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nBoundPlayerFactory = /** @class */ (function () {\n    function BoundPlayerFactory(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n    return BoundPlayerFactory;\n}());\n/**\n * @template T\n */\nexport { BoundPlayerFactory };\nif (false) {\n    /** @type {?} */\n    BoundPlayerFactory.prototype.__brand__;\n    /** @type {?} */\n    BoundPlayerFactory.prototype.fn;\n    /** @type {?} */\n    BoundPlayerFactory.prototype.value;\n}\n//# sourceMappingURL=player_factory.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar CorePlayerHandler = /** @class */ (function () {\n    function CorePlayerHandler() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    CorePlayerHandler.prototype.flushPlayers = /**\n     * @return {?}\n     */\n    function () {\n        for (var i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            var player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    CorePlayerHandler.prototype.queuePlayer = /**\n     * @param {?} player\n     * @return {?}\n     */\n    function (player) { this._players.push(player); };\n    return CorePlayerHandler;\n}());\nexport { CorePlayerHandler };\nif (false) {\n    /** @type {?} */\n    CorePlayerHandler.prototype._players;\n}\n//# sourceMappingURL=core_player_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport '../ng_dev_mode';\nimport { getContext } from '../context_discovery';\nimport { ACTIVE_INDEX } from '../interfaces/container';\nimport { FLAGS, HEADER_OFFSET, HOST } from '../interfaces/view';\nimport { getTNode } from '../util';\nimport { CorePlayerHandler } from './core_player_handler';\n/**\n * @param {?=} element\n * @param {?=} sanitizer\n * @param {?=} initialStylingValues\n * @return {?}\n */\nexport function createEmptyStylingContext(element, sanitizer, initialStylingValues) {\n    return [\n        null,\n        // PlayerContext\n        sanitizer || null,\n        // StyleSanitizer\n        initialStylingValues || [null],\n        0,\n        0,\n        // ClassOffset\n        element || null,\n        null,\n        null\n    ];\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nexport function allocStylingContext(element, templateStyleContext) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((templateStyleContext.slice()));\n    context[5 /* ElementPosition */] = element;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nexport function getStylingContext(index, viewData) {\n    /** @type {?} */\n    var storageIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    var slotValue = viewData[storageIndex];\n    /** @type {?} */\n    var wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = /** @type {?} */ (slotValue[HOST]);\n    }\n    if (isStylingContext(wrapper)) {\n        return /** @type {?} */ (wrapper);\n    }\n    else {\n        /** @type {?} */\n        var stylingTemplate = getTNode(index, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n    // Not an LViewData or an LContainer\n    return typeof value[FLAGS] !== 'number' && typeof value[ACTIVE_INDEX] !== 'number';\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nexport function addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, function () {\n            /** @type {?} */\n            var index = playerContext.indexOf(player);\n            /** @type {?} */\n            var nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        /** @type {?} */\n        var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nexport function getPlayersInternal(playerContext) {\n    /** @type {?} */\n    var players = [];\n    /** @type {?} */\n    var nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (var i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        var player = /** @type {?} */ (playerContext[i]);\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (var i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push(/** @type {?} */ (playerContext[i]));\n    }\n    return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nexport function getOrCreatePlayerContext(target, context) {\n    context = context || /** @type {?} */ ((getContext(target)));\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    var lViewData = context.lViewData, nodeIndex = context.nodeIndex;\n    /** @type {?} */\n    var stylingContext = getStylingContext(nodeIndex - HEADER_OFFSET, lViewData);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nexport function getPlayerContext(stylingContext) {\n    return stylingContext[0 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function allocPlayerContext(data) {\n    return data[0 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nexport function throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { RendererStyleFlags3, isProceduralRenderer } from '../interfaces/renderer';\nimport { NO_CHANGE } from '../tokens';\nimport { getRootContext } from '../util';\nimport { BoundPlayerFactory } from './player_factory';\nimport { addPlayerInternal, allocPlayerContext, createEmptyStylingContext, getPlayerContext } from './util';\n/** @type {?} */\nvar EMPTY_ARR = [];\n/** @type {?} */\nvar EMPTY_OBJ = {};\n/**\n * Creates a styling context template where styling information is stored.\n * Any styles that are later referenced using `updateStyleProp` must be\n * passed in within this function. Initial values for those styles are to\n * be declared after all initial style properties are declared (this change in\n * mode between declarations and initial styles is made possible using a special\n * enum value found in `definition.ts`).\n *\n * @param {?=} initialClassDeclarations a list of class declarations and initial class values\n *    that are used later within the styling context.\n *\n *    -> ['foo', 'bar', SPECIAL_ENUM_VAL, 'foo', true]\n *       This implies that `foo` and `bar` will be later styled and that the `foo`\n *       class will be applied to the element as an initial class since it's true\n * @param {?=} initialStyleDeclarations a list of style declarations and initial style values\n *    that are used later within the styling context.\n *\n *    -> ['width', 'height', SPECIAL_ENUM_VAL, 'width', '100px']\n *       This implies that `width` and `height` will be later styled and that the `width`\n *       property has an initial value of `100px`.\n *\n * @param {?=} styleSanitizer\n * @param {?=} onlyProcessSingleClasses\n * @return {?}\n */\nexport function createStylingContextTemplate(initialClassDeclarations, initialStyleDeclarations, styleSanitizer, onlyProcessSingleClasses) {\n    /** @type {?} */\n    var initialStylingValues = [null];\n    /** @type {?} */\n    var context = createEmptyStylingContext(null, styleSanitizer, initialStylingValues);\n    /** @type {?} */\n    var stylesLookup = {};\n    /** @type {?} */\n    var classesLookup = {};\n    /** @type {?} */\n    var totalStyleDeclarations = 0;\n    if (initialStyleDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialStyleDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialStyleDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var prop = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialStyleDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    stylesLookup[prop] = initialStylingValues.length - 1;\n                }\n                else {\n                    totalStyleDeclarations++;\n                    stylesLookup[prop] = 0;\n                }\n            }\n        }\n    }\n    // make where the class offsets begin\n    context[4 /* ClassOffsetPosition */] = totalStyleDeclarations;\n    /** @type {?} */\n    var initialStaticClasses = onlyProcessSingleClasses ? [] : null;\n    if (initialClassDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialClassDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialClassDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var className = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialClassDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    classesLookup[className] = initialStylingValues.length - 1;\n                    initialStaticClasses && initialStaticClasses.push(className);\n                }\n                else {\n                    classesLookup[className] = 0;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var styleProps = Object.keys(stylesLookup);\n    /** @type {?} */\n    var classNames = Object.keys(classesLookup);\n    /** @type {?} */\n    var classNamesIndexStart = styleProps.length;\n    /** @type {?} */\n    var totalProps = styleProps.length + classNames.length;\n    /** @type {?} */\n    var maxLength = totalProps * 4 /* Size */ * 2 + 8 /* SingleStylesStartPosition */;\n    // we need to fill the array from the start so that we can access\n    // both the multi and the single array positions in the same loop block\n    for (var i = 8 /* SingleStylesStartPosition */; i < maxLength; i++) {\n        context.push(null);\n    }\n    /** @type {?} */\n    var singleStart = 8 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    var multiStart = totalProps * 4 /* Size */ + 8 /* SingleStylesStartPosition */;\n    // fill single and multi-level styles\n    for (var i = 0; i < totalProps; i++) {\n        /** @type {?} */\n        var isClassBased_1 = i >= classNamesIndexStart;\n        /** @type {?} */\n        var prop = isClassBased_1 ? classNames[i - classNamesIndexStart] : styleProps[i];\n        /** @type {?} */\n        var indexForInitial = isClassBased_1 ? classesLookup[prop] : stylesLookup[prop];\n        /** @type {?} */\n        var initialValue = initialStylingValues[indexForInitial];\n        /** @type {?} */\n        var indexForMulti = i * 4 /* Size */ + multiStart;\n        /** @type {?} */\n        var indexForSingle = i * 4 /* Size */ + singleStart;\n        /** @type {?} */\n        var initialFlag = prepareInitialFlag(prop, isClassBased_1, styleSanitizer || null);\n        setFlag(context, indexForSingle, pointers(initialFlag, indexForInitial, indexForMulti));\n        setProp(context, indexForSingle, prop);\n        setValue(context, indexForSingle, null);\n        setPlayerBuilderIndex(context, indexForSingle, 0);\n        /** @type {?} */\n        var flagForMulti = initialFlag | (initialValue !== null ? 1 /* Dirty */ : 0 /* None */);\n        setFlag(context, indexForMulti, pointers(flagForMulti, indexForInitial, indexForSingle));\n        setProp(context, indexForMulti, prop);\n        setValue(context, indexForMulti, null);\n        setPlayerBuilderIndex(context, indexForMulti, 0);\n    }\n    /** @type {?} */\n    var masterFlag = pointers(0, 0, multiStart) |\n        (onlyProcessSingleClasses ? 16 /* OnlyProcessSingleClasses */ : 0);\n    setFlag(context, 3 /* MasterFlagPosition */, masterFlag);\n    setContextDirty(context, initialStylingValues.length > 1);\n    if (initialStaticClasses) {\n        context[6 /* PreviousOrCachedMultiClassValue */] = initialStaticClasses.join(' ');\n    }\n    return context;\n}\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyleAndClassBindings` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @return {?}\n */\nexport function updateStylingMap(context, classesInput, stylesInput) {\n    stylesInput = stylesInput || null;\n    /** @type {?} */\n    var element = /** @type {?} */ (((context[5 /* ElementPosition */])));\n    /** @type {?} */\n    var classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(/** @type {?} */ (classesInput), element, 1 /* Class */) :\n        null;\n    /** @type {?} */\n    var stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(/** @type {?} */ (stylesInput), element, 2 /* Style */) :\n        null;\n    /** @type {?} */\n    var classesValue = classesPlayerBuilder ? /** @type {?} */ (((/** @type {?} */ (classesInput)))).value :\n        classesInput;\n    /** @type {?} */\n    var stylesValue = stylesPlayerBuilder ? stylesInput[\"value\"] : stylesInput;\n    /** @type {?} */\n    var ignoreAllClassUpdates = limitToSingleClasses(context) || classesValue === NO_CHANGE ||\n        classesValue === context[6 /* PreviousOrCachedMultiClassValue */];\n    /** @type {?} */\n    var ignoreAllStyleUpdates = stylesValue === NO_CHANGE || stylesValue === context[7 /* PreviousMultiStyleValue */];\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    context[6 /* PreviousOrCachedMultiClassValue */] = classesValue;\n    context[7 /* PreviousMultiStyleValue */] = stylesValue;\n    /** @type {?} */\n    var classNames = EMPTY_ARR;\n    /** @type {?} */\n    var applyAllClasses = false;\n    /** @type {?} */\n    var playerBuildersAreDirty = false;\n    /** @type {?} */\n    var classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    /** @type {?} */\n    var stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARR;\n        }\n    }\n    /** @type {?} */\n    var classes = /** @type {?} */ ((classesValue || EMPTY_OBJ));\n    /** @type {?} */\n    var styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARR;\n    /** @type {?} */\n    var styles = stylesValue || EMPTY_OBJ;\n    /** @type {?} */\n    var classesStartIndex = styleProps.length;\n    /** @type {?} */\n    var multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    var dirty = false;\n    /** @type {?} */\n    var ctxIndex = multiStartIndex;\n    /** @type {?} */\n    var propIndex = 0;\n    /** @type {?} */\n    var propLimit = styleProps.length + classNames.length;\n    // the main loop here will try and figure out how the shape of the provided\n    // styles differ with respect to the context. Later if the context/styles/classes\n    // are off-balance then they will be dealt in another loop after this one\n    while (ctxIndex < context.length && propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_2 = propIndex >= classesStartIndex;\n        /** @type {?} */\n        var processValue = (!isClassBased_2 && !ignoreAllStyleUpdates) || (isClassBased_2 && !ignoreAllClassUpdates);\n        // when there is a cache-hit for a string-based class then we should\n        // avoid doing any work diffing any of the changes\n        if (processValue) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_2 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var newProp = isClassBased_2 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var newValue = isClassBased_2 ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n            /** @type {?} */\n            var playerBuilderIndex = isClassBased_2 ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            /** @type {?} */\n            var prop = getProp(context, ctxIndex);\n            if (prop === newProp) {\n                /** @type {?} */\n                var value = getValue(context, ctxIndex);\n                /** @type {?} */\n                var flag = getPointers(context, ctxIndex);\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex);\n                if (hasValueChanged(flag, value, newValue)) {\n                    setValue(context, ctxIndex, newValue);\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    /** @type {?} */\n                    var initialValue = getInitialValue(context, flag);\n                    // there is no point in setting this to dirty if the previously\n                    // rendered value was being referenced by the initial style (or null)\n                    if (hasValueChanged(flag, initialValue, newValue)) {\n                        setDirty(context, ctxIndex, true);\n                        dirty = true;\n                    }\n                }\n            }\n            else {\n                /** @type {?} */\n                var indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n                if (indexOfEntry > 0) {\n                    /** @type {?} */\n                    var valueToCompare = getValue(context, indexOfEntry);\n                    /** @type {?} */\n                    var flagToCompare = getPointers(context, indexOfEntry);\n                    swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n                    if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n                        /** @type {?} */\n                        var initialValue = getInitialValue(context, flagToCompare);\n                        setValue(context, ctxIndex, newValue);\n                        if (hasValueChanged(flagToCompare, initialValue, newValue)) {\n                            setDirty(context, ctxIndex, true);\n                            playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                            dirty = true;\n                        }\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    var newFlag = prepareInitialFlag(newProp, isClassBased_2, getStyleSanitizer(context));\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    insertNewMultiProperty(context, ctxIndex, isClassBased_2, newProp, newFlag, newValue, playerBuilderIndex);\n                    dirty = true;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n        propIndex++;\n    }\n    // this means that there are left-over values in the context that\n    // were not included in the provided styles/classes and in this\n    // case the  goal is to \"remove\" them from the context (by nullifying)\n    while (ctxIndex < context.length) {\n        /** @type {?} */\n        var flag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        var isClassBased_3 = (flag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        var processValue = (!isClassBased_3 && !ignoreAllStyleUpdates) || (isClassBased_3 && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            var value = getValue(context, ctxIndex);\n            /** @type {?} */\n            var doRemoveValue = valueExists(value, isClassBased_3);\n            if (doRemoveValue) {\n                setDirty(context, ctxIndex, true);\n                setValue(context, ctxIndex, null);\n                /** @type {?} */\n                var playerBuilderIndex = isClassBased_3 ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex);\n                dirty = true;\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    /** @type {?} */\n    var sanitizer = getStyleSanitizer(context);\n    while (propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_4 = propIndex >= classesStartIndex;\n        /** @type {?} */\n        var processValue = (!isClassBased_4 && !ignoreAllStyleUpdates) || (isClassBased_4 && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_4 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var prop = isClassBased_4 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var value = isClassBased_4 ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n            /** @type {?} */\n            var flag = prepareInitialFlag(prop, isClassBased_4, sanitizer) | 1 /* Dirty */;\n            /** @type {?} */\n            var playerBuilderIndex = isClassBased_4 ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            context.push(flag, prop, value, playerBuilderIndex);\n            dirty = true;\n        }\n        propIndex++;\n    }\n    if (dirty) {\n        setContextDirty(context, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * Sets and resolves a single styling property/value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyleAndClassBindings` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} index The index of the property which is being updated.\n * @param {?} input\n * @return {?}\n */\nexport function updateStyleProp(context, index, input) {\n    /** @type {?} */\n    var singleIndex = 8 /* SingleStylesStartPosition */ + index * 4 /* Size */;\n    /** @type {?} */\n    var currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    var currFlag = getPointers(context, singleIndex);\n    /** @type {?} */\n    var value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    // didn't change ... nothing to make a note of\n    if (hasValueChanged(currFlag, currValue, value)) {\n        /** @type {?} */\n        var isClassBased_5 = (currFlag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        var element = /** @type {?} */ (((context[5 /* ElementPosition */])));\n        /** @type {?} */\n        var playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder(/** @type {?} */ (input), element, isClassBased_5 ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        /** @type {?} */\n        var value_1 = /** @type {?} */ ((playerBuilder ? (/** @type {?} */ (input)).value : input));\n        /** @type {?} */\n        var currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        /** @type {?} */\n        var playerBuildersAreDirty = false;\n        /** @type {?} */\n        var playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            /** @type {?} */\n            var newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex);\n            playerBuildersAreDirty = true;\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value_1);\n        /** @type {?} */\n        var indexForMulti = getMultiOrSingleIndex(currFlag);\n        /** @type {?} */\n        var valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value_1)) {\n            /** @type {?} */\n            var multiDirty = false;\n            /** @type {?} */\n            var singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value_1, isClassBased_5) && valueExists(valueForMulti, isClassBased_5)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} index The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @return {?}\n */\nexport function updateClassProp(context, index, addOrRemove) {\n    /** @type {?} */\n    var adjustedIndex = index + context[4 /* ClassOffsetPosition */];\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nexport function renderStyleAndClassBindings(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore) {\n    /** @type {?} */\n    var totalPlayersQueued = 0;\n    if (isContextDirty(context)) {\n        /** @type {?} */\n        var flushPlayerBuilders = context[3 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        /** @type {?} */\n        var native = /** @type {?} */ ((context[5 /* ElementPosition */]));\n        /** @type {?} */\n        var multiStartIndex = getMultiStartIndex(context);\n        /** @type {?} */\n        var styleSanitizer = getStyleSanitizer(context);\n        /** @type {?} */\n        var onlySingleClasses = limitToSingleClasses(context);\n        for (var i = 8 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                var prop = getProp(context, i);\n                /** @type {?} */\n                var value = getValue(context, i);\n                /** @type {?} */\n                var flag = getPointers(context, i);\n                /** @type {?} */\n                var playerBuilder = getPlayerBuilder(context, i);\n                /** @type {?} */\n                var isClassBased_6 = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                var isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                var readInitialValue = !isClassBased_6 || !onlySingleClasses;\n                /** @type {?} */\n                var valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased_6)) {\n                    /** @type {?} */\n                    var multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                if (!valueExists(valueToApply, isClassBased_6) && readInitialValue) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                /** @type {?} */\n                var doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased_6) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        /** @type {?} */\n                        var sanitizer = (flag & 4 /* Sanitize */) ? styleSanitizer : null;\n                        setStyle(native, prop, /** @type {?} */ (valueToApply), renderer, sanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            /** @type {?} */\n            var rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : /** @type {?} */ (rootOrView);\n            /** @type {?} */\n            var playerContext = /** @type {?} */ ((getPlayerContext(context)));\n            /** @type {?} */\n            var playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (var i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                /** @type {?} */\n                var builder = /** @type {?} */ (playerContext[i]);\n                /** @type {?} */\n                var playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                /** @type {?} */\n                var oldPlayer = /** @type {?} */ (playerContext[playerInsertionIndex]);\n                if (builder) {\n                    /** @type {?} */\n                    var player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            /** @type {?} */\n                            var wasQueued = addPlayerInternal(playerContext, rootContext, /** @type {?} */ (native), player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setContextDirty(context, false);\n    }\n    return totalPlayersQueued;\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native['style'].setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native['style'].removeProperty(prop);\n    }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n    }\n    else if (add) {\n        ngDevMode && ngDevMode.rendererAddClass++;\n        isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n            native['classList'].add(className);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveClass++;\n        isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n            native['classList'].remove(className);\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        (/** @type {?} */ (context[adjustedIndex])) |= 1 /* Dirty */;\n    }\n    else {\n        (/** @type {?} */ (context[adjustedIndex])) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBased(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    var index = getInitialIndex(flag);\n    return /** @type {?} */ (context[2 /* InitialStylesPosition */][index]);\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    var index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 8 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return /** @type {?} */ (getMultiOrSingleIndex(context[3 /* MasterFlagPosition */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getStyleSanitizer(context) {\n    return context[1 /* StyleSanitizerPosition */];\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    /** @type {?} */\n    var playerContext = /** @type {?} */ ((context[0 /* PlayerContext */]));\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    /** @type {?} */\n    var playerContext = context[0 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex) {\n    context[index + 3 /* PlayerBuilderIndexOffset */] = playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n    return (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */])) || 0;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n    /** @type {?} */\n    var playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        /** @type {?} */\n        var playerContext = context[0 /* PlayerContext */];\n        if (playerContext) {\n            return /** @type {?} */ (playerContext[playerBuilderIndex]);\n        }\n    }\n    return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return /** @type {?} */ (context[adjustedIndex]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return /** @type {?} */ (context[index + 2 /* ValueOffset */]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return /** @type {?} */ (context[index + 1 /* PropertyOffset */]);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function isContextDirty(context) {\n    return isDirty(context, 3 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function limitToSingleClasses(context) {\n    return context[3 /* MasterFlagPosition */] & 16 /* OnlyProcessSingleClasses */;\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextDirty(context, isDirtyYes) {\n    setDirty(context, 3 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        (/** @type {?} */ (context[3 /* MasterFlagPosition */])) |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        (/** @type {?} */ (context[3 /* MasterFlagPosition */])) &= ~8 /* PlayerBuildersDirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n    for (var i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        var thisProp = context[i];\n        if (thisProp == prop) {\n            return i - 1 /* PropertyOffset */;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    /** @type {?} */\n    var tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    var tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    var tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    var tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    /** @type {?} */\n    var flagA = tmpFlag;\n    /** @type {?} */\n    var flagB = getPointers(context, indexB);\n    /** @type {?} */\n    var singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    var singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    setPlayerBuilderIndex(context, indexA, getPlayerBuilderIndex(context, indexB));\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (var i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        var multiFlag = getPointers(context, i);\n        /** @type {?} */\n        var singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            var singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            var initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBased(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, playerIndex) {\n    /** @type {?} */\n    var doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, playerIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    if (isClassBased) {\n        return value ? true : false;\n    }\n    return value !== null;\n}\n/**\n * @param {?} name\n * @param {?} isClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(name, isClassBased, sanitizer) {\n    if (isClassBased) {\n        return 2 /* Class */;\n    }\n    else if (sanitizer && sanitizer(name)) {\n        return 4 /* Sanitize */;\n    }\n    return 0 /* None */;\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    var isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    var hasValues = a && b;\n    /** @type {?} */\n    var usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return (/** @type {?} */ (a)).toString() !== (/** @type {?} */ (b)).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nClassAndStylePlayerBuilder = /** @class */ (function () {\n    function ClassAndStylePlayerBuilder(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = /** @type {?} */ (factory);\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    ClassAndStylePlayerBuilder.prototype.setValue = /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    function (prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    };\n    /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    ClassAndStylePlayerBuilder.prototype.buildPlayer = /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    function (currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            /** @type {?} */\n            var player = this._factory.fn(this._element, this._type, /** @type {?} */ ((this._values)), isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    };\n    return ClassAndStylePlayerBuilder;\n}());\n/**\n * @template T\n */\nexport { ClassAndStylePlayerBuilder };\nif (false) {\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._values;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._dirty;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._factory;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._element;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._type;\n}\n//# sourceMappingURL=class_and_style_bindings.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { noop } from '../util/noop';\nimport { assertDefined, assertEqual, assertLessThan, assertNotEqual } from './assert';\nimport { attachPatchData, getComponentViewByInstance } from './context_discovery';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateInjectable, getOrCreateNodeInjectorForNode, injectAttributeImpl } from './di';\nimport { throwErrorIfNoChangesMode, throwMultipleComponentError } from './errors';\nimport { executeHooks, executeInitHooks, queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { ACTIVE_INDEX, VIEWS } from './interfaces/container';\nimport { INJECTOR_SIZE, NodeInjectorFactory } from './interfaces/injector';\nimport { NG_PROJECT_AS_ATTR_NAME } from './interfaces/projection';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { BINDING_INDEX, CLEANUP, CONTAINER_INDEX, CONTENT_QUERIES, CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, NEXT, PARENT, QUERIES, RENDERER, SANITIZER, TAIL, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { appendChild, appendProjectedNode, createTextNode, findComponentView, getLViewChild, getRenderParent, insertView, removeView } from './node_manipulation';\nimport { isNodeMatchingSelectorList, matchingSelectorIndex } from './node_selector_matcher';\nimport { assertDataInRange, assertHasParent, assertPreviousIsParent, decreaseElementDepthCount, enterView, getBindingsEnabled, getCheckNoChangesMode, getCleanup, getContextViewData, getCreationMode, getCurrentQueries, getCurrentSanitizer, getElementDepthCount, getFirstTemplatePass, getIsParent, getPreviousOrParentTNode, getRenderer, getRendererFactory, getTView, getTViewCleanup, getViewData, increaseElementDepthCount, leaveView, nextContextImpl, resetComponentState, setBindingRoot, setCheckNoChangesMode, setCurrentQueries, setFirstTemplatePass, setIsParent, setPreviousOrParentTNode, setRenderer, setRendererFactory } from './state';\nimport { createStylingContextTemplate, renderStyleAndClassBindings, updateClassProp as updateElementClassProp, updateStyleProp as updateElementStyleProp, updateStylingMap } from './styling/class_and_style_bindings';\nimport { BoundPlayerFactory } from './styling/player_factory';\nimport { getStylingContext } from './styling/util';\nimport { NO_CHANGE } from './tokens';\nimport { getComponentViewByIndex, getNativeByIndex, getNativeByTNode, getRootContext, getRootView, getTNode, isComponent, isComponentDef, isDifferent, loadInternal, readPatchedLViewData, stringify } from './util';\n/** *\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n  @type {?} */\nvar _CLEAN_PROMISE = Promise.resolve(null);\n/** @enum {number} */\nvar BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/** @typedef {?} */\nvar SanitizerFn;\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} viewData\n * @param {?} rf\n * @return {?}\n */\nexport function refreshDescendantViews(viewData, rf) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var parentFirstTemplatePass = getFirstTemplatePass();\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    setFirstTemplatePass(false);\n    // Dynamically created views must run first only in creation mode. If this is a\n    // creation-only pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update-only pass.\n    if (rf !== 1 /* Create */) {\n        /** @type {?} */\n        var creationMode = getCreationMode();\n        /** @type {?} */\n        var checkNoChangesMode = getCheckNoChangesMode();\n        if (!checkNoChangesMode) {\n            executeInitHooks(viewData, tView, creationMode);\n        }\n        setHostBindings(tView, viewData);\n        refreshDynamicEmbeddedViews(viewData);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView);\n        if (!checkNoChangesMode) {\n            executeHooks(viewData, tView.contentHooks, tView.contentCheckHooks, creationMode);\n        }\n    }\n    refreshChildComponents(tView.components, parentFirstTemplatePass, rf);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nexport function setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        /** @type {?} */\n        var bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        /** @type {?} */\n        var currentDirectiveIndex = -1;\n        /** @type {?} */\n        var currentElementIndex = -1;\n        for (var i = 0; i < tView.expandoInstructions.length; i++) {\n            /** @type {?} */\n            var instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    /** @type {?} */\n                    var providerCount = (/** @type {?} */ (tView.expandoInstructions[++i]));\n                    bindingRootIndex += INJECTOR_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                viewData[BINDING_INDEX] = bindingRootIndex;\n                // We must subtract the header offset because the load() instruction\n                // expects a raw, unadjusted index.\n                instruction(currentDirectiveIndex - HEADER_OFFSET, currentElementIndex);\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n    if (tView.contentQueries != null) {\n        for (var i = 0; i < tView.contentQueries.length; i += 2) {\n            /** @type {?} */\n            var directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (tView.data[directiveDefIdx]); /** @type {?} */\n            ((directiveDef.contentQueriesRefresh))(directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @param {?} parentFirstTemplatePass\n * @param {?} rf\n * @return {?}\n */\nfunction refreshChildComponents(components, parentFirstTemplatePass, rf) {\n    if (components != null) {\n        for (var i = 0; i < components.length; i++) {\n            componentRefresh(components[i], parentFirstTemplatePass, rf);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} renderer\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function createLViewData(renderer, tView, context, flags, sanitizer) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var instance = /** @type {?} */ (tView.blueprint.slice());\n    instance[FLAGS] = flags | 1 /* CreationMode */ | 8 /* Attached */ | 16 /* RunInit */;\n    instance[PARENT] = instance[DECLARATION_VIEW] = viewData;\n    instance[CONTEXT] = context;\n    instance[INJECTOR] = viewData ? viewData[INJECTOR] : null;\n    instance[RENDERER] = renderer;\n    instance[SANITIZER] = sanitizer || null;\n    return instance;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nexport function createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, viewData.length, \"Slot should have been initialized with null\");\n    viewData[adjustedIndex] = native;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (tView.data[adjustedIndex]);\n    if (tNode == null) {\n        /** @type {?} */\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var isParent = getIsParent();\n        tNode = tView.data[adjustedIndex] =\n            createTNode(viewData, type, adjustedIndex, name, attrs, null);\n        // Now link ourselves into the tree.\n        if (previousOrParentTNode) {\n            if (isParent && previousOrParentTNode.child == null &&\n                (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                previousOrParentTNode.child = tNode;\n            }\n            else if (!isParent) {\n                previousOrParentTNode.next = tNode;\n            }\n        }\n    }\n    if (tView.firstChild == null && type === 3 /* Element */) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return /** @type {?} */ (tNode);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function createViewNode(index, view) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    if (view[TVIEW].node == null) {\n        view[TVIEW].node = /** @type {?} */ (createTNode(view, 2 /* View */, index, null, null, null));\n    }\n    setIsParent(true);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (view[TVIEW].node);\n    setPreviousOrParentTNode(tNode);\n    return view[HOST_NODE] = tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nexport function adjustBlueprintForNewNode(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n        tView.blueprint.push(null);\n        view.push(null);\n    }\n}\n/**\n *\n * @template T\n * @param {?} hostNode Existing node to render into.\n * @param {?} templateFn Template function with the instructions.\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory renderer factory to use\n * @param {?} hostView\n * @param {?=} directives Directive defs that should be used for matching\n * @param {?=} pipes Pipe defs that should be used for matching\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function renderTemplate(hostNode, templateFn, consts, vars, context, providedRendererFactory, hostView, directives, pipes, sanitizer) {\n    if (hostView == null) {\n        resetComponentState();\n        setRendererFactory(providedRendererFactory);\n        /** @type {?} */\n        var renderer = providedRendererFactory.createRenderer(null, null);\n        setRenderer(renderer);\n        // We need to create a root view so it's possible to look up the host element through its index\n        enterView(createLViewData(renderer, createTView(-1, null, 1, 0, null, null, null), {}, 2 /* CheckAlways */ | 64 /* IsRoot */), null);\n        /** @type {?} */\n        var componentTView = getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null);\n        hostView =\n            createLViewData(renderer, componentTView, context, 2 /* CheckAlways */, sanitizer);\n        hostView[HOST_NODE] = createNodeAtIndex(0, 3 /* Element */, hostNode, null, null);\n    }\n    renderComponentOrTemplate(hostView, context, null, templateFn);\n    return hostView;\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nexport function createEmbeddedViewAndNode(tView, context, declarationView, renderer, queries, injectorIndex) {\n    /** @type {?} */\n    var _isParent = getIsParent();\n    /** @type {?} */\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode(/** @type {?} */ ((null)));\n    /** @type {?} */\n    var lView = createLViewData(renderer, tView, context, 2 /* CheckAlways */, getCurrentSanitizer());\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    createViewNode(-1, lView);\n    if (tView.firstTemplatePass) {\n        /** @type {?} */ ((tView.node)).injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @param {?} rf\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewToRender, tView, context, rf) {\n    /** @type {?} */\n    var _isParent = getIsParent();\n    /** @type {?} */\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode(/** @type {?} */ ((null)));\n    /** @type {?} */\n    var oldView;\n    if (viewToRender[FLAGS] & 64 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode(/** @type {?} */ ((null)));\n            oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n            namespaceHTML(); /** @type {?} */\n            ((tView.template))(rf, context);\n            if (rf & 2 /* Update */) {\n                refreshDescendantViews(viewToRender, null);\n            }\n            else {\n                // This must be set to false immediately after the first creation run because in an\n                // ngFor loop, all the views will be created together before update mode runs and turns\n                // off firstTemplatePass. If we don't set it here, instances will perform directive\n                // matching, etc again and again.\n                viewToRender[TVIEW].firstTemplatePass = false;\n                setFirstTemplatePass(false);\n            }\n        }\n        finally {\n            /** @type {?} */\n            var isCreationOnly = (rf & 1 /* Create */) === 1 /* Create */;\n            leaveView(/** @type {?} */ ((oldView)), isCreationOnly);\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nexport function nextContext(level) {\n    if (level === void 0) { level = 1; }\n    return nextContextImpl(level);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} componentOrContext\n * @param {?} rf\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, componentOrContext, rf, templateFn) {\n    /** @type {?} */\n    var rendererFactory = getRendererFactory();\n    /** @type {?} */\n    var oldView = enterView(hostView, hostView[HOST_NODE]);\n    try {\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (templateFn) {\n            namespaceHTML();\n            templateFn(rf || getRenderFlags(hostView), /** @type {?} */ ((componentOrContext)));\n        }\n        refreshDescendantViews(hostView, rf);\n    }\n    finally {\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. By default, the update block is run with the\n * creation block when the view is in creation mode. Otherwise, the update block is run\n * alone.\n *\n * Dynamically created views do NOT use this configuration (update block and create block are\n * always run separately).\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return view[FLAGS] & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/** @type {?} */\nvar _currentNamespace = null;\n/**\n * @return {?}\n */\nexport function namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg/';\n}\n/**\n * @return {?}\n */\nexport function namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nexport function namespaceHTML() {\n    _currentNamespace = null;\n}\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LViewData array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nexport function elementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var renderer = getRenderer();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var native = renderer.createComment(ngDevMode ? 'ng-container' : '');\n    ngDevMode && assertDataInRange(index - 1);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, null, attrs || null);\n    appendChild(native, tNode, viewData);\n    createDirectivesAndLocals(tView, viewData, localRefs);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nexport function elementContainerEnd() {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var tView = getTView();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    /** @type {?} */\n    var currentQueries = getCurrentQueries();\n    if (currentQueries) {\n        setCurrentQueries(currentQueries.addNode(/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(previousOrParentTNode.flags, tView);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LViewData array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = getTView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    var native = elementCreate(name);\n    ngDevMode && assertDataInRange(index - 1);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */ ((native)), name, attrs || null);\n    if (attrs) {\n        setUpAttributes(native, attrs);\n    }\n    appendChild(native, tNode, viewData);\n    createDirectivesAndLocals(tView, viewData, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, viewData);\n    }\n    increaseElementDepthCount();\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nexport function elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    var native;\n    /** @type {?} */\n    var rendererToUse = overriddenRenderer || getRenderer();\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} viewData\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, viewData, localRefs, localRefExtractor) {\n    if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getFirstTemplatePass()) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, viewData, findDirectiveMatches(tView, viewData, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, viewData, previousOrParentTNode);\n    saveResolvedLocalsInData(viewData, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LViewData in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    var localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        var localIndex = tNode.index + 1;\n        for (var i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            var index = /** @type {?} */ (localNames[i + 1]);\n            /** @type {?} */\n            var value = index === -1 ?\n                localRefExtractor(/** @type {?} */ (tNode), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nexport function getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = /** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery)));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nexport function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    var bindingStartIndex = HEADER_OFFSET + consts;\n    /** @type {?} */\n    var initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[TVIEW] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: /** @type {?} */ ((null)),\n        data: blueprint.slice(),\n        // Fill in to match HEADER_OFFSET in LViewData\n        childIndex: -1,\n        // Children set in addToViewTree(), if any\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    var blueprint = /** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex));\n    blueprint[CONTAINER_INDEX] = -1;\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    var renderer = getRenderer();\n    /** @type {?} */\n    var isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === NG_PROJECT_AS_ATTR_NAME) {\n            i += 2;\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (attrName === 0 /* NamespaceURI */) {\n                /** @type {?} */\n                var namespaceURI = /** @type {?} */ (attrs[i + 1]);\n                /** @type {?} */\n                var attrName_1 = /** @type {?} */ (attrs[i + 2]);\n                /** @type {?} */\n                var attrVal = /** @type {?} */ (attrs[i + 3]);\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, attrName_1, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName_1, attrVal);\n                i += 4;\n            }\n            else {\n                /** @type {?} */\n                var attrVal = attrs[i + 1];\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, /** @type {?} */ (attrName), /** @type {?} */ (attrVal)) :\n                    native.setAttribute(/** @type {?} */ (attrName), /** @type {?} */ (attrVal));\n                i += 2;\n            }\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    ngDevMode && assertDataInRange(-1);\n    setRendererFactory(factory);\n    /** @type {?} */\n    var defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    var rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture) {\n    if (useCapture === void 0) { useCapture = false; }\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tNode = getPreviousOrParentTNode();\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var native = /** @type {?} */ (getNativeByTNode(tNode, viewData));\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        /** @type {?} */\n        var renderer = getRenderer();\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            /** @type {?} */\n            var cleanupFn = renderer.listen(native, eventName, listenerFn);\n            storeCleanupFn(viewData, cleanupFn);\n        }\n        else {\n            /** @type {?} */\n            var wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n            native.addEventListener(eventName, wrappedListener, useCapture);\n            /** @type {?} */\n            var cleanupInstances = getCleanup(viewData);\n            cleanupInstances.push(wrappedListener);\n            if (getFirstTemplatePass()) {\n                getTViewCleanup(viewData).push(eventName, tNode.index, /** @type {?} */ ((cleanupInstances)).length - 1, useCapture);\n            }\n        }\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode.flags, 1 /* Output */);\n    }\n    /** @type {?} */\n    var outputs = tNode.outputs;\n    /** @type {?} */\n    var outputData;\n    if (outputs && (outputData = outputs[eventName])) {\n        createOutput(viewData, outputData, listenerFn);\n    }\n}\n/**\n * Iterates through the outputs associated with a particular event name and subscribes to\n * each output.\n * @param {?} viewData\n * @param {?} outputs\n * @param {?} listener\n * @return {?}\n */\nfunction createOutput(viewData, outputs, listener) {\n    for (var i = 0; i < outputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (outputs[i]), viewData);\n        /** @type {?} */\n        var subscription = viewData[/** @type {?} */ (outputs[i])][outputs[i + 1]].subscribe(listener);\n        storeCleanupWithContext(viewData, subscription, subscription.unsubscribe);\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} view\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupWithContext(view, context, cleanupFn) {\n    if (!view)\n        view = getViewData();\n    getCleanup(view).push(context);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(cleanupFn, /** @type {?} */ ((view[CLEANUP])).length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(/** @type {?} */ ((view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    /** @type {?} */\n    var currentQueries = getCurrentQueries();\n    if (currentQueries) {\n        setCurrentQueries(currentQueries.addNode(/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(previousOrParentTNode.flags, getTView());\n    decreaseElementDepthCount();\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        var viewData = getViewData();\n        /** @type {?} */\n        var renderer = getRenderer();\n        /** @type {?} */\n        var element_1 = getNativeByIndex(index, viewData);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element_1, name) :\n                element_1.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            var strValue = sanitizer == null ? stringify(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element_1, name, strValue) :\n                element_1.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var element = /** @type {?} */ (getNativeByIndex(index, viewData));\n    /** @type {?} */\n    var tNode = getTNode(index, viewData);\n    /** @type {?} */\n    var inputData = initializeTNodeInputs(tNode);\n    /** @type {?} */\n    var dataValue;\n    if (inputData && (dataValue = inputData[propName])) {\n        setInputsForProperty(viewData, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(viewData, index + HEADER_OFFSET);\n    }\n    else if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var renderer = getRenderer();\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\n        ngDevMode && ngDevMode.rendererSetProperty++;\n        isProceduralRenderer(renderer) ?\n            renderer.setProperty(/** @type {?} */ (element), propName, value) :\n            ((/** @type {?} */ (element)).setProperty ? (/** @type {?} */ (element)).setProperty(propName, value) :\n                (/** @type {?} */ (element))[propName] = value);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} viewData\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nexport function createTNode(viewData, type, adjustedIndex, tagName, attrs, tViews) {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    ngDevMode && ngDevMode.tNode++;\n    /** @type {?} */\n    var parent = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    var parentInSameView = parent && viewData && parent !== viewData[HOST_NODE];\n    /** @type {?} */\n    var tParent = parentInSameView ? /** @type {?} */ (parent) : null;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: tViews,\n        next: null,\n        child: null,\n        parent: tParent,\n        detached: null,\n        stylingTemplate: null,\n        projection: null\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} viewData\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(viewData, inputs, value) {\n    for (var i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]), viewData);\n        viewData[/** @type {?} */ (inputs[i])][inputs[i + 1]] = value;\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNodeFlags\n * @param {?} direction\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNodeFlags, direction) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var count = tNodeFlags & 4095 /* DirectiveCountMask */;\n    /** @type {?} */\n    var propStore = null;\n    if (count > 0) {\n        /** @type {?} */\n        var start = tNodeFlags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        /** @type {?} */\n        var isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        var defs = tView.data;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (defs[i]);\n            /** @type {?} */\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    var internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    var hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @param {?} index The index of the element to update in the data array\n * @param {?} stylingIndex\n * @param {?} value A value indicating if a given class should be added or removed.\n * @return {?}\n */\nexport function elementClassProp(index, stylingIndex, value) {\n    /** @type {?} */\n    var val = (value instanceof BoundPlayerFactory) ? (/** @type {?} */ (value)) : (!!value);\n    updateElementClassProp(getStylingContext(index, getViewData()), stylingIndex, val);\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to apply all styling\n * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n * value is allocated for the styling details for its corresponding element (the element\n * index is the previous index value from this one).\n *\n * (Note this function calls `elementStylingApply` immediately when called.)\n *\n *\n * @param {?=} classDeclarations A key/value array of CSS classes that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n *   bindings. If a class binding changes its value to a falsy value then the matching initial\n *   class value that are passed in here will be applied to the element (if matched).\n * @param {?=} styleDeclarations A key/value array of CSS styles that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n *   bindings. If a style binding changes its value to null then the initial styling\n *   values that are passed in here will be applied to the element (if matched).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used (if provided)\n *   to sanitize the any CSS property values that are applied to the element (during rendering).\n * @return {?}\n */\nexport function elementStyling(classDeclarations, styleDeclarations, styleSanitizer) {\n    /** @type {?} */\n    var tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var inputData = initializeTNodeInputs(tNode);\n    if (!tNode.stylingTemplate) {\n        /** @type {?} */\n        var hasClassInput = inputData && inputData.hasOwnProperty('class') ? true : false;\n        if (hasClassInput) {\n            tNode.flags |= 32768 /* hasClassInput */;\n        }\n        // initialize the styling template.\n        tNode.stylingTemplate = createStylingContextTemplate(classDeclarations, styleDeclarations, styleSanitizer, hasClassInput);\n    }\n    if (styleDeclarations && styleDeclarations.length ||\n        classDeclarations && classDeclarations.length) {\n        /** @type {?} */\n        var index = tNode.index - HEADER_OFFSET;\n        if (delegateToClassInput(tNode)) {\n            /** @type {?} */\n            var stylingContext = getStylingContext(index, getViewData());\n            /** @type {?} */\n            var initialClasses = /** @type {?} */ (stylingContext[6 /* PreviousOrCachedMultiClassValue */]);\n            setInputsForProperty(getViewData(), /** @type {?} */ ((/** @type {?} */ ((tNode.inputs))['class'])), initialClasses);\n        }\n        elementStylingApply(index);\n    }\n}\n/**\n * Apply all styling values to the element which have been queued by any styling instructions.\n *\n * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n * have been issued against the element. This function will also determine if any styles have\n * changed and will then skip the operation if there is nothing new to render.\n *\n * Once called then all queued styles will be flushed.\n *\n * @param {?} index Index of the element's styling storage that will be rendered.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @return {?}\n */\nexport function elementStylingApply(index) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var isFirstRender = (viewData[FLAGS] & 1 /* CreationMode */) !== 0;\n    /** @type {?} */\n    var totalPlayersQueued = renderStyleAndClassBindings(getStylingContext(index, viewData), getRenderer(), viewData, isFirstRender);\n    if (totalPlayersQueued > 0) {\n        /** @type {?} */\n        var rootContext = getRootContext(viewData);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n}\n/**\n * Queue a given style to be rendered on an Element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} styleIndex Index of the style property on this element. (Monotonically increasing.)\n * @param {?} value New value to write (null to remove).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @return {?}\n */\nexport function elementStyleProp(index, styleIndex, value, suffix) {\n    /** @type {?} */\n    var valueToAdd = null;\n    if (value) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = stringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = /** @type {?} */ ((value));\n        }\n    }\n    updateElementStyleProp(getStylingContext(index, getViewData()), styleIndex, valueToAdd);\n}\n/**\n * Queue a key/value map of styles to be rendered on an Element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n * If any styles are set to `null` then they will be removed from the element (unless the same\n * style properties have been assigned to the element during creation using `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @template T\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @return {?}\n */\nexport function elementStylingMap(index, classes, styles) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tNode = getTNode(index, viewData);\n    /** @type {?} */\n    var stylingContext = getStylingContext(index, viewData);\n    if (delegateToClassInput(tNode) && classes !== NO_CHANGE) {\n        /** @type {?} */\n        var initialClasses = /** @type {?} */ (stylingContext[6 /* PreviousOrCachedMultiClassValue */]);\n        /** @type {?} */\n        var classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + (/** @type {?} */ (classes));\n        setInputsForProperty(getViewData(), /** @type {?} */ ((/** @type {?} */ ((tNode.inputs))['class'])), classInputVal);\n    }\n    updateStylingMap(stylingContext, classes, styles);\n}\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nexport function text(index, value) {\n    /** @type {?} */\n    var viewData = getViewData();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], getTView().bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    var textNative = createTextNode(value, getRenderer());\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, viewData);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        ngDevMode && assertDataInRange(index + HEADER_OFFSET);\n        /** @type {?} */\n        var element_2 = /** @type {?} */ ((getNativeByIndex(index, getViewData())));\n        ngDevMode && assertDefined(element_2, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        /** @type {?} */\n        var renderer = getRenderer();\n        isProceduralRenderer(renderer) ? renderer.setValue(element_2, stringify(value)) :\n            element_2.textContent = stringify(value);\n    }\n}\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nexport function instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    var rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    var directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, /** @type {?} */ (rootTNode));\n    postProcessBaseDirective(viewData, rootTNode, directive, /** @type {?} */ (def));\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    var exportsMap = localRefs ? { '': -1 } : null;\n    /** @type {?} */\n    var totalHostVars = 0;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (var i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (directives[i]);\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        for (var i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (directives[i]);\n            /** @type {?} */\n            var directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            totalHostVars += def.hostVars;\n            saveNameToExportMap(/** @type {?} */ ((tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            queueInitHooks(directiveDefIdx, def.onInit, def.doCheck, tView);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    prefillHostVars(tView, viewData, totalHostVars);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, viewData, previousOrParentTNode) {\n    /** @type {?} */\n    var start = previousOrParentTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n    /** @type {?} */\n    var end = start + previousOrParentTNode.flags & 4095 /* DirectiveCountMask */;\n    if (!getFirstTemplatePass() && start < end) {\n        getOrCreateNodeInjectorForNode(/** @type {?} */ (previousOrParentTNode), viewData);\n    }\n    for (var i = start; i < end; i++) {\n        /** @type {?} */\n        var def = /** @type {?} */ (tView.data[i]);\n        if (isComponentDef(def)) {\n            addComponentLogic(viewData, previousOrParentTNode, /** @type {?} */ (def));\n        }\n        /** @type {?} */\n        var directive = getNodeInjectable(tView.data, /** @type {?} */ ((viewData)), i, /** @type {?} */ (previousOrParentTNode));\n        postProcessDirective(viewData, directive, def, i);\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nexport function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    var elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    var providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} totalHostVars\n * @return {?}\n */\nexport function prefillHostVars(tView, viewData, totalHostVars) {\n    for (var i = 0; i < totalHostVars; i++) {\n        viewData.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive, def);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def.inputs, previousOrParentTNode);\n    }\n    if (def.contentQueries) {\n        def.contentQueries(directiveDefIdx);\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} viewData\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @param {?} def\n * @return {?}\n */\nfunction postProcessBaseDirective(viewData, previousOrParentTNode, directive, def) {\n    /** @type {?} */\n    var native = getNativeByTNode(previousOrParentTNode, viewData);\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], getTView().bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent();\n    attachPatchData(directive, viewData);\n    if (native) {\n        attachPatchData(native, viewData);\n    }\n    // TODO(misko): setUpAttributes should be a feature for better treeshakability.\n    if (def.attributes != null && previousOrParentTNode.type == 3 /* Element */) {\n        setUpAttributes(/** @type {?} */ (native), /** @type {?} */ (def.attributes));\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    var registry = tView.directiveRegistry;\n    /** @type {?} */\n    var matches = null;\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (registry[i]);\n            if (isNodeMatchingSelectorList(tNode, /** @type {?} */ ((def.selectors)))) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentTNode()), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 4096 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 4096 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nexport function queueComponentIndexForCheck(previousOrParentTNode) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    var tView = getTView();\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Stores index of directive and host element so it will be queued for binding refresh during CD.\n * @param {?} tView\n * @param {?} def\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.'); /** @type {?} */\n    ((tView.expandoInstructions)).push(def.hostBindings || noop);\n    if (def.hostVars)\n        /** @type {?} */ ((tView.expandoInstructions)).push(def.hostVars);\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        var localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            var index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if ((/** @type {?} */ (def)).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nexport function initNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    var flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 4096 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, 4095 /* DirectiveCountMask */, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = index << 16 /* DirectiveStartingIndexShift */ | flags & 4096 /* isComponent */ |\n        numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n    queueHostBindingForCheck(tView, def);\n}\n/**\n * @template T\n * @param {?} viewData\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(viewData, previousOrParentTNode, def) {\n    /** @type {?} */\n    var native = getNativeByTNode(previousOrParentTNode, viewData);\n    /** @type {?} */\n    var tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n    /** @type {?} */\n    var componentView = addToViewTree(viewData, /** @type {?} */ (previousOrParentTNode.index), createLViewData(getRendererFactory().createRenderer(/** @type {?} */ (native), def), tView, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, getCurrentSanitizer()));\n    componentView[HOST_NODE] = /** @type {?} */ (previousOrParentTNode);\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    componentView[HOST] = viewData[previousOrParentTNode.index];\n    viewData[previousOrParentTNode.index] = componentView;\n    if (getFirstTemplatePass()) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = /** @type {?} */ (tNode.initialInputs);\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    /** @type {?} */\n    var initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (var i = 0; i < initialInputs.length; i += 2) {\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    var attrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        var minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        var attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, /** @type {?} */ (attrValue));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} hostTNode The host TNode for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nexport function createLContainer(hostNative, hostTNode, currentView, native, isForViewContainerRef) {\n    return [\n        isForViewContainerRef ? -1 : 0,\n        // active index\n        [],\n        currentView,\n        null,\n        null,\n        hostNative,\n        native,\n        // native\n        getRenderParent(hostTNode, currentView) // renderParent\n    ];\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nexport function template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var tNode = containerInternal(index, tagName || null, attrs || null);\n    if (getFirstTemplatePass()) {\n        tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    createDirectivesAndLocals(tView, viewData, localRefs, localRefExtractor);\n    /** @type {?} */\n    var currentQueries = getCurrentQueries();\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (currentQueries) {\n        setCurrentQueries(currentQueries.addNode(/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(tNode.flags, tView);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function container(index) {\n    /** @type {?} */\n    var tNode = containerInternal(index, null, null);\n    getFirstTemplatePass() && (tNode.tViews = []);\n    setIsParent(false);\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    /** @type {?} */\n    var viewData = getViewData();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], getTView().bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    var comment = getRenderer().createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    var lContainer = viewData[adjustedIndex] =\n        createLContainer(viewData[adjustedIndex], tNode, viewData, comment);\n    appendChild(comment, tNode, viewData);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(viewData, index + HEADER_OFFSET, lContainer);\n    /** @type {?} */\n    var currentQueries = getCurrentQueries();\n    if (currentQueries) {\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer[QUERIES] = currentQueries.container();\n    }\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var previousOrParentTNode = /** @type {?} */ (loadInternal(index, tView.data));\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    viewData[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    if (!getCheckNoChangesMode()) {\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executeInitHooks(viewData, tView, getCreationMode());\n    }\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent();\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    var lContainer = getViewData()[previousOrParentTNode.index];\n    /** @type {?} */\n    var nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, /** @type {?} */ (previousOrParentTNode), nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lViewData\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lViewData) {\n    for (var current = getLViewChild(lViewData); current !== null; current = current[NEXT]) {\n        // Note: current can be an LViewData or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LViewData\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            var container_1 = /** @type {?} */ (current);\n            for (var i = 0; i < container_1[VIEWS].length; i++) {\n                /** @type {?} */\n                var dynamicViewData = container_1[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], /** @type {?} */ ((dynamicViewData[CONTEXT])), 2 /* Update */);\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} tContainerNode to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, tContainerNode, startIdx, viewBlockId) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    for (var i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        var viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, tContainerNode, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var containerTNode = previousOrParentTNode.type === 2 /* View */ ? /** @type {?} */\n        ((previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    var lContainer = /** @type {?} */ (viewData[containerTNode.index]);\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    var viewToRender = scanForView(lContainer, /** @type {?} */ (containerTNode), /** @type {?} */ ((lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLViewData(getRenderer(), getOrCreateEmbeddedTView(viewBlockId, consts, vars, /** @type {?} */ (containerTNode)), null, 2 /* CheckAlways */, getCurrentSanitizer());\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = /** @type {?} */ ((lContainer[QUERIES])).createView();\n        }\n        createViewNode(viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (getCreationMode()) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, viewData, /** @type {?} */ ((lContainer[ACTIVE_INDEX])), -1);\n        } /** @type {?} */\n        ((lContainer[ACTIVE_INDEX]))++;\n    }\n    return getRenderFlags(viewToRender);\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    var tView = getTView();\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    var containerTViews = /** @type {?} */ (parent.tViews);\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var viewHost = viewData[HOST_NODE];\n    refreshDescendantViews(viewData, null);\n    leaveView(/** @type {?} */ ((viewData[PARENT])));\n    setPreviousOrParentTNode(/** @type {?} */ ((viewHost)));\n    setIsParent(false);\n}\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LViewData[] (adjusted for HEADER_OFFSET)\n * @param {?} parentFirstTemplatePass\n * @param {?} rf\n * @return {?}\n */\nexport function componentRefresh(adjustedElementIndex, parentFirstTemplatePass, rf) {\n    ngDevMode && assertDataInRange(adjustedElementIndex);\n    /** @type {?} */\n    var hostView = getComponentViewByIndex(adjustedElementIndex, getViewData());\n    ngDevMode && assertNodeType(/** @type {?} */ (getTView().data[adjustedElementIndex]), 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView[FLAGS] & (2 /* CheckAlways */ | 4 /* Dirty */)) {\n        parentFirstTemplatePass && syncViewWithBlueprint(hostView);\n        detectChangesInternal(hostView, hostView[CONTEXT], rf);\n    }\n}\n/**\n * Syncs an LViewData instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LViewData is created.\n * 3. Second <comp> is matched as a component and its LViewData is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LViewData was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    var componentTView = componentView[TVIEW];\n    for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nexport function viewAttached(view) {\n    return (view[FLAGS] & 8 /* Attached */) === 8 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    var componentNode = /** @type {?} */ (findComponentView(getViewData())[HOST_NODE]);\n    if (!componentNode.projection) {\n        /** @type {?} */\n        var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        var pData = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        var tails = pData.slice();\n        /** @type {?} */\n        var componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            var bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, /** @type {?} */ ((textSelectors))) : 0;\n            /** @type {?} */\n            var nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                /** @type {?} */ ((tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n                componentChild.next = null;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/** *\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nexport function projection(nodeIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    /** @type {?} */\n    var componentView = findComponentView(viewData);\n    /** @type {?} */\n    var componentNode = /** @type {?} */ (componentView[HOST_NODE]);\n    /** @type {?} */\n    var nodeToProject = (/** @type {?} */ (componentNode.projection))[selectorIndex];\n    /** @type {?} */\n    var projectedView = /** @type {?} */ ((componentView[PARENT]));\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    while (nodeToProject) {\n        if (nodeToProject.type === 1 /* Projection */) {\n            /** @type {?} */\n            var currentComponentView = findComponentView(projectedView);\n            /** @type {?} */\n            var currentComponentHost = /** @type {?} */ (currentComponentView[HOST_NODE]);\n            /** @type {?} */\n            var firstProjectedNode = (/** @type {?} */ (currentComponentHost.projection))[/** @type {?} */ (nodeToProject.projection)];\n            if (firstProjectedNode) {\n                projectionNodeStack[++projectionNodeIndex] = nodeToProject;\n                projectionNodeStack[++projectionNodeIndex] = projectedView;\n                nodeToProject = firstProjectedNode;\n                projectedView = /** @type {?} */ ((currentComponentView[PARENT]));\n                continue;\n            }\n        }\n        else {\n            // This flag must be set now or we won't know that this node is projected\n            // if the nodes are inserted into a container later.\n            nodeToProject.flags |= 8192 /* isProjected */;\n            appendProjectedNode(nodeToProject, tProjectionNode, viewData, projectedView);\n        }\n        // If we are finished with a list of re-projected nodes, we need to get\n        // back to the root projection node that was re-projected.\n        if (nodeToProject.next === null && projectedView !== /** @type {?} */ ((componentView[PARENT]))) {\n            projectedView = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n            nodeToProject = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n        }\n        nodeToProject = nodeToProject.next;\n    }\n}\n/**\n * Adds LViewData or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} currentView The view where LViewData or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LViewData[], adjusted for header\n * @param {?} state The LViewData or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(currentView, adjustedHostIndex, state) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var firstTemplatePass = getFirstTemplatePass();\n    if (currentView[TAIL]) {\n        /** @type {?} */ ((currentView[TAIL]))[NEXT] = state;\n    }\n    else if (firstTemplatePass) {\n        tView.childIndex = adjustedHostIndex;\n    }\n    currentView[TAIL] = state;\n    return state;\n}\n/**\n * If node is an OnPush component, marks its LViewData dirty.\n * @param {?} viewData\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(viewData, viewIndex) {\n    /** @type {?} */\n    var view = getComponentViewByIndex(viewIndex, viewData);\n    if (!(view[FLAGS] & 2 /* CheckAlways */)) {\n        view[FLAGS] |= 4 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener with preventDefault behavior.\n * @param {?} listenerFn\n * @return {?}\n */\nfunction wrapListenerWithPreventDefault(listenerFn) {\n    return function wrapListenerIn_preventDefault(e) {\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} view\n * @return {?}\n */\nexport function markViewDirty(view) {\n    /** @type {?} */\n    var currentView = view;\n    while (currentView && !(currentView[FLAGS] & 64 /* IsRoot */)) {\n        currentView[FLAGS] |= 4 /* Dirty */;\n        currentView = /** @type {?} */ ((currentView[PARENT]));\n    }\n    currentView[FLAGS] |= 4 /* Dirty */;\n    ngDevMode && assertDefined(currentView[CONTEXT], 'rootContext should be defined');\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (currentView[CONTEXT]);\n    scheduleTick(rootContext, 1 /* DetectChanges */);\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nexport function scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    var nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        var res_1 = void 0;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                var playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE; /** @type {?} */\n            ((res_1))(null);\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    /** @type {?} */\n    var rootView = getRootView(component);\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (rootView[CONTEXT]);\n    tickRootContext(rootContext);\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (var i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        var rootComponent = rootContext.components[i];\n        renderComponentOrTemplate(/** @type {?} */ ((readPatchedLViewData(rootComponent))), rootComponent, 2 /* Update */);\n    }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    detectChangesInternal(/** @type {?} */ ((getComponentViewByInstance(component))), component, null);\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lViewData The view which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChangesInRootView(lViewData) {\n    tickRootContext(/** @type {?} */ (lViewData[CONTEXT]));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChanges(component);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lViewData The view which the change detection should be checked on.\n * @return {?}\n */\nexport function checkNoChangesInRootView(lViewData) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lViewData);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @param {?} rf\n * @return {?}\n */\nfunction detectChangesInternal(hostView, component, rf) {\n    /** @type {?} */\n    var hostTView = hostView[TVIEW];\n    /** @type {?} */\n    var oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    var templateFn = /** @type {?} */ ((hostTView.template));\n    /** @type {?} */\n    var viewQuery = hostTView.viewQuery;\n    try {\n        namespaceHTML();\n        createViewQuery(viewQuery, rf, hostView[FLAGS], component);\n        templateFn(rf || getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView, rf);\n        updateViewQuery(viewQuery, hostView[FLAGS], component);\n    }\n    finally {\n        leaveView(oldView, rf === 1 /* Create */);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} renderFlags\n * @param {?} viewFlags\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, renderFlags, viewFlags, component) {\n    if (viewQuery && (renderFlags === 1 /* Create */ ||\n        (renderFlags === null && (viewFlags & 1 /* CreationMode */)))) {\n        viewQuery(1 /* Create */, component);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} flags\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, flags, component) {\n    if (viewQuery && flags & 2 /* Update */) {\n        viewQuery(2 /* Update */, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @template T\n * @param {?} component Component to mark as dirty.\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    markViewDirty(getComponentViewByInstance(component));\n}\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    return bindingUpdated(getViewData()[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    var different = false;\n    for (var i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(getViewData()[BINDING_INDEX]++, values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var content = values[0];\n    for (var i = 1; i < values.length; i += 2) {\n        content += stringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    var different = bindingUpdated(getViewData()[BINDING_INDEX]++, v0);\n    return different ? prefix + stringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated2(viewData[BINDING_INDEX], v0, v1);\n    viewData[BINDING_INDEX] += 2;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated3(viewData[BINDING_INDEX], v0, v1, v2);\n    viewData[BINDING_INDEX] += 3;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    viewData[BINDING_INDEX] += 4;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated(viewData[BINDING_INDEX] + 4, v4) || different;\n    viewData[BINDING_INDEX] += 5;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated2(viewData[BINDING_INDEX] + 4, v4, v5) || different;\n    viewData[BINDING_INDEX] += 6;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated3(viewData[BINDING_INDEX] + 4, v4, v5, v6) || different;\n    viewData[BINDING_INDEX] += 7;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated4(viewData[BINDING_INDEX] + 4, v4, v5, v6, v7) || different;\n    viewData[BINDING_INDEX] += 8;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + i6 + stringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n    }\n    getViewData()[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nexport function reference(index) {\n    /** @type {?} */\n    var contextViewData = getContextViewData();\n    return loadInternal(index, contextViewData);\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nexport function loadQueryList(queryListIdx) {\n    /** @type {?} */\n    var viewData = getViewData();\n    ngDevMode && assertDefined(viewData[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    ngDevMode && assertDataInRange(queryListIdx, /** @type {?} */ ((viewData[CONTENT_QUERIES])));\n    return /** @type {?} */ ((viewData[CONTENT_QUERIES]))[queryListIdx];\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    return loadInternal(index, getViewData());\n}\n/**\n * Gets the current binding value.\n * @param {?} bindingIndex\n * @return {?}\n */\nexport function getBinding(bindingIndex) {\n    /** @type {?} */\n    var viewData = getViewData();\n    ngDevMode && assertDataInRange(viewData[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(viewData[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return viewData[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(bindingIndex, value) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var checkNoChangesMode = getCheckNoChangesMode();\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode && assertLessThan(bindingIndex, viewData.length, \"Slot should have been initialized to NO_CHANGE\");\n    if (viewData[bindingIndex] === NO_CHANGE) {\n        viewData[bindingIndex] = value;\n    }\n    else if (isDifferent(viewData[bindingIndex], value, checkNoChangesMode)) {\n        throwErrorIfNoChangesMode(getCreationMode(), checkNoChangesMode, viewData[bindingIndex], value);\n        viewData[bindingIndex] = value;\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/**\n * Updates binding and returns the value.\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function updateBinding(bindingIndex, value) {\n    return getViewData()[bindingIndex] = value;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    var different = bindingUpdated(bindingIndex, exp1);\n    return bindingUpdated(bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nexport function bindingUpdated3(bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    var different = bindingUpdated2(bindingIndex, exp1, exp2);\n    return bindingUpdated(bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    var different = bindingUpdated2(bindingIndex, exp1, exp2);\n    return bindingUpdated2(bindingIndex + 2, exp3, exp4) || different;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function directiveInject(token, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    return getOrCreateInjectable(/** @type {?} */ (getPreviousOrParentTNode()), getViewData(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @param {?} currentDirectiveIndex\n * @return {?}\n */\nexport function registerContentQuery(queryList, currentDirectiveIndex) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n    if (getFirstTemplatePass()) {\n        /** @type {?} */\n        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n        if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n        }\n    }\n}\n/** @type {?} */\nexport var CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode.flags, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function delegateToClassInput(tNode) {\n    return tNode.flags & 32768 /* hasClassInput */;\n}\n//# sourceMappingURL=instructions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nexport function throwCyclicDependencyError(token) {\n    throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nexport function throwMultipleComponentError(tNode) {\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} checkNoChangesMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nexport function throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, oldValue, currValue) {\n    if (checkNoChangesMode) {\n        /** @type {?} */\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getClosureSafeProperty } from '../util/property';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@publicApi\n * @record\n */\nexport function ForwardRefFn() { }\n/** @type {?} */\nvar __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    /** @type {?} */\n    var fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=forward_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectInjector } from '../render3/di';\nimport { stringify } from '../util';\nimport { noop } from '../util/noop';\nimport { getClosureSafeProperty } from '../util/property';\nimport { defineInjectable } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { inject } from './injector_compatibility';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @type {?} */\nexport var SOURCE = '__source';\n/** @type {?} */\nvar _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nexport var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/** *\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n  @type {?} */\nexport var INJECTOR = new InjectionToken('INJECTOR');\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NullInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    Injector.create = /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */\n    /** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n        providedIn: /** @type {?} */ ('any'),\n        factory: function () { return inject(INJECTOR); },\n    });\n    /**\n     * \\@internal\n     */\n    Injector.__NG_ELEMENT_ID__ = function () { return SWITCH_INJECTOR_FACTORY(); };\n    return Injector;\n}());\nexport { Injector };\nif (false) {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Injector.ngInjectableDef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Injector.__NG_ELEMENT_ID__;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?} The instance from the injector if defined, otherwise the `notFoundValue`.\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\n/** @type {?} */\nexport var SWITCH_INJECTOR_FACTORY__POST_R3__ = function () {\n    return injectInjector();\n};\n/** @type {?} */\nvar SWITCH_INJECTOR_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_INJECTOR_FACTORY = SWITCH_INJECTOR_FACTORY__PRE_R3__;\n/** @type {?} */\nvar IDENT = function (value) {\n    return value;\n};\nvar Éµ0 = IDENT;\n/** @type {?} */\nvar EMPTY = /** @type {?} */ ([]);\n/** @type {?} */\nvar CIRCULAR = IDENT;\n/** @type {?} */\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar Éµ1 = MULTI_PROVIDER_FN;\n/** @type {?} */\nexport var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n/** @type {?} */\nvar NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nvar OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\n/** @type {?} */\nvar NULL_INJECTOR = Injector.NULL;\n/** @type {?} */\nvar NEW_LINE = /\\n/gm;\n/** @type {?} */\nvar NO_NEW_LINE = 'Éµ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        var records = this._records = new Map();\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        records.set(INJECTOR, /** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    StaticInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = 0 /* Default */; }\n        /** @type {?} */\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            /** @type {?} */\n            var tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StaticInjector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tokens = /** @type {?} */ ([]);\n        /** @type {?} */\n        var records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nif (false) {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /** @type {?} */\n    StaticInjector.prototype._records;\n}\n/** @typedef {?} */\nvar SupportedProvider;\n/**\n * @record\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.fn;\n/** @type {?} */\nRecord.prototype.useNew;\n/** @type {?} */\nRecord.prototype.deps;\n/** @type {?} */\nRecord.prototype.value;\n/**\n * @record\n */\nfunction DependencyRecord() { }\n/** @type {?} */\nDependencyRecord.prototype.token;\n/** @type {?} */\nDependencyRecord.prototype.options;\n/** @typedef {?} */\nvar TokenPath;\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    var deps = computeDeps(provider);\n    /** @type {?} */\n    var fn = IDENT;\n    /** @type {?} */\n    var value = EMPTY;\n    /** @type {?} */\n    var useNew = false;\n    /** @type {?} */\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (/** @type {?} */ (provider)).useValue;\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        fn = (/** @type {?} */ (provider)).useFactory;\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        // Just use IDENT\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            /** @type {?} */\n            var token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                /** @type {?} */\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = /** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    }));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    /** @type {?} */\n    var value;\n    if (record && !(flags & 4 /* SkipSelf */)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            var obj = undefined;\n            /** @type {?} */\n            var useNew = record.useNew;\n            /** @type {?} */\n            var fn = record.fn;\n            /** @type {?} */\n            var depRecords = record.deps;\n            /** @type {?} */\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    var depRecord = depRecords[i];\n                    /** @type {?} */\n                    var options = depRecord.options;\n                    /** @type {?} */\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, childRecord, records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\n                }\n            }\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & 2 /* Self */)) {\n        value = parent.get(token, notFoundValue, 0 /* Default */);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    var deps = EMPTY;\n    /** @type {?} */\n    var providerDeps = (/** @type {?} */ (provider)).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            var options = 6 /* Default */;\n            /** @type {?} */\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = (/** @type {?} */ (annotation)).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        var parts = /** @type {?} */ ([]);\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\nexport { Éµ0, Éµ1 };\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChanges, checkNoChangesInRootView, detectChanges, detectChangesInRootView, markViewDirty, storeCleanupFn, viewAttached } from './instructions';\nimport { FLAGS, PARENT } from './interfaces/view';\nimport { destroyLView } from './node_manipulation';\nimport { getRendererFactory } from './state';\n/**\n * @record\n */\nexport function viewEngine_ChangeDetectorRef_interface() { }\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nViewRef = /** @class */ (function () {\n    function ViewRef(_view, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._view = _view;\n    }\n    Object.defineProperty(ViewRef.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._context ? this._context : this._lookUpContext(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return (this._view[FLAGS] & 32 /* Destroyed */) === 32 /* Destroyed */;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._viewContainerRef && viewAttached(this._view)) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._view);\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { storeCleanupFn(this._view, callback); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.markForCheck = /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { markViewDirty(this._view); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.detach = /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view[FLAGS] &= ~8 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.reattach = /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view[FLAGS] |= 8 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    ViewRef.prototype.detectChanges = /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var rendererFactory = getRendererFactory();\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        detectChanges(this.context);\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n    };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    ViewRef.prototype.checkNoChanges = /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    function () { checkNoChanges(this.context); };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) { this._viewContainerRef = vcRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () { this._appRef = null; };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) { this._appRef = appRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype._lookUpContext = /**\n     * @return {?}\n     */\n    function () {\n        return this._context = /** @type {?} */ (((this._view[PARENT]))[this._componentIndex]);\n    };\n    return ViewRef;\n}());\n/**\n * @template T\n */\nexport { ViewRef };\nif (false) {\n    /** @type {?} */\n    ViewRef.prototype._appRef;\n    /** @type {?} */\n    ViewRef.prototype._viewContainerRef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._view;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._tViewNode;\n    /** @type {?} */\n    ViewRef.prototype.rootNodes;\n    /** @type {?} */\n    ViewRef.prototype._context;\n    /** @type {?} */\n    ViewRef.prototype._componentIndex;\n}\n/**\n * \\@internal\n * @template T\n */\nvar /**\n * \\@internal\n * @template T\n */\nRootViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(RootViewRef, _super);\n    function RootViewRef(_view) {\n        var _this = _super.call(this, _view, null, -1) || this;\n        _this._view = _view;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () { detectChangesInRootView(this._view); };\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { checkNoChangesInRootView(this._view); };\n    return RootViewRef;\n}(ViewRef));\n/**\n * \\@internal\n * @template T\n */\nexport { RootViewRef };\nif (false) {\n    /** @type {?} */\n    RootViewRef.prototype._view;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NullInjector } from '../di/injector';\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { assertDefined, assertGreaterThan, assertLessThan } from './assert';\nimport { getOrCreateInjectable, getParentInjectorLocation } from './di';\nimport { addToViewTree, createEmbeddedViewAndNode, createLContainer, renderEmbeddedTemplate } from './instructions';\nimport { ACTIVE_INDEX, NATIVE, VIEWS } from './interfaces/container';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { CONTEXT, HOST_NODE, QUERIES, RENDERER } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { addRemoveViewFromContainer, appendChild, detachView, findComponentView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode, removeView } from './node_manipulation';\nimport { getPreviousOrParentTNode, getRenderer, getViewData } from './state';\nimport { getComponentViewByIndex, getNativeByTNode, getParentInjectorTNode, getParentInjectorView, hasParentInjector, isComponent, isLContainer, isRootView } from './util';\nimport { ViewRef } from './view_ref';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getViewData());\n}\n/** @type {?} */\nvar R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nexport function createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ElementRef_, _super);\n            function ElementRef_() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return ElementRef_;\n        }(ElementRefToken));\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n/** @type {?} */\nvar R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getViewData());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nexport function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = /** @class */ (function (_super) {\n            tslib_1.__extends(TemplateRef_, _super);\n            function TemplateRef_(_declarationParentView, elementRef, _tView, _renderer, _queries, _injectorIndex) {\n                var _this = _super.call(this) || this;\n                _this._declarationParentView = _declarationParentView;\n                _this.elementRef = elementRef;\n                _this._tView = _tView;\n                _this._renderer = _renderer;\n                _this._queries = _queries;\n                _this._injectorIndex = _injectorIndex;\n                return _this;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            TemplateRef_.prototype.createEmbeddedView = /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            function (context, container, hostTNode, hostView, index) {\n                /** @type {?} */\n                var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._renderer, this._queries, this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, /** @type {?} */ ((hostView)), /** @type {?} */ ((index)), /** @type {?} */ ((hostTNode)).index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context, 1 /* Create */);\n                /** @type {?} */\n                var viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = /** @type {?} */ (lView[HOST_NODE]);\n                return viewRef;\n            };\n            return TemplateRef_;\n        }(TemplateRefToken));\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        var hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), /** @type {?} */ (hostTNode.tViews), getRenderer(), hostContainer[QUERIES], hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nvar R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    var previousTNode = /** @type {?} */ (getPreviousOrParentTNode());\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getViewData());\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _hostView) {\n        this._tNode = _tNode;\n        this._hostView = _hostView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NodeInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._hostView, token, notFoundValue);\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nif (false) {\n    /** @type {?} */\n    NodeInjector.prototype._tNode;\n    /** @type {?} */\n    NodeInjector.prototype._hostView;\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nexport function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ViewContainerRef_, _super);\n            function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                var _this = _super.call(this) || this;\n                _this._lContainer = _lContainer;\n                _this._hostTNode = _hostTNode;\n                _this._hostView = _hostView;\n                _this._viewRefs = [];\n                return _this;\n            }\n            Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () {\n                    return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                /** @deprecated No replacement */\n                get: /**\n                 * @deprecated No replacement\n                 * @return {?}\n                 */\n                function () {\n                    /** @type {?} */\n                    var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                    /** @type {?} */\n                    var parentView = getParentInjectorView(parentLocation, this._hostView);\n                    /** @type {?} */\n                    var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                    return !hasParentInjector(parentLocation) || parentTNode == null ?\n                        new NullInjector() :\n                        new NodeInjector(parentTNode, parentView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.clear = /**\n             * @return {?}\n             */\n            function () {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            };\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.get = /**\n             * @param {?} index\n             * @return {?}\n             */\n            function (index) { return this._viewRefs[index] || null; };\n            Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () { return this._lContainer[VIEWS].length; },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.createEmbeddedView = /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            function (templateRef, context, index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                var viewRef = (/** @type {?} */ (templateRef))\n                    .createEmbeddedView(context || /** @type {?} */ ({}), this._lContainer, this._hostTNode, this._hostView, adjustedIdx);\n                (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.createComponent = /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                var contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && contextInjector) {\n                    ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n                }\n                /** @type {?} */\n                var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.insert = /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            function (viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                var lView = /** @type {?} */ (((/** @type {?} */ (viewRef))._view));\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index);\n                insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n                /** @type {?} */\n                var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.move = /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            function (viewRef, newIndex) {\n                /** @type {?} */\n                var index = this.indexOf(viewRef);\n                this.detach(index);\n                this.insert(viewRef, this._adjustIndex(newIndex));\n                return viewRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.indexOf = /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.remove = /**\n             * @param {?=} index\n             * @return {?}\n             */\n            function (index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, this._hostTNode, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            };\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.detach = /**\n             * @param {?=} index\n             * @return {?}\n             */\n            function (index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index, -1);\n                detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n                return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\n            };\n            /**\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            ViewContainerRef_.prototype._adjustIndex = /**\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            function (index, shift) {\n                if (shift === void 0) { shift = 0; }\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            };\n            return ViewContainerRef_;\n        }(ViewContainerRefToken));\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    var lContainer;\n    /** @type {?} */\n    var slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        var commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            var renderer = hostView[RENDERER];\n            /** @type {?} */\n            var hostNative = /** @type {?} */ ((getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            var parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, /** @type {?} */ ((parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostTNode, hostView, commentNode, true);\n        addToViewTree(hostView, /** @type {?} */ (hostTNode.index), lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getViewData(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nexport function createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        var componentIndex = hostTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return /** @type {?} */ ((null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return /** @type {?} */ (renderer);\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nexport function injectRenderer2() {\n    return getOrCreateRenderer2(getViewData());\n}\n//# sourceMappingURL=view_engine_compatibility.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { assertDefined } from './assert';\nimport { discoverDirectives, discoverLocalRefs, getContext, isComponentInstance } from './context_discovery';\nimport { CONTEXT, FLAGS, PARENT, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, readPatchedLViewData } from './util';\nimport { NodeInjector } from './view_engine_compatibility';\n/**\n * Returns the component instance associated with the target.\n *\n * If a DOM is used then it will return the component that\n *    owns the view where the element is situated.\n * If a component instance is used then it will return the\n *    instance of the parent component depending on where\n *    the component instance is exists in a template.\n * If a directive instance is used then it will return the\n *    component that contains that directive in it's template.\n * @template T\n * @param {?} target\n * @return {?}\n */\nexport function getComponent(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.component === undefined) {\n        /** @type {?} */\n        var lViewData = context.lViewData;\n        while (lViewData) {\n            /** @type {?} */\n            var ctx = /** @type {?} */ (((/** @type {?} */ ((lViewData))[CONTEXT])));\n            if (ctx && isComponentInstance(ctx)) {\n                context.component = ctx;\n                break;\n            }\n            lViewData = lViewData[FLAGS] & 64 /* IsRoot */ ? null : /** @type {?} */ ((/** @type {?} */ ((lViewData))[PARENT]));\n        }\n        if (context.component === undefined) {\n            context.component = null;\n        }\n    }\n    return /** @type {?} */ (context.component);\n}\n/**\n * Returns the host component instance associated with the target.\n *\n * This will only return a component instance of the DOM node\n * contains an instance of a component on it.\n * @template T\n * @param {?} target\n * @return {?}\n */\nexport function getHostComponent(target) {\n    /** @type {?} */\n    var context = loadContext(target);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (context.lViewData[TVIEW].data[context.nodeIndex]);\n    if (tNode.flags & 4096 /* isComponent */) {\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(context.nodeIndex, context.lViewData);\n        return /** @type {?} */ ((componentView[CONTEXT]));\n    }\n    return null;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n * @param {?} target\n * @return {?}\n */\nexport function getRootContext(target) {\n    /** @type {?} */\n    var lViewData = Array.isArray(target) ? target : /** @type {?} */ ((loadContext(target))).lViewData;\n    /** @type {?} */\n    var rootLViewData = getRootView(lViewData);\n    return /** @type {?} */ (rootLViewData[CONTEXT]);\n}\n/**\n * Returns a list of all the components in the application\n * that are have been bootstrapped.\n * @param {?} target\n * @return {?}\n */\nexport function getRootComponents(target) {\n    return getRootContext(target).components.slice();\n}\n/**\n * Returns the injector instance that is associated with\n * the element, component or directive.\n * @param {?} target\n * @return {?}\n */\nexport function getInjector(target) {\n    /** @type {?} */\n    var context = loadContext(target);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (context.lViewData[TVIEW].data[context.nodeIndex]);\n    return new NodeInjector(tNode, context.lViewData);\n}\n/**\n * Returns a list of all the directives that are associated\n * with the underlying target element.\n * @param {?} target\n * @return {?}\n */\nexport function getDirectives(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.directives === undefined) {\n        context.directives = discoverDirectives(context.nodeIndex, context.lViewData, false);\n    }\n    return context.directives || [];\n}\n/**\n * Returns LContext associated with a target passed as an argument.\n * Throws if a given target doesn't have associated LContext.\n * @param {?} target\n * @return {?}\n */\nexport function loadContext(target) {\n    /** @type {?} */\n    var context = getContext(target);\n    if (!context) {\n        throw new Error(ngDevMode ? 'Unable to find the given context data for the given target' :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param {?} componentOrView any component or view\n * @return {?}\n */\nexport function getRootView(componentOrView) {\n    /** @type {?} */\n    var lViewData;\n    if (Array.isArray(componentOrView)) {\n        ngDevMode && assertDefined(componentOrView, 'lViewData');\n        lViewData = /** @type {?} */ (componentOrView);\n    }\n    else {\n        ngDevMode && assertDefined(componentOrView, 'component');\n        lViewData = /** @type {?} */ ((readPatchedLViewData(componentOrView)));\n    }\n    while (lViewData && !(lViewData[FLAGS] & 64 /* IsRoot */)) {\n        lViewData = /** @type {?} */ ((lViewData[PARENT]));\n    }\n    return lViewData;\n}\n/**\n *  Retrieve map of local references (local reference name => element or directive instance).\n * @param {?} target\n * @return {?}\n */\nexport function getLocalRefs(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lViewData, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n//# sourceMappingURL=discovery_utils.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { global } from '../util';\nimport { getComponent, getDirectives, getHostComponent, getInjector, getRootComponents } from './discovery_utils';\n/** *\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n  @type {?} */\nexport var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/** @type {?} */\nvar _published = false;\n/**\n * @return {?}\n */\nexport function publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getHostComponent', getHostComponent);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n    }\n}\n/**\n * Publishes the given function to `window.ngDevMode` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nexport function publishGlobalUtil(name, fn) {\n    /** @type {?} */\n    var w = /** @type {?} */ ((global));\n    if (w) {\n        /** @type {?} */\n        var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n//# sourceMappingURL=publish_global_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertComponentType, assertDefined } from './assert';\nimport { getComponentViewByInstance } from './context_discovery';\nimport { getComponentDef } from './definition';\nimport { diPublicInInjector, getOrCreateNodeInjectorForNode } from './di';\nimport { queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { CLEAN_PROMISE, createLViewData, createNodeAtIndex, createTView, getOrCreateTView, initNodeFlags, instantiateRootComponent, locateHostElement, prefillHostVars, queueComponentIndexForCheck, refreshDescendantViews } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { CONTEXT, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, TVIEW } from './interfaces/view';\nimport { publishDefaultGlobalUtils } from './publish_global_util';\nimport { enterView, leaveView, resetComponentState } from './state';\nimport { defaultScheduler, getRootView, readElementValue, readPatchedLViewData, stringify } from './util';\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nexport function CreateComponentOptions() { }\n/**\n * Which renderer factory to use.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.rendererFactory;\n/**\n * A custom sanitizer instance\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.sanitizer;\n/**\n * A custom animation player handler\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.playerHandler;\n/**\n * Host element on which the component will be bootstrapped. If not specified,\n * the component definition's `tag` is used to query the existing DOM for the\n * element to bootstrap.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.host;\n/**\n * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.injector;\n/**\n * List of features to be applied to the created component. Features are simply\n * functions that decorate a component with a certain behavior.\n *\n * Typically, the features in this list are features that cannot be added to the\n * other features list in the component definition because they rely on other factors.\n *\n * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n * to root components in a tree-shakable way. It cannot be added to the component\n * features list because there's no way of knowing when the component will be used as\n * a root component.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.hostFeatures;\n/**\n * A function which is used to schedule change detection work in the future.\n *\n * When marking components as dirty, it is necessary to schedule the work of\n * change detection in the future. This is done to coalesce multiple\n * {\\@link markDirty} calls into a single changed detection processing.\n *\n * The default value of the scheduler is the `requestAnimationFrame` function.\n *\n * It is also useful to override this function for testing purposes.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.scheduler;\n/** @typedef {?} */\nvar HostFeature;\n/** @type {?} */\nexport var NULL_INJECTOR = {\n    get: function (token, notFoundValue) {\n        throw new Error('NullInjector: Not found: ' + stringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nexport function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n    if (opts === void 0) { opts = {}; }\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    var sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    var componentDef = /** @type {?} */ ((getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    /** @type {?} */\n    var componentTag = /** @type {?} */ (((/** @type {?} */ ((componentDef.selectors))[0]))[0]);\n    /** @type {?} */\n    var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    var rootFlags = componentDef.onPush ? 4 /* Dirty */ | 64 /* IsRoot */ :\n        2 /* CheckAlways */ | 64 /* IsRoot */;\n    /** @type {?} */\n    var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    var rootView = createLViewData(renderer, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags);\n    rootView[INJECTOR] = opts.injector || null;\n    /** @type {?} */\n    var oldView = enterView(rootView, null);\n    /** @type {?} */\n    var component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        var componentView = createRootComponentView(hostRNode, componentDef, rootView, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        refreshDescendantViews(rootView, null);\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nexport function createRootComponentView(rNode, def, rootView, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    var tView = rootView[TVIEW];\n    /** @type {?} */\n    var componentView = createLViewData(renderer, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, sanitizer);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 4096 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    componentView[HOST] = rootView[HEADER_OFFSET];\n    componentView[HOST_NODE] = /** @type {?} */ (tNode);\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nexport function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    var tView = rootView[TVIEW];\n    /** @type {?} */\n    var component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n    if (tView.firstTemplatePass)\n        prefillHostVars(tView, rootView, componentDef.hostVars);\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nexport function createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nexport function LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    var rootTView = /** @type {?} */ ((readPatchedLViewData(component)))[TVIEW];\n    /** @type {?} */\n    var dirIndex = rootTView.data.length - 1;\n    queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n    queueLifecycleHooks(dirIndex << 16 /* DirectiveStartingIndexShift */ | 1, rootTView);\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext(component) {\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (getRootView(component)[CONTEXT]);\n    ngDevMode && assertDefined(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @template T\n * @param {?} component Component for which the host element should be retrieved.\n * @return {?}\n */\nexport function getHostElement(component) {\n    return /** @type {?} */ (readElementValue(getComponentViewByInstance(component)));\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param {?} component The component to return the content text for.\n * @return {?}\n */\nexport function getRenderedText(component) {\n    /** @type {?} */\n    var hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { fillProperties } from '../../util/property';\nimport { EMPTY, EMPTY_ARRAY } from '../definition';\n/**\n * Determines if a definition is a {\\@link ComponentDef} or a {\\@link DirectiveDef}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef(definition) {\n    /** @type {?} */\n    var def = /** @type {?} */ (definition);\n    return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nexport function InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    var superType = getSuperType(definition.type);\n    var _loop_1 = function () {\n        /** @type {?} */\n        var superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        var baseDef = (/** @type {?} */ (superType)).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            var writeableDef = /** @type {?} */ (definition);\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            /** @type {?} */\n            var prevHostBindings_1 = definition.hostBindings;\n            /** @type {?} */\n            var superHostBindings_1 = superDef.hostBindings;\n            if (superHostBindings_1) {\n                if (prevHostBindings_1) {\n                    definition.hostBindings = function (directiveIndex, elementIndex) {\n                        superHostBindings_1(directiveIndex, elementIndex);\n                        prevHostBindings_1(directiveIndex, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings_1;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef(definition) && isComponentDef(superDef)) {\n                /** @type {?} */\n                var prevViewQuery_1 = definition.viewQuery;\n                /** @type {?} */\n                var superViewQuery_1 = superDef.viewQuery;\n                if (superViewQuery_1) {\n                    if (prevViewQuery_1) {\n                        definition.viewQuery = function (rf, ctx) {\n                            superViewQuery_1(rf, ctx);\n                            prevViewQuery_1(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery_1;\n                    }\n                }\n            }\n            /** @type {?} */\n            var prevContentQueries_1 = definition.contentQueries;\n            /** @type {?} */\n            var superContentQueries_1 = superDef.contentQueries;\n            if (superContentQueries_1) {\n                if (prevContentQueries_1) {\n                    definition.contentQueries = function (dirIndex) {\n                        superContentQueries_1(dirIndex);\n                        prevContentQueries_1(dirIndex);\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries_1;\n                }\n            }\n            /** @type {?} */\n            var prevContentQueriesRefresh_1 = definition.contentQueriesRefresh;\n            /** @type {?} */\n            var superContentQueriesRefresh_1 = superDef.contentQueriesRefresh;\n            if (superContentQueriesRefresh_1) {\n                if (prevContentQueriesRefresh_1) {\n                    definition.contentQueriesRefresh = function (directiveIndex, queryIndex) {\n                        superContentQueriesRefresh_1(directiveIndex, queryIndex);\n                        prevContentQueriesRefresh_1(directiveIndex, queryIndex);\n                    };\n                }\n                else {\n                    definition.contentQueriesRefresh = superContentQueriesRefresh_1;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            /** @type {?} */\n            var features = superDef.features;\n            if (features) {\n                for (var _i = 0, features_1 = features; _i < features_1.length; _i++) {\n                    var feature = features_1[_i];\n                    if (feature && feature !== InheritDefinitionFeature) {\n                        (/** @type {?} */ (feature))(definition);\n                    }\n                }\n            }\n            return \"break\";\n        }\n        else {\n            /** @type {?} */\n            var superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.afterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.afterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.doCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n                definition.onInit = definition.onInit || superPrototype.onInit;\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    };\n    while (superType) {\n        var state_1 = _loop_1();\n        if (state_1 === \"break\")\n            break;\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=inherit_definition_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../../change_detection/change_detection_util';\n/** @type {?} */\nvar PRIVATE_PREFIX = '__ngOnChanges_';\n/** @typedef {?} */\nvar OnChangesExpando;\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nexport function NgOnChangesFeature(definition) {\n    /** @type {?} */\n    var declaredToMinifiedInputs = definition.declaredInputs;\n    /** @type {?} */\n    var proto = definition.type.prototype;\n    var _loop_1 = function (declaredName) {\n        if (declaredToMinifiedInputs.hasOwnProperty(declaredName)) {\n            /** @type {?} */\n            var minifiedKey = declaredToMinifiedInputs[declaredName];\n            /** @type {?} */\n            var privateMinKey_1 = PRIVATE_PREFIX + minifiedKey;\n            /** @type {?} */\n            var originalProperty = undefined;\n            /** @type {?} */\n            var checkProto = proto;\n            while (!originalProperty && checkProto &&\n                Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n                originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n                checkProto = Object.getPrototypeOf(checkProto);\n            }\n            /** @type {?} */\n            var getter = originalProperty && originalProperty.get;\n            /** @type {?} */\n            var setter_1 = originalProperty && originalProperty.set;\n            // create a getter and setter for property\n            Object.defineProperty(proto, minifiedKey, {\n                get: getter ||\n                    (setter_1 ? undefined : function () { return this[privateMinKey_1]; }),\n                set: /**\n                 * @template T\n                 * @this {?}\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) {\n                    /** @type {?} */\n                    var simpleChanges = this[PRIVATE_PREFIX];\n                    if (!simpleChanges) {\n                        simpleChanges = {};\n                        // Place where we will store SimpleChanges if there is a change\n                        Object.defineProperty(this, PRIVATE_PREFIX, { value: simpleChanges, writable: true });\n                    }\n                    /** @type {?} */\n                    var isFirstChange = !this.hasOwnProperty(privateMinKey_1);\n                    /** @type {?} */\n                    var currentChange = simpleChanges[declaredName];\n                    if (currentChange) {\n                        currentChange.currentValue = value;\n                    }\n                    else {\n                        simpleChanges[declaredName] =\n                            new SimpleChange(this[privateMinKey_1], value, isFirstChange);\n                    }\n                    if (isFirstChange) {\n                        // Create a place where the actual value will be stored and make it non-enumerable\n                        Object.defineProperty(this, privateMinKey_1, { value: value, writable: true });\n                    }\n                    else {\n                        this[privateMinKey_1] = value;\n                    }\n                    if (setter_1)\n                        setter_1.call(this, value);\n                },\n                // Make the property configurable in dev mode to allow overriding in tests\n                configurable: !!ngDevMode\n            });\n        }\n    };\n    for (var declaredName in declaredToMinifiedInputs) {\n        _loop_1(declaredName);\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n    return function () {\n        /** @type {?} */\n        var simpleChanges = this[PRIVATE_PREFIX];\n        if (simpleChanges != null) {\n            this.ngOnChanges(simpleChanges);\n            this[PRIVATE_PREFIX] = null;\n        }\n        if (delegateHook)\n            delegateHook.apply(this);\n    };\n}\n//# sourceMappingURL=ng_onchanges_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getInjectableDef, getInjectorDef } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { INJECTOR, NullInjector, THROW_IF_NOT_FOUND, USE_VALUE } from './injector';\nimport { inject, injectArgs, setCurrentInjector } from './injector_compatibility';\nimport { APP_ROOT } from './scope';\n/** @typedef {?} */\nvar SingleProvider;\n/** *\n * Marker which indicates that a value has not yet been created from the factory function.\n  @type {?} */\nvar NOT_YET = {};\n/** *\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n  @type {?} */\nvar CIRCULAR = {};\n/** @type {?} */\nvar EMPTY_ARRAY = /** @type {?} */ ([]);\n/** *\n * A lazily initialized NullInjector.\n  @type {?} */\nvar NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n * @record\n * @template T\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.factory;\n/** @type {?} */\nRecord.prototype.value;\n/** @type {?} */\nRecord.prototype.multi;\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nexport function createInjector(defType, parent, additionalProviders) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\nvar R3Injector = /** @class */ (function () {\n    function R3Injector(def, additionalProviders, parent) {\n        var _this = this;\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        this.destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, new Set()); });\n        additionalProviders &&\n            deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider); });\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    R3Injector.prototype.destroy = /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    function () {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this.destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    R3Injector.prototype.get = /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = 0 /* Default */; }\n        this.assertNotDestroyed();\n        /** @type {?} */\n        var previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & 4 /* SkipSelf */)) {\n                /** @type {?} */\n                var record = this.records.get(token);\n                if (record === undefined) {\n                    /** @type {?} */\n                    var def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            /** @type {?} */\n            var nextInjector = !(flags & 2 /* Self */) ? this.parent : getNullInjector();\n            return nextInjector.get(token, notFoundValue);\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    R3Injector.prototype.assertNotDestroyed = /**\n     * @return {?}\n     */\n    function () {\n        if (this.destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    };\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @return {?}\n     */\n    R3Injector.prototype.processInjectorType = /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @return {?}\n     */\n    function (defOrWrappedDef, parents) {\n        var _this = this;\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        /** @type {?} */\n        var def = getInjectorDef(defOrWrappedDef);\n        /** @type {?} */\n        var ngModule = (def == null) && (/** @type {?} */ (defOrWrappedDef)).ngModule || undefined;\n        /** @type {?} */\n        var defType = (ngModule === undefined) ? (/** @type {?} */ (defOrWrappedDef)) : ngModule;\n        /** @type {?} */\n        var providers = (ngModule !== undefined) && (/** @type {?} */ (defOrWrappedDef)).providers ||\n            EMPTY_ARRAY;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Check for circular dependencies.\n        if (parents.has(defType)) {\n            throw new Error(\"Circular dependency: type \" + stringify(defType) + \" ends up importing itself.\");\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            parents.add(defType);\n            try {\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents); });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                parents.delete(defType);\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        if (def.providers != null) {\n            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        deepForEach(providers, function (provider) { return _this.processProvider(provider); });\n    };\n    /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    R3Injector.prototype.processProvider = /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        var record = providerToRecord(provider);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            /** @type {?} */\n            var multiRecord_1 = this.records.get(token);\n            if (multiRecord_1) {\n                // It has. Throw a nice error if\n                if (multiRecord_1.multi === undefined) {\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\n                }\n            }\n            else {\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                multiRecord_1.factory = function () { return injectArgs(/** @type {?} */ ((/** @type {?} */ ((multiRecord_1)).multi))); };\n                this.records.set(token, multiRecord_1);\n            }\n            token = provider; /** @type {?} */\n            ((multiRecord_1.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            var existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(\"Mixed multi-provider for \" + stringify(token));\n            }\n        }\n        this.records.set(token, record);\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    R3Injector.prototype.hydrate = /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    function (token, record) {\n        if (record.value === CIRCULAR) {\n            throw new Error(\"Circular dep for \" + stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = /** @type {?} */ ((record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return /** @type {?} */ (record.value);\n    };\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    R3Injector.prototype.injectableDefInScope = /**\n     * @param {?} def\n     * @return {?}\n     */\n    function (def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    };\n    return R3Injector;\n}());\nexport { R3Injector };\nif (false) {\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * @type {?}\n     */\n    R3Injector.prototype.records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     * @type {?}\n     */\n    R3Injector.prototype.injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     * @type {?}\n     */\n    R3Injector.prototype.onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     * @type {?}\n     */\n    R3Injector.prototype.isRootInjector;\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @type {?}\n     */\n    R3Injector.prototype.destroyed;\n    /** @type {?} */\n    R3Injector.prototype.parent;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefFactory(token) {\n    /** @type {?} */\n    var injectableDef = getInjectableDef(/** @type {?} */ (token));\n    if (injectableDef === null) {\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        // TODO(alxhub): there should probably be a strict mode which throws here instead of assuming a\n        // no-args constructor.\n        return function () { return new (/** @type {?} */ (token))(); };\n    }\n    return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction providerToRecord(provider) {\n    /** @type {?} */\n    var factory = providerToFactory(provider);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @return {?}\n */\nexport function providerToFactory(provider) {\n    /** @type {?} */\n    var factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = function () { return resolveForwardRef(provider.useValue); };\n        }\n        else if (isExistingProvider(provider)) {\n            factory = function () { return inject(resolveForwardRef(provider.useExisting)); };\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = function () { return provider.useFactory.apply(provider, injectArgs(provider.deps || [])); };\n        }\n        else {\n            /** @type {?} */\n            var classRef_1 = resolveForwardRef((/** @type {?} */ (provider)).useClass || provider.provide);\n            if (hasDeps(provider)) {\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), [void 0].concat(injectArgs(provider.deps))))(); };\n            }\n            else {\n                return injectableDefFactory(classRef_1);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?=} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi) {\n    if (value === void 0) { value = NOT_YET; }\n    if (multi === void 0) { multi = false; }\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(/** @type {?} */ (value)).useExisting;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(/** @type {?} */ (value)).useFactory;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!(/** @type {?} */ (value)).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return typeof value === 'object' && value != null && (/** @type {?} */ (value)).ngOnDestroy &&\n        typeof (/** @type {?} */ (value)).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n//# sourceMappingURL=r3_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { isTypeProvider, providerToFactory } from '../di/r3_injector';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode } from './di';\nimport { directiveInject } from './instructions';\nimport { NodeInjectorFactory } from './interfaces/injector';\nimport { TVIEW } from './interfaces/view';\nimport { getPreviousOrParentTNode, getViewData } from './state';\nimport { isComponentDef } from './util';\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nexport function providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var tView = viewData[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (var i = 0; i < provider.length; i++) {\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        var viewData = getViewData();\n        /** @type {?} */\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        var providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var beginIndex = previousOrParentTNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        var endIndex = previousOrParentTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var cptViewProvidersCount = previousOrParentTNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            /** @type {?} */\n            var factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n            /** @type {?} */\n            var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode(/** @type {?} */ (previousOrParentTNode), viewData), viewData, token);\n                tInjectables.push(token);\n                previousOrParentTNode.flags += 1 << 16 /* DirectiveStartingIndexShift */;\n                if (isViewProvider) {\n                    previousOrParentTNode.providerIndexes +=\n                        65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                viewData.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                viewData[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            /** @type {?} */\n            var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode(/** @type {?} */ (previousOrParentTNode), viewData), viewData, token);\n                /** @type {?} */\n                var factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                previousOrParentTNode.flags += 1 << 16 /* DirectiveStartingIndexShift */;\n                if (isViewProvider) {\n                    previousOrParentTNode.providerIndexes +=\n                        65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                viewData.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd(/** @type {?} */ ((lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                /** @type {?} */ ((lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    /** @type {?} */ ((multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        /** @type {?} */ ((multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (var i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve(/** @type {?} */ ((this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    var factories = /** @type {?} */ ((this.multi));\n    /** @type {?} */\n    var result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        var componentCount = /** @type {?} */ ((this.providerFactory.componentProviders));\n        /** @type {?} */\n        var multiProviders = getNodeInjectable(tData, lData, /** @type {?} */ ((/** @type {?} */ ((this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (var i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (var i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        var factory = /** @type {?} */ (((factories[i])));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    /** @type {?} */\n    var factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n//# sourceMappingURL=di_setup.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { providersResolver } from '../di_setup';\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nexport function ProvidersFeature(providers, viewProviders) {\n    if (viewProviders === void 0) { viewProviders = []; }\n    return function (definition) {\n        definition.providersResolver = function (def) {\n            return providersResolver(def, providers, viewProviders);\n        };\n    };\n}\n//# sourceMappingURL=providers_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    /** @type {?} */\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nvar ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return (/** @type {?} */ (error))[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * \\@publicApi\n * @abstract\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        /** @type {?} */\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nvar /**\n * @template C\n */\nComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactoryBoundToModule.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\n/**\n * @template C\n */\nexport { ComponentFactoryBoundToModule };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=component_factory_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectElementRef as render3InjectElementRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\nvar ElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * \\@internal\n     */\n    ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n    return ElementRef;\n}());\nexport { ElementRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ElementRef.__NG_ELEMENT_ID__;\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n/** @type {?} */\nexport var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = render3InjectElementRef;\n/** @type {?} */\nvar SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=element_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { injectRenderer2 as render3InjectRenderer2 } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nvar /**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nRenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nexport { RenderComponentType };\nif (false) {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nvar /**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nRenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nexport { RenderDebugInfo };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\n/** @type {?} */\nDirectRenderer.prototype.remove;\n/** @type {?} */\nDirectRenderer.prototype.appendChild;\n/** @type {?} */\nDirectRenderer.prototype.insertBefore;\n/** @type {?} */\nDirectRenderer.prototype.nextSibling;\n/** @type {?} */\nDirectRenderer.prototype.parentElement;\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nvar /**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nRenderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nexport { Renderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\n/** @type {?} */\nexport var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nRootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nexport { RootRenderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n * \\@publicApi\n * @record\n */\nexport function RendererType2() { }\n/**\n * A unique identifying string for the new renderer, used when creating\n * unique styles for encapsulation.\n * @type {?}\n */\nRendererType2.prototype.id;\n/**\n * The view encapsulation type, which determines how styles are applied to\n * DOM elements. One of\n * - `Emulated` (default): Emulate native scoping of styles.\n * - `Native`: Use the native encapsulation mechanism of the renderer.\n * - `ShadowDom`: Use modern [Shadow\n * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n * create a ShadowRoot for component's host element.\n * - `None`: Do not provide any template or style encapsulation.\n * @type {?}\n */\nRendererType2.prototype.encapsulation;\n/**\n * Defines CSS styles to be stored on a renderer instance.\n * @type {?}\n */\nRendererType2.prototype.styles;\n/**\n * Defines arbitrary developer-defined data to be stored on a renderer instance.\n * This is useful for renderers that delegate to other renderers.\n * @type {?}\n */\nRendererType2.prototype.data;\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nRendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nexport { RendererFactory2 };\nif (false) {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @abstract\n     * @param {?} hostElement The element to render.\n     * @param {?} type The base class to implement.\n     * @return {?} The new custom renderer instance.\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * A callback invoked when rendering has begun.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * A callback invoked when rendering has completed.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @abstract\n     * @return {?} The asynchronous result of the developer-defined function.\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nvar RendererStyleFlags2 = {\n    /**\n       * Marks a style as important.\n       */\n    Important: 1,\n    /**\n       * Marks a style as using dash case naming (this-is-dash-case).\n       */\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nvar Renderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    /**\n     * \\@internal\n     */\n    Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n    return Renderer2;\n}());\nexport { Renderer2 };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Renderer2.__NG_ELEMENT_ID__;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @abstract\n     * @param {?} name An identifying name for the new element, unique within the namespace.\n     * @param {?=} namespace The namespace for the new element.\n     * @return {?} The new element.\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @abstract\n     * @param {?} value The comment text.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @abstract\n     * @param {?} value The text string.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child node.\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child nodes.\n     * @param {?} refChild The existing child node that should precede the new node.\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} oldChild The child node to remove.\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @abstract\n     * @param {?} selectorOrNode The DOM element.\n     * @param {?=} preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @return {?} The root element.\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) { };\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node The child node to query.\n     * @return {?} The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node\n     * @return {?} The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?} value The new value.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?} value The new value.\n     * @param {?=} flags Flags for style variations. No flags are set by default.\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?=} flags Flags for style variations to remove, if set. ???\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The property name.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @abstract\n     * @param {?} node The node.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * Implement this callback to start an event listener.\n     * @abstract\n     * @param {?} target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param {?} eventName The event to listen for.\n     * @param {?} callback A handler function to invoke when the event occurs.\n     * @return {?} An \"unlisten\" function for disposing of this handler.\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n/** @type {?} */\nexport var SWITCH_RENDERER2_FACTORY__POST_R3__ = render3InjectRenderer2;\n/** @type {?} */\nvar SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n//# sourceMappingURL=api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector_compatibility';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { assertComponentType, assertDefined } from './assert';\nimport { LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext } from './component';\nimport { getComponentDef } from './definition';\nimport { createLViewData, createNodeAtIndex, createTView, createViewNode, elementCreate, locateHostElement, refreshDescendantViews } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { HEADER_OFFSET, INJECTOR, TVIEW } from './interfaces/view';\nimport { enterView, leaveView } from './state';\nimport { defaultScheduler, getTNode } from './util';\nimport { createElementRef } from './view_engine_compatibility';\nimport { RootViewRef } from './view_ref';\nvar ComponentFactoryResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryResolver, _super);\n    function ComponentFactoryResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        var componentDef = /** @type {?} */ ((getComponentDef(component)));\n        return new ComponentFactory(componentDef);\n    };\n    return ComponentFactoryResolver;\n}(viewEngine_ComponentFactoryResolver));\nexport { ComponentFactoryResolver };\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/** *\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n  @type {?} */\nexport var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/** *\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n  @type {?} */\nexport var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () { return defaultScheduler; },\n});\n/** *\n * A function used to wrap the `RendererFactory2`.\n * Used in tests to change the `RendererFactory2` into a `DebugRendererFactory2`.\n  @type {?} */\nexport var WRAP_RENDERER_FACTORY2 = new InjectionToken('WRAP_RENDERER_FACTORY2');\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nvar /**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nComponentFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory, _super);\n    function ComponentFactory(componentDef) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.componentType = componentDef.type;\n        _this.selector = /** @type {?} */ (componentDef.selectors[0][0]);\n        _this.ngContentSelectors = [];\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        /** @type {?} */\n        var rendererFactory;\n        if (ngModule) {\n            /** @type {?} */\n            var wrapper = ngModule.injector.get(WRAP_RENDERER_FACTORY2, function (v) { return v; });\n            rendererFactory = /** @type {?} */ (wrapper(ngModule.injector.get(RendererFactory2)));\n        }\n        else {\n            rendererFactory = domRendererFactory3;\n        }\n        /** @type {?} */\n        var hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        var rootFlags = this.componentDef.onPush ? 4 /* Dirty */ | 64 /* IsRoot */ :\n            2 /* CheckAlways */ | 64 /* IsRoot */;\n        /** @type {?} */\n        var rootContext = ngModule && !isInternalRootView ? ngModule.injector.get(ROOT_CONTEXT) : createRootContext();\n        /** @type {?} */\n        var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        /** @type {?} */\n        var rootView = createLViewData(renderer, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags);\n        rootView[INJECTOR] = ngModule && ngModule.injector || null;\n        /** @type {?} */\n        var oldView = enterView(rootView, null);\n        /** @type {?} */\n        var component;\n        /** @type {?} */\n        var tElementNode;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            /** @type {?} */\n            var componentView = createRootComponentView(hostRNode, this.componentDef, rootView, renderer);\n            tElementNode = /** @type {?} */ (getTNode(0, rootView));\n            // Transform the arrays of native nodes into a structure that can be consumed by the\n            // projection instruction. This is needed to support the reprojection of these nodes.\n            if (projectableNodes) {\n                /** @type {?} */\n                var index = 0;\n                /** @type {?} */\n                var tView = rootView[TVIEW];\n                /** @type {?} */\n                var projection = tElementNode.projection = [];\n                for (var i = 0; i < projectableNodes.length; i++) {\n                    /** @type {?} */\n                    var nodeList = projectableNodes[i];\n                    /** @type {?} */\n                    var firstTNode = null;\n                    /** @type {?} */\n                    var previousTNode = null;\n                    for (var j = 0; j < nodeList.length; j++) {\n                        if (tView.firstTemplatePass) {\n                            // For dynamically created components such as ComponentRef, we create a new TView for\n                            // each insert. This is not ideal since we should be sharing the TViews.\n                            // Also the logic here should be shared with `component.ts`'s `renderComponent`\n                            // method.\n                            tView.expandoStartIndex++;\n                            tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n                            tView.data.splice(index + HEADER_OFFSET, 0, null);\n                            rootView.splice(index + HEADER_OFFSET, 0, null);\n                        }\n                        /** @type {?} */\n                        var tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */ (nodeList[j]), null, null);\n                        previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n                        previousTNode = tNode;\n                    }\n                    projection.push(/** @type {?} */ ((firstTNode)));\n                }\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootView, rootContext, [LifecycleHooksFeature]);\n            refreshDescendantViews(rootView, 1 /* Create */);\n        }\n        finally {\n            leaveView(oldView, true);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        /** @type {?} */\n        var componentRef = new ComponentRef(this.componentType, component, rootView, injector, createElementRef(viewEngine_ElementRef, tElementNode, rootView));\n        if (isInternalRootView) {\n            /** @type {?} */ ((\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(viewEngine_ComponentFactory));\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nexport { ComponentFactory };\nif (false) {\n    /** @type {?} */\n    ComponentFactory.prototype.selector;\n    /** @type {?} */\n    ComponentFactory.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactory.prototype.componentDef;\n}\n/** @type {?} */\nvar componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @return {?} The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nvar /**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nComponentRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, rootView, injector, location) {\n        var _this = _super.call(this) || this;\n        _this.location = location;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(rootView);\n        _this.hostView._tViewNode = createViewNode(-1, rootView);\n        _this.injector = injector;\n        _this.componentType = componentType;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ComponentRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return ComponentRef;\n}(viewEngine_ComponentRef));\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nexport { ComponentRef };\nif (false) {\n    /** @type {?} */\n    ComponentRef.prototype.destroyCbs;\n    /** @type {?} */\n    ComponentRef.prototype.injector;\n    /** @type {?} */\n    ComponentRef.prototype.instance;\n    /** @type {?} */\n    ComponentRef.prototype.hostView;\n    /** @type {?} */\n    ComponentRef.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef.prototype.componentType;\n    /** @type {?} */\n    ComponentRef.prototype.location;\n}\n//# sourceMappingURL=component_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NO_CHANGE } from '../../src/render3/tokens';\nimport { assertEqual, assertLessThan } from './assert';\nimport { adjustBlueprintForNewNode, bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, createNodeAtIndex, load } from './instructions';\nimport { NATIVE, RENDER_PARENT } from './interfaces/container';\nimport { BINDING_INDEX, HEADER_OFFSET, HOST_NODE, TVIEW } from './interfaces/view';\nimport { appendChild, createTextNode, removeChild } from './node_manipulation';\nimport { getRenderer, getViewData, resetComponentState } from './state';\nimport { getNativeByIndex, getNativeByTNode, getTNode, isLContainer, stringify } from './util';\n/** @enum {number} */\nvar I18nInstructions = {\n    Text: 536870912,\n    Element: 1073741824,\n    Expression: 1610612736,\n    TemplateRoot: -2147483648,\n    Any: -1610612736,\n    CloseNode: -1073741824,\n    RemoveNode: -536870912,\n    /** Used to decode the number encoded with the instruction. */\n    IndexMask: 536870911,\n    /** Used to test the type of instruction. */\n    InstructionMask: -536870912,\n};\nexport { I18nInstructions };\n/** @typedef {?} */\nvar I18nInstruction;\nexport { I18nInstruction };\n/** @typedef {?} */\nvar I18nExpInstruction;\nexport { I18nExpInstruction };\n/** @typedef {?} */\nvar PlaceholderMap;\nexport { PlaceholderMap };\n/** @type {?} */\nvar i18nTagRegex = /{\\$([^}]+)}/g;\n/**\n * Takes a translation string, the initial list of placeholders (elements and expressions) and the\n * indexes of their corresponding expression nodes to return a list of instructions for each\n * template function.\n *\n * Because embedded templates have different indexes for each placeholder, each parameter (except\n * the translation) is an array, where each value corresponds to a different template, by order of\n * appearance.\n *\n * @param {?} translation A translation string where placeholders are represented by `{$name}`\n * @param {?} elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param {?=} expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param {?=} templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param {?=} lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @return {?} A list of instructions used to translate each template.\n */\nexport function i18nMapping(translation, elements, expressions, templateRoots, lastChildIndex) {\n    /** @type {?} */\n    var translationParts = translation.split(i18nTagRegex);\n    /** @type {?} */\n    var nbTemplates = templateRoots ? templateRoots.length + 1 : 1;\n    /** @type {?} */\n    var instructions = (new Array(nbTemplates)).fill(undefined);\n    generateMappingInstructions(0, 0, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex);\n    return instructions;\n}\n/**\n * Internal function that reads the translation parts and generates a set of instructions for each\n * template.\n *\n * See `i18nMapping()` for more details.\n *\n * @param {?} tmplIndex The order of appearance of the template.\n * 0 for the root template, following indexes match the order in `templateRoots`.\n * @param {?} partIndex The current index in `translationParts`.\n * @param {?} translationParts The translation string split into an array of placeholders and text\n * elements.\n * @param {?} instructions The current list of instructions to update.\n * @param {?} elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param {?=} expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param {?=} templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param {?=} lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @return {?} the current index in `translationParts`\n */\nfunction generateMappingInstructions(tmplIndex, partIndex, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex) {\n    /** @type {?} */\n    var tmplInstructions = [];\n    /** @type {?} */\n    var phVisited = [];\n    /** @type {?} */\n    var openedTagCount = 0;\n    /** @type {?} */\n    var maxIndex = 0;\n    /** @type {?} */\n    var currentElements = elements && elements[tmplIndex] ? elements[tmplIndex] : null;\n    /** @type {?} */\n    var currentExpressions = expressions && expressions[tmplIndex] ? expressions[tmplIndex] : null;\n    instructions[tmplIndex] = tmplInstructions;\n    for (; partIndex < translationParts.length; partIndex++) {\n        /** @type {?} */\n        var value = translationParts[partIndex];\n        // Odd indexes are placeholders\n        if (partIndex & 1) {\n            /** @type {?} */\n            var phIndex = void 0;\n            if (currentElements && currentElements[value] !== undefined) {\n                phIndex = currentElements[value];\n                /** @type {?} */\n                var templateRootIndex = templateRoots ? templateRoots.indexOf(value) : -1;\n                if (templateRootIndex !== -1 && (templateRootIndex + 1) !== tmplIndex) {\n                    // This is a template root, it has no closing tag, not treating it as an element\n                    tmplInstructions.push(phIndex | -2147483648 /* TemplateRoot */);\n                }\n                else {\n                    tmplInstructions.push(phIndex | 1073741824 /* Element */);\n                    openedTagCount++;\n                }\n                phVisited.push(value);\n            }\n            else if (currentExpressions && currentExpressions[value] !== undefined) {\n                phIndex = currentExpressions[value];\n                // The placeholder represents an expression, add an instruction to move it\n                tmplInstructions.push(phIndex | 1610612736 /* Expression */);\n                phVisited.push(value);\n            }\n            else {\n                // It is a closing tag\n                tmplInstructions.push(-1073741824 /* CloseNode */);\n                if (tmplIndex > 0) {\n                    openedTagCount--;\n                    // If we have reached the closing tag for this template, exit the loop\n                    if (openedTagCount === 0) {\n                        break;\n                    }\n                }\n            }\n            if (phIndex !== undefined && phIndex > maxIndex) {\n                maxIndex = phIndex;\n            }\n            if (templateRoots) {\n                /** @type {?} */\n                var newTmplIndex = templateRoots.indexOf(value) + 1;\n                if (newTmplIndex !== 0 && newTmplIndex !== tmplIndex) {\n                    partIndex = generateMappingInstructions(newTmplIndex, partIndex, translationParts, instructions, elements, expressions, templateRoots, lastChildIndex);\n                }\n            }\n        }\n        else if (value) {\n            // It's a non-empty string, create a text node\n            tmplInstructions.push(536870912 /* Text */, value);\n        }\n    }\n    // Add instructions to remove elements that are not used in the translation\n    if (elements) {\n        /** @type {?} */\n        var tmplElements = elements[tmplIndex];\n        if (tmplElements) {\n            /** @type {?} */\n            var phKeys = Object.keys(tmplElements);\n            for (var i = 0; i < phKeys.length; i++) {\n                /** @type {?} */\n                var ph = phKeys[i];\n                if (phVisited.indexOf(ph) === -1) {\n                    /** @type {?} */\n                    var index = tmplElements[ph];\n                    // Add an instruction to remove the element\n                    tmplInstructions.push(index | -536870912 /* RemoveNode */);\n                    if (index > maxIndex) {\n                        maxIndex = index;\n                    }\n                }\n            }\n        }\n    }\n    // Add instructions to remove expressions that are not used in the translation\n    if (expressions) {\n        /** @type {?} */\n        var tmplExpressions = expressions[tmplIndex];\n        if (tmplExpressions) {\n            /** @type {?} */\n            var phKeys = Object.keys(tmplExpressions);\n            for (var i = 0; i < phKeys.length; i++) {\n                /** @type {?} */\n                var ph = phKeys[i];\n                if (phVisited.indexOf(ph) === -1) {\n                    /** @type {?} */\n                    var index = tmplExpressions[ph];\n                    if (ngDevMode) {\n                        assertLessThan(index.toString(2).length, 28, \"Index \" + index + \" is too big and will overflow\");\n                    }\n                    // Add an instruction to remove the expression\n                    tmplInstructions.push(index | -536870912 /* RemoveNode */);\n                    if (index > maxIndex) {\n                        maxIndex = index;\n                    }\n                }\n            }\n        }\n    }\n    if (tmplIndex === 0 && typeof lastChildIndex === 'number') {\n        // The current parent is an ng-container and it has more children after the translation that we\n        // need to append to keep the order of the DOM nodes correct\n        for (var i = maxIndex + 1; i <= lastChildIndex; i++) {\n            if (ngDevMode) {\n                assertLessThan(i.toString(2).length, 28, \"Index \" + i + \" is too big and will overflow\");\n            }\n            tmplInstructions.push(i | -1610612736 /* Any */);\n        }\n    }\n    return partIndex;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    if (ngDevMode) {\n        ngDevMode.rendererMoveNode++;\n    }\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var firstTemplatePass = viewData[TVIEW].firstTemplatePass;\n    if (firstTemplatePass) {\n        if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n            tNode.next = parentTNode.child;\n            parentTNode.child = tNode;\n        }\n        else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n            tNode.next = previousTNode.next;\n            previousTNode.next = tNode;\n        }\n        else {\n            tNode.next = null;\n        }\n        if (parentTNode !== viewData[HOST_NODE]) {\n            tNode.parent = /** @type {?} */ (parentTNode);\n        }\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    var slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} attrs\n * @return {?}\n */\nexport function i18nAttribute(index, attrs) {\n    // placeholder for i18nAttribute function\n}\n/**\n * @param {?} expression\n * @return {?}\n */\nexport function i18nExp(expression) {\n    // placeholder for i18nExp function\n}\n/**\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nexport function i18nStart(index, message, subTemplateIndex) {\n    if (subTemplateIndex === void 0) { subTemplateIndex = 0; }\n    // placeholder for i18nExp function\n}\n/**\n * @return {?}\n */\nexport function i18nEnd() {\n    // placeholder for i18nEnd function\n}\n/**\n * Takes a list of instructions generated by `i18nMapping()` to transform the template accordingly.\n *\n * @param {?} startIndex Index of the first element to translate (for instance the first child of the\n * element with the i18n attribute).\n * @param {?} instructions The list of instructions to apply on the current view.\n * @return {?}\n */\nexport function i18nApply(startIndex, instructions) {\n    /** @type {?} */\n    var viewData = getViewData();\n    if (ngDevMode) {\n        assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nApply should be called before any binding');\n    }\n    if (!instructions) {\n        return;\n    }\n    /** @type {?} */\n    var renderer = getRenderer();\n    /** @type {?} */\n    var startTNode = getTNode(startIndex, viewData);\n    /** @type {?} */\n    var localParentTNode = startTNode.parent || /** @type {?} */ ((viewData[HOST_NODE]));\n    /** @type {?} */\n    var localPreviousTNode = localParentTNode;\n    resetComponentState(); // We don't want to add to the tree with the wrong previous node\n    for (var i = 0; i < instructions.length; i++) {\n        /** @type {?} */\n        var instruction = /** @type {?} */ (instructions[i]);\n        switch (instruction & -536870912 /* InstructionMask */) {\n            case 1073741824 /* Element */:\n                /** @type {?} */\n                var elementTNode = getTNode(instruction & 536870911 /* IndexMask */, viewData);\n                localPreviousTNode = appendI18nNode(elementTNode, localParentTNode, localPreviousTNode);\n                localParentTNode = elementTNode;\n                break;\n            case 1610612736 /* Expression */:\n            case -2147483648 /* TemplateRoot */:\n            case -1610612736 /* Any */:\n                /** @type {?} */\n                var nodeIndex = instruction & 536870911 /* IndexMask */;\n                localPreviousTNode =\n                    appendI18nNode(getTNode(nodeIndex, viewData), localParentTNode, localPreviousTNode);\n                break;\n            case 536870912 /* Text */:\n                if (ngDevMode) {\n                    ngDevMode.rendererCreateTextNode++;\n                }\n                /** @type {?} */\n                var value = instructions[++i];\n                /** @type {?} */\n                var textRNode = createTextNode(value, renderer);\n                // If we were to only create a `RNode` then projections won't move the text.\n                // Create text node at the current end of viewData. Must subtract header offset because\n                // createNodeAtIndex takes a raw index (not adjusted by header offset).\n                adjustBlueprintForNewNode(viewData);\n                /** @type {?} */\n                var textTNode = createNodeAtIndex(viewData.length - 1 - HEADER_OFFSET, 3 /* Element */, textRNode, null, null);\n                localPreviousTNode = appendI18nNode(textTNode, localParentTNode, localPreviousTNode);\n                resetComponentState();\n                break;\n            case -1073741824 /* CloseNode */:\n                localPreviousTNode = localParentTNode;\n                localParentTNode = localParentTNode.parent || /** @type {?} */ ((viewData[HOST_NODE]));\n                break;\n            case -536870912 /* RemoveNode */:\n                if (ngDevMode) {\n                    ngDevMode.rendererRemoveNode++;\n                }\n                /** @type {?} */\n                var removeIndex = instruction & 536870911 /* IndexMask */;\n                /** @type {?} */\n                var removedElement = getNativeByIndex(removeIndex, viewData);\n                /** @type {?} */\n                var removedTNode = getTNode(removeIndex, viewData);\n                removeChild(removedTNode, removedElement || null, viewData);\n                /** @type {?} */\n                var slotValue = /** @type {?} */ (load(removeIndex));\n                if (isLContainer(slotValue)) {\n                    /** @type {?} */\n                    var lContainer = /** @type {?} */ (slotValue);\n                    if (removedTNode.type !== 0 /* Container */) {\n                        removeChild(removedTNode, lContainer[NATIVE] || null, viewData);\n                    }\n                    removedTNode.detached = true;\n                    lContainer[RENDER_PARENT] = null;\n                }\n                break;\n        }\n    }\n}\n/**\n * Takes a translation string and the initial list of expressions and returns a list of instructions\n * that will be used to translate an attribute.\n * Even indexes contain static strings, while odd indexes contain the index of the expression whose\n * value will be concatenated into the final translation.\n * @param {?} translation\n * @param {?} placeholders\n * @return {?}\n */\nexport function i18nExpMapping(translation, placeholders) {\n    /** @type {?} */\n    var staticText = translation.split(i18nTagRegex);\n    // odd indexes are placeholders\n    for (var i = 1; i < staticText.length; i += 2) {\n        staticText[i] = placeholders[staticText[i]];\n    }\n    return staticText;\n}\n/**\n * Checks if the value of an expression has changed and replaces it by its value in a translation,\n * or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation1(instructions, v0) {\n    /** @type {?} */\n    var different = bindingUpdated(getViewData()[BINDING_INDEX]++, v0);\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            res += stringify(v0);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 2 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation2(instructions, v0, v1) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated2(viewData[BINDING_INDEX], v0, v1);\n    viewData[BINDING_INDEX] += 2;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b1 ? v1 : v0;\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 3 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation3(instructions, v0, v1, v2) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated3(viewData[BINDING_INDEX], v0, v1, v2);\n    viewData[BINDING_INDEX] += 3;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b2 ? v2 : (b1 ? v1 : v0);\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 4 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation4(instructions, v0, v1, v2, v3) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    viewData[BINDING_INDEX] += 4;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0);\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 5 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation5(instructions, v0, v1, v2, v3, v4) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated(viewData[BINDING_INDEX] + 4, v4) || different;\n    viewData[BINDING_INDEX] += 5;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? v4 : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 6 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation6(instructions, v0, v1, v2, v3, v4, v5) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated2(viewData[BINDING_INDEX] + 4, v4, v5) || different;\n    viewData[BINDING_INDEX] += 6;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b1 ? v5 : v4) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 7 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n * @param {?} v6 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation7(instructions, v0, v1, v2, v3, v4, v5, v6) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated3(viewData[BINDING_INDEX] + 4, v4, v5, v6) || different;\n    viewData[BINDING_INDEX] += 7;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b2 ? v6 : (b1 ? v5 : v4)) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Checks if the values of up to 8 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param {?} instructions A list of instructions that will be used to translate an attribute.\n * @param {?} v0 value checked for change.\n * @param {?} v1 value checked for change.\n * @param {?} v2 value checked for change.\n * @param {?} v3 value checked for change.\n * @param {?} v4 value checked for change.\n * @param {?} v5 value checked for change.\n * @param {?} v6 value checked for change.\n * @param {?} v7 value checked for change.\n *\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolation8(instructions, v0, v1, v2, v3, v4, v5, v6, v7) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = bindingUpdated4(viewData[BINDING_INDEX], v0, v1, v2, v3);\n    different = bindingUpdated4(viewData[BINDING_INDEX] + 4, v4, v5, v6, v7) || different;\n    viewData[BINDING_INDEX] += 8;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are bindings\n        if (i & 1) {\n            /** @type {?} */\n            var idx = /** @type {?} */ (instructions[i]);\n            /** @type {?} */\n            var b4 = idx & 4;\n            /** @type {?} */\n            var b2 = idx & 2;\n            /** @type {?} */\n            var b1 = idx & 1;\n            /** @type {?} */\n            var value = b4 ? (b2 ? (b1 ? v7 : v6) : (b1 ? v5 : v4)) : (b2 ? (b1 ? v3 : v2) : (b1 ? v1 : v0));\n            res += stringify(value);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n/**\n * Create a translated interpolation binding with a variable number of expressions.\n *\n * If there are 1 to 8 expressions then `i18nInterpolation()` should be used instead. It is faster\n * because there is no need to create an array of expressions and iterate over it.\n *\n * @param {?} instructions\n * @param {?} values\n * @return {?} The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function i18nInterpolationV(instructions, values) {\n    /** @type {?} */\n    var viewData = getViewData();\n    /** @type {?} */\n    var different = false;\n    for (var i = 0; i < values.length; i++) {\n        // Check if bindings have changed\n        bindingUpdated(viewData[BINDING_INDEX]++, values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var res = '';\n    for (var i = 0; i < instructions.length; i++) {\n        // Odd indexes are placeholders\n        if (i & 1) {\n            res += stringify(values[/** @type {?} */ (instructions[i])]);\n        }\n        else {\n            res += instructions[i];\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=i18n.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { createInjector } from '../di/r3_injector';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { assertDefined } from './assert';\nimport { ComponentFactoryResolver } from './component_ref';\nimport { getNgModuleDef } from './definition';\n/**\n * @record\n */\nexport function NgModuleType() { }\n/** @type {?} */\nNgModuleType.prototype.ngModuleDef;\n/** @type {?} */\nexport var COMPONENT_FACTORY_RESOLVER = {\n    provide: viewEngine_ComponentFactoryResolver,\n    useFactory: function () { return new ComponentFactoryResolver(); },\n    deps: [],\n};\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleRef = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleRef, _super);\n    function NgModuleRef(ngModuleType, parentInjector) {\n        var _this = _super.call(this) || this;\n        // tslint:disable-next-line:require-internal-with-underscore\n        _this._bootstrapComponents = [];\n        _this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ var ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n        _this._bootstrapComponents = /** @type {?} */ ((ngModuleDef)).bootstrap;\n        /** @type {?} */\n        var additionalProviders = [\n            COMPONENT_FACTORY_RESOLVER, {\n                provide: viewEngine_NgModuleRef,\n                useValue: _this,\n            }\n        ];\n        _this.injector = createInjector(ngModuleType, parentInjector, additionalProviders);\n        _this.instance = _this.injector.get(ngModuleType);\n        _this.componentFactoryResolver = new ComponentFactoryResolver();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgModuleRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return NgModuleRef;\n}(viewEngine_NgModuleRef));\n/**\n * @template T\n */\nexport { NgModuleRef };\nif (false) {\n    /** @type {?} */\n    NgModuleRef.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef.prototype.injector;\n    /** @type {?} */\n    NgModuleRef.prototype.componentFactoryResolver;\n    /** @type {?} */\n    NgModuleRef.prototype.instance;\n    /** @type {?} */\n    NgModuleRef.prototype.destroyCbs;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory, _super);\n    function NgModuleFactory(moduleType) {\n        var _this = _super.call(this) || this;\n        _this.moduleType = moduleType;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    };\n    return NgModuleFactory;\n}(viewEngine_NgModuleFactory));\n/**\n * @template T\n */\nexport { NgModuleFactory };\nif (false) {\n    /** @type {?} */\n    NgModuleFactory.prototype.moduleType;\n}\n//# sourceMappingURL=ng_module_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, getBinding, updateBinding } from './instructions';\nimport { getBindingRoot, getCreationMode } from './state';\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nexport function pureFunction0(slotOffset, pureFn, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return getCreationMode() ?\n        updateBinding(bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(bindingIndex, exp) ?\n        updateBinding(bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated2(bindingIndex, exp1, exp2) ?\n        updateBinding(bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated3(bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(bindingIndex + 4, exp5) || different ?\n        updateBinding(bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = bindingUpdated4(bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = false;\n    for (var i = 0; i < exps.length; i++) {\n        bindingUpdated(bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(bindingIndex);\n}\n//# sourceMappingURL=pure_function.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { load, store } from './instructions';\nimport { HEADER_OFFSET } from './interfaces/view';\nimport { pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunctionV } from './pure_function';\nimport { getTView } from './state';\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nexport function pipe(index, pipeName) {\n    /** @type {?} */\n    var tView = getTView();\n    /** @type {?} */\n    var pipeDef;\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = /** @type {?} */ (tView.data[adjustedIndex]);\n    }\n    /** @type {?} */\n    var pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(\"Pipe with name '\" + name + \"' not found!\");\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nexport function pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return (/** @type {?} */ (getTView().data[index + HEADER_OFFSET])).pure;\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nEventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    EventEmitter.prototype.emit = /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    EventEmitter.prototype.subscribe = /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    function (generatorOrNext, error, complete) {\n        /** @type {?} */\n        var schedulerFn;\n        /** @type {?} */\n        var errorFn = function (err) { return null; };\n        /** @type {?} */\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        /** @type {?} */\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nexport { EventEmitter };\nif (false) {\n    /**\n     * Internal\n     * @type {?}\n     */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=event_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectTemplateRef as render3InjectTemplateRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nvar TemplateRef = /** @class */ (function () {\n    function TemplateRef() {\n    }\n    /**\n     * \\@internal\n     */\n    TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n    return TemplateRef;\n}());\nexport { TemplateRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef.__NG_ELEMENT_ID__;\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     * @abstract\n     * @return {?}\n     */\n    TemplateRef.prototype.elementRef = function () { };\n    /**\n     * Creates a view object and attaches it to the view container of the parent view.\n     * @abstract\n     * @param {?} context The context for the new view, inherited from the anchor element.\n     * @return {?} The new view object.\n     */\n    TemplateRef.prototype.createEmbeddedView = function (context) { };\n}\n/** @type {?} */\nexport var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = render3InjectTemplateRef;\n/** @type {?} */\nvar SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=template_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { getSymbolIterator } from '../util';\nimport { assertDefined, assertEqual } from './assert';\nimport { NG_ELEMENT_ID } from './fields';\nimport { store, storeCleanupWithContext } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { TVIEW } from './interfaces/view';\nimport { assertPreviousIsParent, getOrCreateCurrentQueries, getViewData } from './state';\nimport { flatten, isContentQueryHost } from './util';\nimport { createElementRef, createTemplateRef } from './view_engine_compatibility';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n * @template T\n */\nexport function QueryPredicate() { }\n/**\n * If looking for directives then it contains the directive type.\n * @type {?}\n */\nQueryPredicate.prototype.type;\n/**\n * If selector then contains local names to query for.\n * @type {?}\n */\nQueryPredicate.prototype.selector;\n/**\n * Indicates which token should be read from DI for this query.\n * @type {?}\n */\nQueryPredicate.prototype.read;\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n * @template T\n */\nexport function LQuery() { }\n/**\n * Next query. Used when queries are stored as a linked list in `LQueries`.\n * @type {?}\n */\nLQuery.prototype.next;\n/**\n * Destination to which the value should be added.\n * @type {?}\n */\nLQuery.prototype.list;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @type {?}\n */\nLQuery.prototype.predicate;\n/**\n * Values which have been located.\n *\n * This is what builds up the `QueryList._valuesTree`.\n * @type {?}\n */\nLQuery.prototype.values;\n/**\n * A pointer to an array that stores collected values from views. This is necessary so we know a\n * container into which to insert nodes collected from views.\n * @type {?}\n */\nLQuery.prototype.containerValues;\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    LQueries_.prototype.track = /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    function (queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.clone = /**\n     * @return {?}\n     */\n    function () { return new LQueries_(this, null, this.deep); };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.container = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.createView = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.insertView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        insertView(index, this.shallow);\n        insertView(index, this.deep);\n    };\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    LQueries_.prototype.addNode = /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    function (tNode) {\n        add(this.deep, tNode);\n        if (isContentQueryHost(tNode)) {\n            add(this.shallow, tNode);\n            if (tNode.parent && isContentQueryHost(tNode.parent)) {\n                // if node has a content query and parent also has a content query\n                // both queries need to check this node for shallow matches\n                add(/** @type {?} */ ((this.parent)).shallow, tNode);\n            }\n            return this.parent;\n        }\n        isRootNodeOfQuery(tNode) && add(this.shallow, tNode);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.removeView = /**\n     * @return {?}\n     */\n    function () {\n        removeView(this.shallow);\n        removeView(this.deep);\n    };\n    return LQueries_;\n}());\nexport { LQueries_ };\nif (false) {\n    /** @type {?} */\n    LQueries_.prototype.parent;\n    /** @type {?} */\n    LQueries_.prototype.shallow;\n    /** @type {?} */\n    LQueries_.prototype.deep;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n    return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var containerValues = []; // prepare room for views\n        query.values.push(containerValues);\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView(index, query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.'); /** @type {?} */\n        ((query.containerValues)).splice(index, 0, query.values);\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView(query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        /** @type {?} */\n        var containerValues = /** @type {?} */ ((query.containerValues));\n        /** @type {?} */\n        var viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        var removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    var localNames = tNode.localNames;\n    if (localNames) {\n        for (var i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return /** @type {?} */ (localNames[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param {?} tNode TNode on which directives are present.\n * @param {?} currentView The view we are currently processing\n * @param {?} type Type of a directive to look for.\n * @return {?} Index of a found directive or null when none found.\n */\nfunction getIdxOfMatchingDirective(tNode, currentView, type) {\n    /** @type {?} */\n    var defs = currentView[TVIEW].data;\n    if (defs) {\n        /** @type {?} */\n        var flags = tNode.flags;\n        /** @type {?} */\n        var count = flags & 4095 /* DirectiveCountMask */;\n        /** @type {?} */\n        var start = flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (defs[i]);\n            if (def.type === type) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read) {\n    /** @type {?} */\n    var factoryFn = (/** @type {?} */ (read))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        var matchingIdx = getIdxOfMatchingDirective(tNode, currentView, /** @type {?} */ (read));\n        if (matchingIdx !== null) {\n            return currentView[matchingIdx];\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryReadByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ViewEngine_ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(ViewEngine_TemplateRef, ViewEngine_ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n    /** @type {?} */\n    var currentView = getViewData();\n    while (query) {\n        /** @type {?} */\n        var predicate = query.predicate;\n        /** @type {?} */\n        var type = predicate.type;\n        if (type) {\n            /** @type {?} */\n            var result = queryRead(tNode, currentView, predicate.read || type);\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            /** @type {?} */\n            var selector = /** @type {?} */ ((predicate.selector));\n            for (var i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                var directiveIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (directiveIdx !== null) {\n                    /** @type {?} */\n                    var result = null;\n                    if (predicate.read) {\n                        result = queryRead(tNode, currentView, predicate.read);\n                    }\n                    else {\n                        if (directiveIdx > -1) {\n                            result = currentView[directiveIdx];\n                        }\n                        else {\n                            // if read token and / or strategy is not specified,\n                            // detect it using appropriate tNode type\n                            result = queryReadByTNodeType(tNode, currentView);\n                        }\n                    }\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    var isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : /** @type {?} */ (predicate),\n        selector: isArray ? /** @type {?} */ (predicate) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: (/** @type {?} */ ((queryList)))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nQueryList_ = /** @class */ (function () {\n    function QueryList_() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    Object.defineProperty(QueryList_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._values.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"first\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[0] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"last\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[values.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._values.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList_.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._values.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._values.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._values.slice(0); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._values.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList_.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._values = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.setDirty = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList_;\n}());\nif (false) {\n    /** @type {?} */\n    QueryList_.prototype.dirty;\n    /** @type {?} */\n    QueryList_.prototype.changes;\n    /** @type {?} */\n    QueryList_.prototype._values;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    QueryList_.prototype._valuesTree;\n}\n/** @type {?} */\nexport var QueryList = /** @type {?} */ (QueryList_);\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(memoryIndex, predicate, descend, \n// TODO: \"read\" should be an AbstractType (FW-486)\nread) {\n    ngDevMode && assertPreviousIsParent();\n    /** @type {?} */\n    var queryList = new QueryList();\n    /** @type {?} */\n    var queries = getOrCreateCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(null, queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    /** @type {?} */\n    var queryListImpl = (/** @type {?} */ ((queryList)));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/** @enum {string} */\nvar BypassType = {\n    Url: 'Url',\n    Html: 'Html',\n    ResourceUrl: 'ResourceUrl',\n    Script: 'Script',\n    Style: 'Style',\n};\nexport { BypassType };\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nexport function TrustedString() { }\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nexport function TrustedHtmlString() { }\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nexport function TrustedStyleString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nexport function TrustedScriptString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nexport function TrustedUrlString() { }\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nexport function TrustedResourceUrlString() { }\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nexport function allowSanitizationBypass(value, type) {\n    return (value instanceof String && (/** @type {?} */ (value))[BRAND] === type) ? true : false;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    var trusted = /** @type {?} */ (new String(trustedString));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n//# sourceMappingURL=bypass.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar /**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nInertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            /** @type {?} */\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (e) {\n            return null;\n        }\n        /** @type {?} */\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        var body = xhr.response.body;\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            var body = /** @type {?} */ (new (/** @type {?} */ (window))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body);\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\n            return body;\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        /** @type {?} */\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            var attrib = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        var childNode = /** @type {?} */ (el.firstChild);\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport { InertBodyHelper };\nif (false) {\n    /** @type {?} */\n    InertBodyHelper.prototype.inertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!(/** @type {?} */ (window)).DOMParser;\n    }\n    catch (e) {\n        return false;\n    }\n}\n//# sourceMappingURL=inert_body.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\n/** *\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n  @type {?} */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** @type {?} */\nvar SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** *\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n  @type {?} */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=url_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    var res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    /** @type {?} */\n    var res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n/** @type {?} */\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n/** @type {?} */\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n/** @type {?} */\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nvar VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n/** @type {?} */\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n/** @type {?} */\nvar SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n/** @type {?} */\nvar VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar /**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nSanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var current = /** @type {?} */ ((el.firstChild));\n        /** @type {?} */\n        var elementValid = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                elementValid = this.startElement(/** @type {?} */ (current));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(/** @type {?} */ ((current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (elementValid && current.firstChild) {\n                current = /** @type {?} */ ((current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                /** @type {?} */\n                var next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * Outputs only valid Elements.\n     *\n     * Invalid elements are skipped.\n     *\n     * @param {?} element element to sanitize\n     * Returns true if the element is valid.\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = /**\n     * Outputs only valid Elements.\n     *\n     * Invalid elements are skipped.\n     *\n     * @param {?} element element to sanitize\n     * Returns true if the element is valid.\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return false;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            var elAttr = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((elAttr)).name;\n            /** @type {?} */\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            var value = /** @type {?} */ ((elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = /**\n     * @param {?} current\n     * @return {?}\n     */\n    function (current) {\n        /** @type {?} */\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) { this.buf.push(encodeEntities(chars)); };\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\nif (false) {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n/** @type {?} */\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n/** @type {?} */\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        var hi = match.charCodeAt(0);\n        /** @type {?} */\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        /** @type {?} */\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        /** @type {?} */\n        var mXSSAttempts = 5;\n        /** @type {?} */\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        var sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        var safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=html_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nSanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nexport { Sanitizer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=security.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/** *\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n  @type {?} */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nvar COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nvar CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/** *\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n  @type {?} */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    var outsideSingle = true;\n    /** @type {?} */\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        /** @type {?} */\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    /** @type {?} */\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n * @record\n */\nexport function StyleSanitizeFn() { }\n//# sourceMappingURL=style_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCurrentSanitizer } from '../render3/state';\nimport { stringify } from '../render3/util';\nimport { allowSanitizationBypass } from './bypass';\nimport { _sanitizeHtml as _sanitizeHtml } from './html_sanitizer';\nimport { SecurityContext } from './security';\nimport { _sanitizeStyle as _sanitizeStyle } from './style_sanitizer';\nimport { _sanitizeUrl as _sanitizeUrl } from './url_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    var s = getCurrentSanitizer();\n    if (s) {\n        return s.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/** *\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n  @type {?} */\nexport var defaultStyleSanitizer = (/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'filter' || prop === 'list-style' ||\n            prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n}));\n//# sourceMappingURL=sanitization.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, } from '../../di/defs';\nimport { inject } from '../../di/injector_compatibility';\nimport * as r3 from '../index';\nimport * as sanitization from '../../sanitization/sanitization';\n/** *\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n  @type {?} */\nexport var angularCoreEnv = {\n    'ÉµdefineBase': r3.defineBase,\n    'ÉµdefineComponent': r3.defineComponent,\n    'ÉµdefineDirective': r3.defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ÉµdefineNgModule': r3.defineNgModule,\n    'ÉµdefinePipe': r3.definePipe,\n    'ÉµdirectiveInject': r3.directiveInject,\n    'ÉµgetFactoryOf': r3.getFactoryOf,\n    'ÉµgetInheritedFactory': r3.getInheritedFactory,\n    'inject': inject,\n    'ÉµinjectAttribute': r3.injectAttribute,\n    'ÉµtemplateRefExtractor': r3.templateRefExtractor,\n    'ÉµNgOnChangesFeature': r3.NgOnChangesFeature,\n    'ÉµProvidersFeature': r3.ProvidersFeature,\n    'ÉµInheritDefinitionFeature': r3.InheritDefinitionFeature,\n    'ÉµelementAttribute': r3.elementAttribute,\n    'Éµbind': r3.bind,\n    'Éµcontainer': r3.container,\n    'ÉµnextContext': r3.nextContext,\n    'ÉµcontainerRefreshStart': r3.containerRefreshStart,\n    'ÉµcontainerRefreshEnd': r3.containerRefreshEnd,\n    'ÉµloadQueryList': r3.loadQueryList,\n    'ÉµnamespaceHTML': r3.namespaceHTML,\n    'ÉµnamespaceMathML': r3.namespaceMathML,\n    'ÉµnamespaceSVG': r3.namespaceSVG,\n    'ÉµenableBindings': r3.enableBindings,\n    'ÉµdisableBindings': r3.disableBindings,\n    'ÉµelementStart': r3.elementStart,\n    'ÉµelementEnd': r3.elementEnd,\n    'Éµelement': r3.element,\n    'ÉµEC': r3.elementContainerStart,\n    'ÉµeC': r3.elementContainerEnd,\n    'ÉµpureFunction0': r3.pureFunction0,\n    'ÉµpureFunction1': r3.pureFunction1,\n    'ÉµpureFunction2': r3.pureFunction2,\n    'ÉµpureFunction3': r3.pureFunction3,\n    'ÉµpureFunction4': r3.pureFunction4,\n    'ÉµpureFunction5': r3.pureFunction5,\n    'ÉµpureFunction6': r3.pureFunction6,\n    'ÉµpureFunction7': r3.pureFunction7,\n    'ÉµpureFunction8': r3.pureFunction8,\n    'ÉµpureFunctionV': r3.pureFunctionV,\n    'ÉµgetCurrentView': r3.getCurrentView,\n    'ÉµrestoreView': r3.restoreView,\n    'Éµinterpolation1': r3.interpolation1,\n    'Éµinterpolation2': r3.interpolation2,\n    'Éµinterpolation3': r3.interpolation3,\n    'Éµinterpolation4': r3.interpolation4,\n    'Éµinterpolation5': r3.interpolation5,\n    'Éµinterpolation6': r3.interpolation6,\n    'Éµinterpolation7': r3.interpolation7,\n    'Éµinterpolation8': r3.interpolation8,\n    'ÉµinterpolationV': r3.interpolationV,\n    'ÉµelementClassProp': r3.elementClassProp,\n    'Éµlistener': r3.listener,\n    'Éµload': r3.load,\n    'Éµprojection': r3.projection,\n    'ÉµelementProperty': r3.elementProperty,\n    'ÉµpipeBind1': r3.pipeBind1,\n    'ÉµpipeBind2': r3.pipeBind2,\n    'ÉµpipeBind3': r3.pipeBind3,\n    'ÉµpipeBind4': r3.pipeBind4,\n    'ÉµpipeBindV': r3.pipeBindV,\n    'ÉµprojectionDef': r3.projectionDef,\n    'Éµpipe': r3.pipe,\n    'Éµquery': r3.query,\n    'ÉµqueryRefresh': r3.queryRefresh,\n    'ÉµregisterContentQuery': r3.registerContentQuery,\n    'Éµreference': r3.reference,\n    'ÉµelementStyling': r3.elementStyling,\n    'ÉµelementStylingMap': r3.elementStylingMap,\n    'ÉµelementStyleProp': r3.elementStyleProp,\n    'ÉµelementStylingApply': r3.elementStylingApply,\n    'Éµtemplate': r3.template,\n    'Éµtext': r3.text,\n    'ÉµtextBinding': r3.textBinding,\n    'ÉµembeddedViewStart': r3.embeddedViewStart,\n    'ÉµembeddedViewEnd': r3.embeddedViewEnd,\n    'Éµi18nAttribute': r3.i18nAttribute,\n    'Éµi18nExp': r3.i18nExp,\n    'Éµi18nStart': r3.i18nStart,\n    'Éµi18nEnd': r3.i18nEnd,\n    'Éµi18nApply': r3.i18nApply,\n    'ÉµsanitizeHtml': sanitization.sanitizeHtml,\n    'ÉµsanitizeStyle': sanitization.sanitizeStyle,\n    'ÉµdefaultStyleSanitizer': sanitization.defaultStyleSanitizer,\n    'ÉµsanitizeResourceUrl': sanitization.sanitizeResourceUrl,\n    'ÉµsanitizeScript': sanitization.sanitizeScript,\n    'ÉµsanitizeUrl': sanitization.sanitizeUrl\n};\n//# sourceMappingURL=environment.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** *\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * \\@publicApi\n  @type {?} */\nexport var Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v) {\n    return typeof v === 'function';\n}\n/** @typedef {?} */\nvar Mutable;\nexport { Mutable };\n//# sourceMappingURL=type.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../type';\nimport { global, stringify } from '../util';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\n/** *\n * Attention: These regex has to hold even if the code is minified!\n  @type {?} */\nexport var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nexport var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/** @type {?} */\nexport var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || global['Reflect'];\n    }\n    /**\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.factory = /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, [void 0].concat(args)))();\n    }; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    function (paramTypes, paramAnnotations) {\n        /** @type {?} */\n        var result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownParameters = /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (type, parentCtor) {\n        /** @type {?} */\n        var typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\n            return (/** @type {?} */ (type)).parameters;\n        }\n        /** @type {?} */\n        var tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            /** @type {?} */\n            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            /** @type {?} */\n            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            /** @type {?} */\n            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        /** @type {?} */\n        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\n        /** @type {?} */\n        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(type);\n        /** @type {?} */\n        var parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownAnnotations = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\n            /** @type {?} */\n            var annotations = (/** @type {?} */ (typeOrFunc)).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        /** @type {?} */\n        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n            /** @type {?} */\n            var propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n            /** @type {?} */\n            var propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\n            /** @type {?} */\n            var propMetadata_1 = /** @type {?} */ ({});\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var propMetadata = {};\n        if (parentCtor !== Object) {\n            /** @type {?} */\n            var parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        /** @type {?} */\n        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                /** @type {?} */\n                var decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, propMetadata[propName]);\n                }\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return {}; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        /** @type {?} */\n        var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return \"./\" + stringify(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveEnum = /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nexport { ReflectionCapabilities };\nif (false) {\n    /** @type {?} */\n    ReflectionCapabilities.prototype._reflect;\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        /** @type {?} */\n        var decoratorType = decoratorInvocation.type;\n        /** @type {?} */\n        var annotationCls = decoratorType.annotationCls;\n        /** @type {?} */\n        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    /** @type {?} */\n    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    /** @type {?} */\n    var parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=reflection_capabilities.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Host, Inject, Optional, Self, SkipSelf } from '../../di/metadata';\nimport { Attribute } from '../../metadata/di';\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\nimport { getCompilerFacade } from './compiler_facade';\n/** @type {?} */\nvar _reflect = null;\n/**\n * @return {?}\n */\nexport function getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nexport function convertDependencies(deps) {\n    /** @type {?} */\n    var compiler = getCompilerFacade();\n    return deps.map(function (dep) { return reflectDependency(compiler, dep); });\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    var meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (var j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            var param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(\"Attribute name must be defined.\");\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef } from '../definition';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_INJECTOR_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from '../fields';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { reflectDependencies } from './util';\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModule(moduleType, ngModule) {\n    compileNgModuleDefs(moduleType, ngModule);\n    setScopeOnDeclaredComponents(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModuleDefs(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    /** @nocollapse */ var ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: function () {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, \"ng://\" + moduleType.name + \"/ngModuleDef.js\", {\n                    type: moduleType,\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY),\n                    declarations: declarations,\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders),\n                    emitInline: true,\n                });\n            }\n            return ngModuleDef;\n        }\n    });\n    /** @type {?} */\n    /** @nocollapse */ var ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: function () {\n            if (ngInjectorDef === null) {\n                /** @type {?} */\n                var meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY,\n                    imports: [\n                        ngModule.imports || EMPTY_ARRAY,\n                        ngModule.exports || EMPTY_ARRAY,\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, \"ng://\" + moduleType.name + \"/ngInjectorDef.js\", meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    var transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(function (declaration) {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            /** @type {?} */\n            var component = /** @type {?} */ (declaration);\n            /** @type {?} */\n            var componentDef = /** @type {?} */ ((getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            (/** @type {?} */ (declaration)).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nexport function patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = function () { return Array.from(transitiveScopes.compilation.directives)\n        .map(function (dir) { return getDirectiveDef(dir) || /** @type {?} */ ((getComponentDef(dir))); })\n        .filter(function (def) { return !!def; }); };\n    componentDef.pipeDefs = function () {\n        return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return ((getPipeDef(pipe))); });\n    };\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nexport function transitiveScopesFor(moduleType) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n    }\n    /** @type {?} */\n    var def = /** @type {?} */ ((getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    var scopes = {\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(function (declared) {\n        /** @type {?} */\n        var declaredWithDefs = /** @type {?} */ (declared);\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach(function (imported) {\n        /** @type {?} */\n        var importedTyped = /** @type {?} */ (imported);\n        if (!isNgModule(importedTyped)) {\n            throw new Error(\"Importing \" + importedTyped.name + \" which does not have an ngModuleDef\");\n        }\n        /** @type {?} */\n        var importedScope = transitiveScopesFor(importedTyped);\n        importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n        importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n    });\n    def.exports.forEach(function (exported) {\n        /** @type {?} */\n        var exportedTyped = /** @type {?} */ (exported);\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedTyped)) {\n            /** @type {?} */\n            var exportedScope = transitiveScopesFor(exportedTyped);\n            exportedScope.exported.directives.forEach(function (entry) {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(function (entry) {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getNgModuleDef(exportedTyped)) {\n            scopes.exported.pipes.add(exportedTyped);\n        }\n        else {\n            scopes.exported.directives.add(exportedTyped);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @return {?}\n */\nfunction flatten(values) {\n    /** @type {?} */\n    var out = [];\n    values.forEach(function (value) {\n        if (Array.isArray(value)) {\n            out.push.apply(out, flatten(value));\n        }\n        else {\n            out.push(value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return (/** @type {?} */ (value)).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n//# sourceMappingURL=module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { componentNeedsResolution, maybeQueueResolutionOfComponentResources } from '../../metadata/resource_loading';\nimport { ViewEncapsulation } from '../../metadata/view';\nimport { stringify } from '../../util';\nimport { EMPTY_ARRAY } from '../definition';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF } from '../fields';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { patchComponentDefWithScope, transitiveScopesFor } from './module';\nimport { getReflect, reflectDependencies } from './util';\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nexport function compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ var ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: function () {\n            /** @type {?} */\n            var compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    var error = [\"Component '\" + stringify(type) + \"' is not resolved:\"];\n                    if (metadata.templateUrl) {\n                        error.push(\" - templateUrl: \" + stringify(metadata.templateUrl));\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                    }\n                    error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                var meta = tslib_1.__assign({}, directiveMetadata(type, metadata), { template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, viewQueries: extractQueriesMetadata(getReflect().propMetadata(type), isViewQuery), directives: new Map(), pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, viewProviders: metadata.viewProviders || null });\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, \"ng://\" + stringify(type) + \"/template.html\", meta);\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    var scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return (/** @type {?} */ (component)).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nexport function compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ var ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: function () {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                var facade = directiveMetadata(type, directive);\n                ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, \"ng://\" + (type && type.name) + \"/ngDirectiveDef.js\", facade);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    /** @type {?} */\n    var propMetadata = getReflect().propMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: /** @type {?} */ ((metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(propMetadata, isContentQuery),\n        lifecycle: {\n            usesOnChanges: type.prototype.ngOnChanges !== undefined,\n        },\n        typeSourceSpan: /** @type {?} */ ((null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: metadata.exportAs || null,\n        providers: metadata.providers || null,\n    };\n}\n/** @type {?} */\nvar EMPTY_OBJ = {};\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : selector;\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nexport function convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null\n    };\n}\n/**\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(propMetadata, isQueryAnn) {\n    /** @type {?} */\n    var queriesMeta = [];\n    var _loop_1 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(function (ann) {\n                if (isQueryAnn(ann)) {\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    };\n    for (var field in propMetadata) {\n        _loop_1(field);\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    var name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    var name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map(function (piece) { return piece.trim(); });\n}\n//# sourceMappingURL=directive.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NG_PIPE_DEF } from '../fields';\nimport { stringify } from '../util';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { reflectDependencies } from './util';\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nexport function compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ var ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: function () {\n            if (ngPipeDef === null) {\n                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, \"ng://\" + stringify(type) + \"/ngPipeDef.js\", {\n                    type: type,\n                    name: type.name,\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true\n                });\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { NG_BASE_DEF } from '../render3/fields';\nimport { compileComponent as render3CompileComponent, compileDirective as render3CompileDirective } from '../render3/jit/directive';\nimport { compilePipe as render3CompilePipe } from '../render3/jit/pipe';\nimport { makeDecorator, makePropDecorator } from '../util/decorators';\nimport { noop } from '../util/noop';\nimport { fillProperties } from '../util/property';\n/**\n * Type of the Directive decorator / constructor function.\n * \\@publicApi\n * @record\n */\nexport function DirectiveDecorator() { }\n/** *\n * Type of the Directive metadata.\n *\n * \\@publicApi\n  @type {?} */\nexport var Directive = makeDecorator('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n}, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); });\n/**\n * Component decorator interface\n *\n * \\@publicApi\n * @record\n */\nexport function ComponentDecorator() { }\n/** *\n * Component decorator and metadata.\n *\n * \\@usageNotes\n *\n * ### Using animations\n *\n * The following snippet shows an animation trigger in a component's\n * metadata. The trigger is attached to an element in the component's\n * template, using \"\\@_trigger_name_\", and a state expression that is evaluated\n * at run time to determine whether the animation should start.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'animation-cmp',\n *   templateUrl: 'animation-cmp.html',\n *   animations: [\n *     trigger('myTriggerName', [\n *       state('on', style({ opacity: 1 }),\n *       state('off', style({ opacity: 0 }),\n *       transition('on => off', [\n *         animate(\"1s\")\n *       ])\n *     ])\n *   ]\n * })\n * ```\n *\n * ```html\n * <!-- animation-cmp.html -->\n * <div \\@myTriggerName=\"expression\">...</div>\n * ```\n *\n * ### Preserving whitespace\n *\n * Removing whitespace can greatly reduce AOT-generated code size, and speed up view creation.\n * As of Angular 6, default for `preserveWhitespaces` is false (whitespace is removed).\n * To change the default setting for all components in your application, set\n * the `preserveWhitespaces` option of the AOT compiler.\n *\n * Current implementation removes whitespace characters as follows:\n * - Trims all whitespaces at the beginning and the end of a template.\n * - Removes whitespace-only text nodes. For example,\n * `<button>Action 1</button>  <button>Action 2</button>` becomes\n * `<button>Action 1</button><button>Action 2</button>`.\n * - Replaces a series of whitespace characters in text nodes with a single space.\n * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n * - Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n * where whitespace characters are significant.\n *\n * Note that these transformations can influence DOM nodes layout, although impact\n * should be minimal.\n *\n * You can override the default behavior to preserve whitespace characters\n * in certain fragments of a template. For example, you can exclude an entire\n * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n *\n * ```html\n * <div ngPreserveWhitespaces>\n *     whitespaces are preserved here\n *     <span>    and here </span>\n * </div>\n * ```\n *\n * You can force a single space to be preserved in a text node by using `&ngsp;`,\n * which is replaced with a space character by Angular's template\n * compiler:\n *\n * ```html\n * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n * the `preserveWhitespaces` option is set to `false`.\n *\n * ```html\n * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * To preserve sequences of whitespace characters, use the\n * `ngPreserveWhitespaces` attribute.\n *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Component = makeDecorator('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n}, Directive, undefined, function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); });\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function PipeDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Pipe = makeDecorator('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); });\n/**\n * \\@publicApi\n * @record\n */\nexport function InputDecorator() { }\n/** @type {?} */\nvar initializeBaseDef = function (target) {\n    /** @type {?} */\n    var constructor = target.constructor;\n    /** @nocollapse @type {?} */\n    var inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    var baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\nvar Éµ0 = initializeBaseDef;\n/** *\n * Does the work of creating the `ngBaseDef` property for the \\@Input and \\@Output decorators.\n * \\@param key \"inputs\" or \"outputs\"\n  @type {?} */\nvar updateBaseDefFromIOProp = function (getProp) {\n    return function (target, name) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        /** @type {?} */\n        var constructor = target.constructor;\n        if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n            initializeBaseDef(target);\n        }\n        /** @nocollapse @type {?} */\n        var baseDef = constructor.ngBaseDef;\n        /** @type {?} */\n        var defProp = getProp(baseDef);\n        defProp[name] = args[0];\n    };\n};\nvar Éµ1 = updateBaseDefFromIOProp;\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.inputs || {}; }));\n/**\n * Type of the Output decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function OutputDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.outputs || {}; }));\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostBindingDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostListenerDecorator() { }\n/** *\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n/** @type {?} */\nexport var SWITCH_COMPILE_COMPONENT__POST_R3__ = render3CompileComponent;\n/** @type {?} */\nexport var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = render3CompileDirective;\n/** @type {?} */\nexport var SWITCH_COMPILE_PIPE__POST_R3__ = render3CompilePipe;\n/** @type {?} */\nvar SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\n/** @type {?} */\nvar SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\n/** @type {?} */\nvar SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\nexport { Éµ0, Éµ1 };\n//# sourceMappingURL=directives.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ReflectionCapabilities } from '../reflection/reflection_capabilities';\nimport { getClosureSafeProperty } from '../util/property';\nimport { inject, injectArgs } from './injector_compatibility';\nvar Éµ0 = getClosureSafeProperty;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: Éµ0 });\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nexport function convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        var reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        var deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\n    }\n    if (USE_VALUE in provider) {\n        /** @type {?} */\n        var valueProvider_1 = (/** @type {?} */ (provider));\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var existingProvider_1 = (/** @type {?} */ (provider));\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        /** @type {?} */\n        var factoryProvider_1 = (/** @type {?} */ (provider));\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        /** @type {?} */\n        var classProvider_1 = (/** @type {?} */ (provider));\n        /** @type {?} */\n        var deps_2 = (/** @type {?} */ (provider)).deps;\n        if (!deps_2) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            var _a;\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\n        };\n    }\n    else {\n        /** @type {?} */\n        var deps_3 = (/** @type {?} */ (provider)).deps;\n        if (!deps_3) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\n    }\n}\nexport { Éµ0 };\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjector } from '../di/defs';\nimport { convertInjectableProviderToFactory } from '../di/util';\nimport { compileNgModule as render3CompileNgModule } from '../render3/jit/module';\nimport { makeDecorator } from '../util/decorators';\n/**\n * Represents the expansion of an `NgModule` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The `exported` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n * @record\n */\nexport function NgModuleTransitiveScopes() { }\n/** @type {?} */\nNgModuleTransitiveScopes.prototype.compilation;\n/** @type {?} */\nNgModuleTransitiveScopes.prototype.exported;\n/** @typedef {?} */\nvar NgModuleDefWithMeta;\nexport { NgModuleDefWithMeta };\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use `defineNgModule` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n * @record\n * @template T\n */\nexport function NgModuleDef() { }\n/**\n * Token representing the module. Used by DI.\n * @type {?}\n */\nNgModuleDef.prototype.type;\n/**\n * List of components to bootstrap.\n * @type {?}\n */\nNgModuleDef.prototype.bootstrap;\n/**\n * List of components, directives, and pipes declared by this module.\n * @type {?}\n */\nNgModuleDef.prototype.declarations;\n/**\n * List of modules or `ModuleWithProviders` imported by this module.\n * @type {?}\n */\nNgModuleDef.prototype.imports;\n/**\n * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n * module.\n * @type {?}\n */\nNgModuleDef.prototype.exports;\n/**\n * Cached value of computed `transitiveCompileScopes` for this module.\n *\n * This should never be read directly, but accessed via `transitiveScopesFor`.\n * @type {?}\n */\nNgModuleDef.prototype.transitiveCompileScopes;\n/**\n * A wrapper around an NgModule that associates it with the providers.\n *\n * @param T the module type. In Ivy applications, this must be explicitly\n * provided.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function ModuleWithProviders() { }\n/** @type {?} */\nModuleWithProviders.prototype.ngModule;\n/** @type {?|undefined} */\nModuleWithProviders.prototype.providers;\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `\\@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * \\@publicApi\n * @record\n */\nexport function SchemaMetadata() { }\n/** @type {?} */\nSchemaMetadata.prototype.name;\n/** *\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n  @type {?} */\nexport var CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/** *\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n  @type {?} */\nexport var NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n/**\n * Type of the NgModule decorator / constructor function.\n * @record\n */\nexport function NgModuleDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, \n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n/**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\nfunction (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); });\n/**\n * \\@description\n * Hook for manual bootstrapping of the application instead of using bootstrap array in \\@NgModule\n * annotation.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * \\@usageNotes\n * ```typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nexport function DoBootstrap() { }\n/** @type {?} */\nDoBootstrap.prototype.ngDoBootstrap;\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    var imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = imports.concat([metadata.exports]);\n    }\n    /** @nocollapse */ moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nexport var SWITCH_COMPILE_NGMODULE__POST_R3__ = render3CompileNgModule;\n/** @type {?} */\nvar SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nvar SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nvar /**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nVersion = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nexport { Version };\nif (false) {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/** *\n * \\@publicApi\n  @type {?} */\nexport var VERSION = new Version('7.1.0-beta.2-da59206995');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../../util/property';\nimport { NG_INJECTABLE_DEF } from '../fields';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { convertDependencies, reflectDependencies } from './util';\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nexport function compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    var meta = srcMeta || { providedIn: null };\n    /** @type {?} */\n    var def = null;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: function () {\n            if (def === null) {\n                /** @type {?} */\n                var meta_1 = srcMeta || { providedIn: null };\n                /** @type {?} */\n                var hasAProvider = isUseClassProvider(meta_1) || isUseFactoryProvider(meta_1) ||\n                    isUseValueProvider(meta_1) || isUseExistingProvider(meta_1);\n                /** @type {?} */\n                var compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    providedIn: meta_1.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined\n                };\n                if ((isUseClassProvider(meta_1) || isUseFactoryProvider(meta_1)) && meta_1.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta_1.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta_1)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta_1.useClass;\n                }\n                else if (isUseValueProvider(meta_1)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta_1.useValue;\n                }\n                else if (isUseFactoryProvider(meta_1)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta_1.useFactory;\n                }\n                else if (isUseExistingProvider(meta_1)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta_1.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(\"Unreachable state.\");\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreEnv, \"ng://\" + type.name + \"/ngInjectableDef.js\", compilerMeta);\n            }\n            return def;\n        },\n    });\n}\n/** @typedef {?} */\nvar UseClassProvider;\nvar Éµ0 = getClosureSafeProperty;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: Éµ0 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return (/** @type {?} */ (meta)).useClass !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return (/** @type {?} */ (meta)).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return (/** @type {?} */ (meta)).useExisting !== undefined;\n}\nexport { Éµ0 };\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { compileInjectable as render3CompileInjectable } from '../render3/jit/injectable';\nimport { makeDecorator } from '../util/decorators';\nimport { defineInjectable, getInjectableDef } from './defs';\nimport { convertInjectableProviderToFactory } from './util';\n/** @typedef {?} */\nvar InjectableProvider;\nexport { InjectableProvider };\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function InjectableDecorator() { }\n/** *\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_INJECTABLE(/** @type {?} */ (type), meta); });\n/**\n * Type representing injectable service.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function InjectableType() { }\n/** @type {?} */\nInjectableType.prototype.ngInjectableDef;\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\n/** @type {?} */\nexport var SWITCH_COMPILE_INJECTABLE__POST_R3__ = render3CompileInjectable;\n/** @type {?} */\nvar SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nvar SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport var ERROR_TYPE = 'ngType';\n/** @type {?} */\nexport var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nexport var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nexport var ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return (/** @type {?} */ (error))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, values);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype.handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var originalError = this._findOriginalError(error);\n        /** @type {?} */\n        var context = this._findContext(error);\n        /** @type {?} */\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findContext = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findOriginalError = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nexport { ErrorHandler };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message, originalError) {\n    /** @type {?} */\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    /** @type {?} */\n    var error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=error_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { wrappedError } from '../error_handler';\nimport { ERROR_ORIGINAL_ERROR } from '../errors';\nimport { stringify } from '../util';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    var res = [];\n    for (var i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        var reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nexport function InjectionError() { }\n/** @type {?} */\nInjectionError.prototype.keys;\n/** @type {?} */\nInjectionError.prototype.injectors;\n/** @type {?} */\nInjectionError.prototype.constructResolvingMessage;\n/** @type {?} */\nInjectionError.prototype.addKey;\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    var keys = [key];\n    /** @type {?} */\n    var errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    var error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    var signature = [];\n    for (var i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        var parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n//# sourceMappingURL=reflective_errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nvar /**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    ReflectiveKey.get = /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: /**\n         * @return {?} the number of keys registered in the system.\n         */\n        function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nexport { ReflectiveKey };\nif (false) {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    KeyRegistry.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return /** @type {?} */ ((this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nexport { KeyRegistry };\nif (false) {\n    /** @type {?} */\n    KeyRegistry.prototype._allKeys;\n}\n/** @type {?} */\nvar _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=reflective_key.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar /**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nReflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    Reflector.prototype.updateCapabilities = /**\n     * @param {?} caps\n     * @return {?}\n     */\n    function (caps) { this.reflectionCapabilities = caps; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.factory = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.factory(type); };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.parameters = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    Reflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.getter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.setter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.method(name); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.importUri(type); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    Reflector.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.resolveEnum = /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport { Reflector };\nif (false) {\n    /** @type {?} */\n    Reflector.prototype.reflectionCapabilities;\n}\n//# sourceMappingURL=reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { reflector } from '../reflection/reflection';\nimport { Type } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nimport { invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @record\n */\nfunction NormalizedProvider() { }\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar /**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    ReflectiveDependency.fromKey = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport { ReflectiveDependency };\nif (false) {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\n/** @type {?} */\nvar _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * \\@usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@publicApi\n * @record\n */\nexport function ResolvedReflectiveProvider() { }\n/**\n * A key, usually a `Type<any>`.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.key;\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.resolvedFactories;\n/**\n * Indicates if the provider is a multi-provider or a regular provider.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.multiProvider;\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\nexport { ResolvedReflectiveProvider_ };\nif (false) {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nvar /**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nexport { ResolvedReflectiveFactory };\nif (false) {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    var factoryFn;\n    /** @type {?} */\n    var resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        var useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    var normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    var resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        /** @type {?} */\n        var existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            var resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\n            res.push(/** @type {?} */ (b));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        var params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    var params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    var token = null;\n    /** @type {?} */\n    var optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    var visibility = null;\n    for (var i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        var paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n//# sourceMappingURL=reflective_provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport { resolveReflectiveProviders } from './reflective_provider';\n/** @type {?} */\nvar UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nvar /**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.resolve = /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.resolveAndCreate = /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.fromResolvedProviders = /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nexport { ReflectiveInjector };\nif (false) {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        var len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var inj = new ReflectiveInjector_(providers);\n        (/** @type {?} */ (inj)).parent = this;\n        return inj;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.instantiateResolved = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._new = /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\n     * @return {?}\n     */\n    function () { return this.objs.length; };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            var res = new Array(provider.resolvedFactories.length);\n            for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiate = /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        /** @type {?} */\n        var factory = ResolvedReflectiveFactory.factory;\n        /** @type {?} */\n        var deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        var obj;\n        try {\n            obj = factory.apply(void 0, deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    /**\n     * @param {?} dep\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\n     * @param {?} dep\n     * @return {?}\n     */\n    function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKey = /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    function (keyId) {\n        for (var i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._throwOrNull = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeySelf = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        /** @type {?} */\n        var obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    function (key, notFoundValue, visibility) {\n        /** @type {?} */\n        var inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            var inj_ = /** @type {?} */ (inj);\n            /** @type {?} */\n            var obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nexport { ReflectiveInjector_ };\nif (false) {\n    /** @type {?} */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    var res = new Array(injector._providers.length);\n    for (var i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n//# sourceMappingURL=reflective_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/** *\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n  @type {?} */\nexport var APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationInitStatus.prototype.runInitializers = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        var asyncInitPromises = [];\n        /** @type {?} */\n        var complete = function () {\n            (/** @type {?} */ (_this)).done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n    ]; };\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\nif (false) {\n    /** @type {?} */\n    ApplicationInitStatus.prototype.resolve;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.reject;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.appInits;\n}\n//# sourceMappingURL=application_init.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/** *\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n  @type {?} */\nexport var APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/** *\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n  @type {?} */\nexport var APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: /** @type {?} */ ([]),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/** *\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n  @type {?} */\nexport var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/** *\n * A token that indicates an opaque platform id.\n * \\@publicApi\n  @type {?} */\nexport var PLATFORM_ID = new InjectionToken('Platform ID');\n/** *\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n  @type {?} */\nexport var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/** *\n * A token which indicates the root directory of the application\n * \\@publicApi\n  @type {?} */\nexport var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=application_tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console.decorators = [\n        { type: Injectable },\n    ];\n    return Console;\n}());\nexport { Console };\n//# sourceMappingURL=console.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di/injectable';\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nexport { ModuleWithComponentFactories };\nif (false) {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n    }\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleSync = /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAsync = /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Clears all caches.\n     */\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    Compiler.prototype.clearCache = /**\n     * Clears all caches.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    Compiler.prototype.clearCacheFor = /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.getModuleId = /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { return undefined; };\n    Compiler.decorators = [\n        { type: Injectable },\n    ];\n    return Compiler;\n}());\nexport { Compiler };\n/** @typedef {?} */\nvar CompilerOptions;\nexport { CompilerOptions };\n/** *\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n  @type {?} */\nexport var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nCompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nexport { CompilerFactory };\nif (false) {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@publicApi\n * @record\n */\nexport function WtfScopeFn() { }\n/**\n * @record\n */\nfunction WTF() { }\n/** @type {?} */\nWTF.prototype.trace;\n/**\n * @record\n */\nfunction Trace() { }\n/** @type {?} */\nTrace.prototype.events;\n/** @type {?} */\nTrace.prototype.leaveScope;\n/** @type {?} */\nTrace.prototype.beginTimeRange;\n/** @type {?} */\nTrace.prototype.endTimeRange;\n/**\n * @record\n */\nexport function Range() { }\n/**\n * @record\n */\nfunction Events() { }\n/** @type {?} */\nEvents.prototype.createScope;\n/**\n * @record\n */\nexport function Scope() { }\n/** @type {?} */\nvar trace;\n/** @type {?} */\nvar events;\n/**\n * @return {?}\n */\nexport function detectWTF() {\n    /** @type {?} */\n    var wtf = (/** @type {?} */ (global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=wtf_impl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nNgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        var self = /** @type {?} */ ((this));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\n        }\n        if ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new (/** @type {?} */ ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec'])));\n        }\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    NgZone.isInAngularZone = /**\n     * @return {?}\n     */\n    function () { return Zone.current.get('isAngularZone') === true; };\n    /**\n     * @return {?}\n     */\n    NgZone.assertInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgZone.assertNotInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.run = /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    NgZone.prototype.runTask = /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        var zone = (/** @type {?} */ ((this)))._inner;\n        /** @type {?} */\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.runGuarded = /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NgZone.prototype.runOutsideAngular = /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\n    };\n    return NgZone;\n}());\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { NgZone };\nif (false) {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop() { }\n/** @type {?} */\nvar EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\n/** @type {?} */\nNgZonePrivate.prototype._outer;\n/** @type {?} */\nNgZonePrivate.prototype._inner;\n/** @type {?} */\nNgZonePrivate.prototype._nesting;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMicrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMacrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.isStable;\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar /**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nNoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.run = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runGuarded = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runOutsideAngular = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runTask = /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport { NoopNgZone };\nif (false) {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n//# sourceMappingURL=ng_zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * @record\n */\nexport function PendingMacrotask() { }\n/** @type {?} */\nPendingMacrotask.prototype.source;\n/** @type {?} */\nPendingMacrotask.prototype.creationLocation;\n/** @type {?|undefined} */\nPendingMacrotask.prototype.runCount;\n/** @type {?} */\nPendingMacrotask.prototype.data;\n/**\n * @record\n */\nexport function TaskData() { }\n/** @type {?|undefined} */\nTaskData.prototype.target;\n/** @type {?|undefined} */\nTaskData.prototype.delay;\n/** @type {?|undefined} */\nTaskData.prototype.isPeriodic;\n/** @typedef {?} */\nvar DoneCallback;\nexport { DoneCallback };\n/** @typedef {?} */\nvar UpdateCallback;\nexport { UpdateCallback };\n/**\n * @record\n */\nfunction WaitCallback() { }\n/** @type {?} */\nWaitCallback.prototype.timeoutId;\n/** @type {?} */\nWaitCallback.prototype.doneCb;\n/** @type {?|undefined} */\nWaitCallback.prototype.updateCb;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this._watchAngularEvents();\n        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\n    }\n    /**\n     * @return {?}\n     */\n    Testability.prototype._watchAngularEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    Testability.prototype.increasePendingRequestCount = /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.decreasePendingRequestCount = /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    Testability.prototype.isStable = /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype._runCallbacksIfReady = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    var cb = /** @type {?} */ ((_this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            /** @type {?} */\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype.getPendingTasks = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: /** @type {?} */ ((/** @type {?} */ (t)).creationLocation),\n                data: t.data\n            };\n        });\n    };\n    /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    Testability.prototype.addCallback = /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    function (cb, timeout, updateCb) {\n        var _this = this;\n        /** @type {?} */\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push(/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb }));\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    Testability.prototype.whenStable = /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(/** @type {?} */ (doneCb), timeout, /** @type {?} */ (updateCb));\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.getPendingRequestCount = /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    Testability.prototype.findProviders = /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Testability.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return Testability;\n}());\nexport { Testability };\nif (false) {\n    /** @type {?} */\n    Testability.prototype._pendingCount;\n    /** @type {?} */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._didWork;\n    /** @type {?} */\n    Testability.prototype._callbacks;\n    /** @type {?} */\n    Testability.prototype.taskTrackingZone;\n    /** @type {?} */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.registerApplication = /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterApplication = /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getTestability = /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllRootElements = /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () { return []; };\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@publicApi\n * @record\n */\nexport function GetTestability() { }\n/** @type {?} */\nGetTestability.prototype.addToWindow;\n/** @type {?} */\nGetTestability.prototype.findTestabilityInTree;\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.addToWindow = /**\n     * @param {?} registry\n     * @return {?}\n     */\n    function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nvar _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=testability.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { ErrorHandler } from './error_handler';\nimport { isDevMode } from './is_dev_mode';\nimport { CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { assertNgModuleType } from './render3/assert';\nimport { NgModuleFactory as R3NgModuleFactory } from './render3/ng_module_ref';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { scheduleMicroTask, stringify } from './util';\nimport { isPromise } from './util/lang';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\n/** @type {?} */\nvar _platform;\n/** @type {?} */\nvar compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    /** @type {?} */\n    var compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nexport function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    return Promise.resolve(new R3NgModuleFactory(moduleType));\n}\n/** @type {?} */\nexport var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nvar /**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nNgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nexport { NgProbeToken };\nif (false) {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    /** @type {?} */\n    var desc = \"Platform: \" + name;\n    /** @type {?} */\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        /** @type {?} */\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken) {\n    /** @type {?} */\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n * @record\n */\nexport function BootstrapOptions() { }\n/**\n * Optionally specify which `NgZone` should be used.\n *\n * - Provide your own `NgZone` instance.\n * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n * - `noop` - Use `NoopNgZone` which does nothing.\n * @type {?|undefined}\n */\nBootstrapOptions.prototype.ngZone;\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    function (moduleFactory, options) {\n        var _this = this;\n        /** @type {?} */\n        var ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        var ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            /** @type {?} */\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            var moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\n            /** @type {?} */\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n                /** @type {?} */\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModule = /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        /** @type {?} */\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    PlatformRef.prototype._moduleDoBootstrap = /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    function (moduleRef) {\n        /** @type {?} */\n        var appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    PlatformRef.prototype.onDestroy = /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @return {?}\n         */\n        function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    PlatformRef.prototype.destroy = /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PlatformRef.ctorParameters = function () { return [\n        { type: Injector }\n    ]; };\n    return PlatformRef;\n}());\nexport { PlatformRef };\nif (false) {\n    /** @type {?} */\n    PlatformRef.prototype._modules;\n    /** @type {?} */\n    PlatformRef.prototype._destroyListeners;\n    /** @type {?} */\n    PlatformRef.prototype._destroyed;\n    /** @type {?} */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, (/** @type {?} */ (objs)));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@publicApi\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        /** @type {?} */\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        /** @type {?} */\n        var isStable = new Observable(function (observer) {\n            /** @type {?} */\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            /** @type {?} */\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        (/** @type {?} */ (this)).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    ApplicationRef.prototype.bootstrap = /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        /** @type {?} */\n        var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        /** @type {?} */\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        /** @type {?} */\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    ApplicationRef.prototype.tick = /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        var scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach(function (view) { return view.detectChanges(); });\n            if (this._enforceNoNewChanges) {\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.attachView = /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.detachView = /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._loadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        /** @type {?} */\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._unloadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationRef.prototype.ngOnDestroy = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: /**\n         * Returns the number of attached views.\n         * @return {?}\n         */\n        function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationRef.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: Console },\n        { type: Injector },\n        { type: ErrorHandler },\n        { type: ComponentFactoryResolver },\n        { type: ApplicationInitStatus }\n    ]; };\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /** @type {?} */\n    ApplicationRef.prototype._bootstrapListeners;\n    /** @type {?} */\n    ApplicationRef.prototype._views;\n    /** @type {?} */\n    ApplicationRef.prototype._runningTick;\n    /** @type {?} */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /** @type {?} */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /** @type {?} */\n    ApplicationRef.prototype._zone;\n    /** @type {?} */\n    ApplicationRef.prototype._console;\n    /** @type {?} */\n    ApplicationRef.prototype._injector;\n    /** @type {?} */\n    ApplicationRef.prototype._exceptionHandler;\n    /** @type {?} */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /** @type {?} */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n//# sourceMappingURL=application_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nNgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nexport { NgModuleFactoryLoader };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\n/** @type {?} */\nvar moduleFactories = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    /** @type {?} */\n    var existing = moduleFactories.get(id);\n    if (existing) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n    }\n    moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    moduleFactories = new Map();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id) {\n    /** @type {?} */\n    var factory = moduleFactories.get(id);\n    if (!factory)\n        throw new Error(\"No module with ID \" + id + \" loaded\");\n    return factory;\n}\n//# sourceMappingURL=ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nQueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._results.slice(); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._results.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._results = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n        (/** @type {?} */ (this)).length = this._results.length;\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\n        (/** @type {?} */ (this)).first = this._results[0];\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.setDirty = /**\n     * internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.destroy = /**\n     * internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList;\n}());\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nexport { QueryList };\nif (false) {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /** @type {?} */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce(function (flat, item) {\n        /** @type {?} */\n        var flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=query_list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional } from '../di';\nimport { Compiler } from './compiler';\n/** @type {?} */\nvar _SEPARATOR = '#';\n/** @type {?} */\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nSystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nexport { SystemJsNgModuleLoaderConfig };\nif (false) {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\n/** @type {?} */\nvar DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        /** @type {?} */\n        var offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        /** @type {?} */\n        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\n        { type: Compiler },\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n    ]; };\n    return SystemJsNgModuleLoader;\n}());\nexport { SystemJsNgModuleLoader };\nif (false) {\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._config;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=system_js_ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectViewContainerRef as render3InjectViewContainerRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nvar ViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef() {\n    }\n    /**\n     * \\@internal\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n    return ViewContainerRef;\n}());\nexport { ViewContainerRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__;\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.element = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.injector = function () { };\n    /**\n     * @deprecated No replacement\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.parentInjector = function () { };\n    /**\n     * Destroys all views in this container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = function () { };\n    /**\n     * Retrieves a view from this container.\n     * @abstract\n     * @param {?} index The 0-based index of the view to retrieve.\n     * @return {?} The `ViewRef` instance, or null if the index is out of range.\n     */\n    ViewContainerRef.prototype.get = function (index) { };\n    /**\n     * Reports how many views are currently attached to this container.\n     * @abstract\n     * @return {?} The number of views.\n     */\n    ViewContainerRef.prototype.length = function () { };\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @abstract\n     * @template C\n     * @param {?} templateRef The HTML template that defines the view.\n     * @param {?=} context\n     * @param {?=} index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @return {?} The `ViewRef` instance for the newly created view.\n     */\n    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @abstract\n     * @template C\n     * @param {?} componentFactory The factory to use.\n     * @param {?=} index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param {?=} injector The injector to use as the parent for the new component.\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     *\n     * @return {?} The new component instance, containing the host view.\n     *\n     */\n    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };\n    /**\n     * Inserts a view into this container.\n     * @abstract\n     * @param {?} viewRef The view to insert.\n     * @param {?=} index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @return {?} The inserted `ViewRef` instance.\n     *\n     */\n    ViewContainerRef.prototype.insert = function (viewRef, index) { };\n    /**\n     * Moves a view to a new location in this container.\n     * @abstract\n     * @param {?} viewRef The view to move.\n     * @param {?} currentIndex\n     * @return {?} The moved `ViewRef` instance.\n     */\n    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n    /**\n     * Returns the index of a view within the current container.\n     * @abstract\n     * @param {?} viewRef The view to query.\n     * @return {?} The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    ViewContainerRef.prototype.indexOf = function (viewRef) { };\n    /**\n     * Destroys a view attached to this container\n     * @abstract\n     * @param {?=} index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = function (index) { };\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @abstract\n     * @param {?=} index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = function (index) { };\n}\n/** @type {?} */\nexport var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = render3InjectViewContainerRef;\n/** @type {?} */\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=view_container_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectChangeDetectorRef as render3InjectChangeDetectorRef } from '../render3/view_engine_compatibility';\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nvar ChangeDetectorRef = /** @class */ (function () {\n    function ChangeDetectorRef() {\n    }\n    /**\n     * \\@internal\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n    return ChangeDetectorRef;\n}());\nexport { ChangeDetectorRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__;\n    /**\n     * When a view uses the {\\@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.markForCheck = function () { };\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detach = function () { };\n    /**\n     * Checks this view and its children. Use in combination with {\\@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detectChanges = function () { };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.checkNoChanges = function () { };\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.reattach = function () { };\n}\n/** @type {?} */\nexport var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = render3InjectChangeDetectorRef;\n/** @type {?} */\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n};\nvar Éµ0 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n/** @type {?} */\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\nexport { Éµ0 };\n//# sourceMappingURL=change_detector_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nexport { ViewRef };\nif (false) {\n    /**\n     * Destroys this view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = function () { };\n    /**\n     * Reports whether this view has been destroyed.\n     * @abstract\n     * @return {?} True after the `destroy()` method has been called, false otherwise.\n     */\n    ViewRef.prototype.destroyed = function () { };\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for views.\n     * @abstract\n     * @param {?} callback A handler function that cleans up developer-defined data\n     * associated with a view. Called when the `destroy()` method is invoked.\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nvar /**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nexport { EmbeddedViewRef };\nif (false) {\n    /**\n     * The context for this view, inherited from the anchor element.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * The root nodes for this embedded view.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nexport function InternalViewRef() { }\n/** @type {?} */\nInternalViewRef.prototype.detachFromAppRef;\n/** @type {?} */\nInternalViewRef.prototype.attachToAppRef;\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nif (false) {\n    /** @type {?} */\n    EventListener.prototype.name;\n    /** @type {?} */\n    EventListener.prototype.callback;\n}\n/**\n * \\@publicApi\n */\nvar /**\n * \\@publicApi\n */\nDebugNode = /** @class */ (function () {\n    function DebugNode(nativeNode, parent, _debugContext) {\n        this.nativeNode = nativeNode;\n        this._debugContext = _debugContext;\n        this.listeners = [];\n        this.parent = null;\n        if (parent && parent instanceof DebugElement) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode;\n}());\n/**\n * \\@publicApi\n */\nexport { DebugNode };\nif (false) {\n    /** @type {?} */\n    DebugNode.prototype.listeners;\n    /** @type {?} */\n    DebugNode.prototype.parent;\n    /** @type {?} */\n    DebugNode.prototype.nativeNode;\n    /** @type {?} */\n    DebugNode.prototype._debugContext;\n}\n/**\n * \\@publicApi\n */\nvar /**\n * \\@publicApi\n */\nDebugElement = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement, _super);\n    function DebugElement(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.addChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.removeChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        /** @type {?} */\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    DebugElement.prototype.insertChildrenAfter = /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    function (child, newChildren) {\n        var _this = this;\n        var _a;\n        /** @type {?} */\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                c.parent = _this;\n            });\n        }\n    };\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugElement.prototype.insertBefore = /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (refChild, newChild) {\n        /** @type {?} */\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement;\n}(DebugNode));\n/**\n * \\@publicApi\n */\nexport { DebugElement };\nif (false) {\n    /** @type {?} */\n    DebugElement.prototype.name;\n    /** @type {?} */\n    DebugElement.prototype.properties;\n    /** @type {?} */\n    DebugElement.prototype.attributes;\n    /** @type {?} */\n    DebugElement.prototype.classes;\n    /** @type {?} */\n    DebugElement.prototype.styles;\n    /** @type {?} */\n    DebugElement.prototype.childNodes;\n    /** @type {?} */\n    DebugElement.prototype.nativeElement;\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\n/** @type {?} */\nvar _nativeNodeToDebugNode = new Map();\n/**\n * \\@publicApi\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function Predicate() { }\n//# sourceMappingURL=debug_node.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return isListLikeIterable(obj); };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.create = /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\n/** @type {?} */\nvar trackByIdentity = function (index, item) { return item; };\nvar Éµ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nvar /**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nDefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        this._linkedRecords = null;\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachOperation = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var nextIt = this._itHead;\n        /** @type {?} */\n        var nextRemove = this._removalsHead;\n        /** @type {?} */\n        var addRemoveOffset = 0;\n        /** @type {?} */\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            /** @type {?} */\n            var record = !nextRemove ||\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\n                ((nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = /** @type {?} */ ((nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    var localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.diff = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.check = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var record = this._itHead;\n        /** @type {?} */\n        var mayBeDirty = false;\n        /** @type {?} */\n        var index;\n        /** @type {?} */\n        var item;\n        /** @type {?} */\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            (/** @type {?} */ (this)).length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            (/** @type {?} */ (this)).length = index;\n        }\n        this._truncate(record);\n        (/** @type {?} */ (this)).collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reset = /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            /** @type {?} */\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._mismatch = /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._truncate = /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prevRemoved;\n        /** @type {?} */\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._moveAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._insertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        /** @type {?} */\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._remove = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._unlink = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prev;\n        /** @type {?} */\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToMoves = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToRemovals = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nexport { DefaultIterableDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\nIterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n/**\n * @template V\n */\nexport { IterableChangeRecord_ };\nif (false) {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.add = /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            /** @type {?} */ ((\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.get = /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.remove = /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var prev = record._prevDup;\n        /** @type {?} */\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.put = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateMap.prototype.get = /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var key = trackById;\n        /** @type {?} */\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.remove = /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var recordList = /** @type {?} */ ((this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _DuplicateMap.prototype.clear = /**\n     * @return {?}\n     */\n    function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nif (false) {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { Éµ0 };\n//# sourceMappingURL=default_iterable_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isJsObject } from '../change_detection_util';\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.create = /**\n     * @template K, V\n     * @return {?}\n     */\n    function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDifferFactory };\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.diff = /**\n     * @param {?=} map\n     * @return {?}\n     */\n    function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    /**\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.check = /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    function (map) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    function (before, record) {\n        if (before) {\n            /** @type {?} */\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    function (key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            var record_1 = /** @type {?} */ ((this._records.get(key)));\n            this._maybeAddToChanges(record_1, value);\n            /** @type {?} */\n            var prev = record_1._prev;\n            /** @type {?} */\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        /** @type {?} */\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._reset = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._forEach = /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._records;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nKeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\nif (false) {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n//# sourceMappingURL=default_keyvalue_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from '../../di/defs';\nimport { Optional, SkipSelf } from '../../di/metadata';\nimport { DefaultIterableDifferFactory } from '../differs/default_iterable_differ';\n/** @typedef {?} */\nvar NgIterable;\nexport { NgIterable };\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nexport function IterableDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nIterableDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nexport function IterableChanges() { }\n/**\n * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nIterableChanges.prototype.forEachItem;\n/**\n * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n * new `Iterable`.\n *\n * NOTE: These are not necessarily the actual operations which were applied to the original\n * `Iterable`, rather these are a set of computed operations which may not be the same as the\n * ones applied.\n *\n * \\@param record A change which needs to be applied\n * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n *        original `Iterable` location, where as `previousIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n *        original `Iterable` location, where as `currentIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * @type {?}\n */\nIterableChanges.prototype.forEachOperation;\n/**\n * Iterate over changes in the order of original `Iterable` showing where the original items\n * have moved.\n * @type {?}\n */\nIterableChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nIterableChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all moved items.\n * @type {?}\n */\nIterableChanges.prototype.forEachMovedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nIterableChanges.prototype.forEachRemovedItem;\n/**\n * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n * changed.\n * @type {?}\n */\nIterableChanges.prototype.forEachIdentityChange;\n/**\n * Record representing the item change information.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nexport function IterableChangeRecord() { }\n/**\n * Current index of the item in `Iterable` or null if removed.\n * @type {?}\n */\nIterableChangeRecord.prototype.currentIndex;\n/**\n * Previous index of the item in `Iterable` or null if added.\n * @type {?}\n */\nIterableChangeRecord.prototype.previousIndex;\n/**\n * The item.\n * @type {?}\n */\nIterableChangeRecord.prototype.item;\n/**\n * Track by identity as computed by the `TrackByFunction`.\n * @type {?}\n */\nIterableChangeRecord.prototype.trackById;\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * \\@publicApi\n * @record\n * @template V\n */\nexport function CollectionChangeRecord() { }\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function TrackByFunction() { }\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n * \\@publicApi\n * @record\n */\nexport function IterableDifferFactory() { }\n/** @type {?} */\nIterableDifferFactory.prototype.supports;\n/** @type {?} */\nIterableDifferFactory.prototype.create;\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    IterableDiffers.create = /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    IterableDiffers.extend = /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    IterableDiffers.prototype.find = /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    function (iterable) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */\n    /** @nocollapse */ IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nexport { IterableDiffers };\nif (false) {\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    IterableDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=iterable_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nexport function KeyValueDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nexport function KeyValueChanges() { }\n/**\n * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachItem;\n/**\n * Iterate over changes in the order of original Map showing where the original items\n * have moved.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all keys for which values have changed.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachChangedItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachRemovedItem;\n/**\n * Record representing the item change information.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nexport function KeyValueChangeRecord() { }\n/**\n * Current key in the Map.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.key;\n/**\n * Current value for the key or `null` if removed.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.currentValue;\n/**\n * Previous value for the key or `null` if added.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.previousValue;\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n * \\@publicApi\n * @record\n */\nexport function KeyValueDifferFactory() { }\n/**\n * Test to see if the differ knows how to diff this kind of object.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.supports;\n/**\n * Create a `KeyValueDiffer`.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.create;\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nvar /**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nKeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    KeyValueDiffers.create = /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    KeyValueDiffers.extend = /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    KeyValueDiffers.prototype.find = /**\n     * @param {?} kv\n     * @return {?}\n     */\n    function (kv) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    return KeyValueDiffers;\n}());\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nexport { KeyValueDiffers };\nif (false) {\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n//# sourceMappingURL=keyvalue_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/** *\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var LOCALE_ID = new InjectionToken('LocaleId');\n/** *\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var TRANSLATIONS = new InjectionToken('Translations');\n/** *\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n//# sourceMappingURL=tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { ErrorHandler } from './error_handler';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { ComponentFactoryResolver } from './linker';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\nimport { NgZone } from './zone';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/** *\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n  @type {?} */\nexport var APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule.decorators = [\n        { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] },\n    ];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () { return [\n        { type: ApplicationRef }\n    ]; };\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\n//# sourceMappingURL=application_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// unsupported: template constraints.\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n * @template D\n */\nexport function DefinitionFactory() { }\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nexport function NodeLogger() { }\n// unsupported: template constraints.\n/**\n * @record\n * @template DF\n */\nexport function Definition() { }\n/** @type {?} */\nDefinition.prototype.factory;\n/**\n * @record\n */\nexport function NgModuleDefinition() { }\n/** @type {?} */\nNgModuleDefinition.prototype.providers;\n/** @type {?} */\nNgModuleDefinition.prototype.providersByKey;\n/** @type {?} */\nNgModuleDefinition.prototype.modules;\n/** @type {?} */\nNgModuleDefinition.prototype.isRoot;\n/**\n * @record\n */\nexport function NgModuleDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewDefinition() { }\n/** @type {?} */\nViewDefinition.prototype.flags;\n/** @type {?} */\nViewDefinition.prototype.updateDirectives;\n/** @type {?} */\nViewDefinition.prototype.updateRenderer;\n/** @type {?} */\nViewDefinition.prototype.handleEvent;\n/**\n * Order: Depth first.\n * Especially providers are before elements / anchors.\n * @type {?}\n */\nViewDefinition.prototype.nodes;\n/**\n * aggregated NodeFlags for all nodes *\n * @type {?}\n */\nViewDefinition.prototype.nodeFlags;\n/** @type {?} */\nViewDefinition.prototype.rootNodeFlags;\n/** @type {?} */\nViewDefinition.prototype.lastRenderRootNode;\n/** @type {?} */\nViewDefinition.prototype.bindingCount;\n/** @type {?} */\nViewDefinition.prototype.outputCount;\n/**\n * Binary or of all query ids that are matched by one of the nodes.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nViewDefinition.prototype.nodeMatchedQueries;\n/**\n * @record\n */\nexport function ViewDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewUpdateFn() { }\n/**\n * @record\n */\nexport function NodeCheckFn() { }\n/** @enum {number} */\nvar ArgumentType = {\n    Inline: 0, Dynamic: 1,\n};\nexport { ArgumentType };\n/**\n * @record\n */\nexport function ViewHandleEventFn() { }\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nexport function NodeDef() { }\n/** @type {?} */\nNodeDef.prototype.flags;\n/** @type {?} */\nNodeDef.prototype.nodeIndex;\n/** @type {?} */\nNodeDef.prototype.checkIndex;\n/** @type {?} */\nNodeDef.prototype.parent;\n/** @type {?} */\nNodeDef.prototype.renderParent;\n/**\n * this is checked against NgContentDef.index to find matched nodes\n * @type {?}\n */\nNodeDef.prototype.ngContentIndex;\n/**\n * number of transitive children\n * @type {?}\n */\nNodeDef.prototype.childCount;\n/**\n * aggregated NodeFlags for all transitive children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.childFlags;\n/**\n * aggregated NodeFlags for all direct children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.directChildFlags;\n/** @type {?} */\nNodeDef.prototype.bindingIndex;\n/** @type {?} */\nNodeDef.prototype.bindings;\n/** @type {?} */\nNodeDef.prototype.bindingFlags;\n/** @type {?} */\nNodeDef.prototype.outputIndex;\n/** @type {?} */\nNodeDef.prototype.outputs;\n/**\n * references that the user placed on the element\n * @type {?}\n */\nNodeDef.prototype.references;\n/**\n * ids and value types of all queries that are matched by this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueries;\n/**\n * Binary or of all matched query ids of this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueryIds;\n/**\n * Binary or of all query ids that are matched by one of the children.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nNodeDef.prototype.childMatchedQueries;\n/** @type {?} */\nNodeDef.prototype.element;\n/** @type {?} */\nNodeDef.prototype.provider;\n/** @type {?} */\nNodeDef.prototype.text;\n/** @type {?} */\nNodeDef.prototype.query;\n/** @type {?} */\nNodeDef.prototype.ngContent;\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/**\n * @record\n */\nexport function BindingDef() { }\n/** @type {?} */\nBindingDef.prototype.flags;\n/** @type {?} */\nBindingDef.prototype.ns;\n/** @type {?} */\nBindingDef.prototype.name;\n/** @type {?} */\nBindingDef.prototype.nonMinifiedName;\n/** @type {?} */\nBindingDef.prototype.securityContext;\n/** @type {?} */\nBindingDef.prototype.suffix;\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/**\n * @record\n */\nexport function OutputDef() { }\n/** @type {?} */\nOutputDef.prototype.type;\n/** @type {?} */\nOutputDef.prototype.target;\n/** @type {?} */\nOutputDef.prototype.eventName;\n/** @type {?} */\nOutputDef.prototype.propName;\n/** @enum {number} */\nvar OutputType = {\n    ElementOutput: 0, DirectiveOutput: 1,\n};\nexport { OutputType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/**\n * @record\n */\nexport function ElementDef() { }\n/** @type {?} */\nElementDef.prototype.name;\n/** @type {?} */\nElementDef.prototype.ns;\n/**\n * ns, name, value\n * @type {?}\n */\nElementDef.prototype.attrs;\n/** @type {?} */\nElementDef.prototype.template;\n/** @type {?} */\nElementDef.prototype.componentProvider;\n/** @type {?} */\nElementDef.prototype.componentRendererType;\n/** @type {?} */\nElementDef.prototype.componentView;\n/**\n * visible public providers for DI in the view,\n * as see from this element. This does not include private providers.\n * @type {?}\n */\nElementDef.prototype.publicProviders;\n/**\n * same as visiblePublicProviders, but also includes private providers\n * that are located on this element.\n * @type {?}\n */\nElementDef.prototype.allProviders;\n/** @type {?} */\nElementDef.prototype.handleEvent;\n/**\n * @record\n */\nexport function ElementHandleEventFn() { }\n/**\n * @record\n */\nexport function ProviderDef() { }\n/** @type {?} */\nProviderDef.prototype.token;\n/** @type {?} */\nProviderDef.prototype.value;\n/** @type {?} */\nProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function NgModuleProviderDef() { }\n/** @type {?} */\nNgModuleProviderDef.prototype.flags;\n/** @type {?} */\nNgModuleProviderDef.prototype.index;\n/** @type {?} */\nNgModuleProviderDef.prototype.token;\n/** @type {?} */\nNgModuleProviderDef.prototype.value;\n/** @type {?} */\nNgModuleProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function DepDef() { }\n/** @type {?} */\nDepDef.prototype.flags;\n/** @type {?} */\nDepDef.prototype.token;\n/** @type {?} */\nDepDef.prototype.tokenKey;\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/**\n * @record\n */\nexport function TextDef() { }\n/** @type {?} */\nTextDef.prototype.prefix;\n/**\n * @record\n */\nexport function QueryDef() { }\n/** @type {?} */\nQueryDef.prototype.id;\n/** @type {?} */\nQueryDef.prototype.filterId;\n/** @type {?} */\nQueryDef.prototype.bindings;\n/**\n * @record\n */\nexport function QueryBindingDef() { }\n/** @type {?} */\nQueryBindingDef.prototype.propName;\n/** @type {?} */\nQueryBindingDef.prototype.bindingType;\n/** @enum {number} */\nvar QueryBindingType = {\n    First: 0, All: 1,\n};\nexport { QueryBindingType };\n/**\n * @record\n */\nexport function NgContentDef() { }\n/**\n * this index is checked against NodeDef.ngContentIndex to find the nodes\n * that are matched by this ng-content.\n * Note that a NodeDef with an ng-content can be reprojected, i.e.\n * have a ngContentIndex on its own.\n * @type {?}\n */\nNgContentDef.prototype.index;\n/**\n * @record\n */\nexport function NgModuleData() { }\n/** @type {?} */\nNgModuleData.prototype._def;\n/** @type {?} */\nNgModuleData.prototype._parent;\n/** @type {?} */\nNgModuleData.prototype._providers;\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ViewData() { }\n/** @type {?} */\nViewData.prototype.def;\n/** @type {?} */\nViewData.prototype.root;\n/** @type {?} */\nViewData.prototype.renderer;\n/** @type {?} */\nViewData.prototype.parentNodeDef;\n/** @type {?} */\nViewData.prototype.parent;\n/** @type {?} */\nViewData.prototype.viewContainerParent;\n/** @type {?} */\nViewData.prototype.component;\n/** @type {?} */\nViewData.prototype.context;\n/** @type {?} */\nViewData.prototype.nodes;\n/** @type {?} */\nViewData.prototype.state;\n/** @type {?} */\nViewData.prototype.oldValues;\n/** @type {?} */\nViewData.prototype.disposables;\n/** @type {?} */\nViewData.prototype.initIndex;\n/** @enum {number} */\nvar ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\nexport { ViewState };\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nexport function shiftInitState(view, priorInitState, newInitState) {\n    /** @type {?} */\n    var state = view.state;\n    /** @type {?} */\n    var initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nexport function DisposableFn() { }\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar /**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nNodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport { NodeData };\nif (false) {\n    /** @type {?} */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function TextData() { }\n/** @type {?} */\nTextData.prototype.renderText;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ElementData() { }\n/** @type {?} */\nElementData.prototype.renderElement;\n/** @type {?} */\nElementData.prototype.componentView;\n/** @type {?} */\nElementData.prototype.viewContainer;\n/** @type {?} */\nElementData.prototype.template;\n/**\n * @record\n */\nexport function ViewContainerData() { }\n/** @type {?} */\nViewContainerData.prototype._embeddedViews;\n/**\n * @record\n */\nexport function TemplateData() { }\n/** @type {?} */\nTemplateData.prototype._projectedViews;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ProviderData() { }\n/** @type {?} */\nProviderData.prototype.instance;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function PureExpressionData() { }\n/** @type {?} */\nPureExpressionData.prototype.value;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * @record\n */\nexport function RootData() { }\n/** @type {?} */\nRootData.prototype.injector;\n/** @type {?} */\nRootData.prototype.ngModule;\n/** @type {?} */\nRootData.prototype.projectableNodes;\n/** @type {?} */\nRootData.prototype.selectorOrNode;\n/** @type {?} */\nRootData.prototype.renderer;\n/** @type {?} */\nRootData.prototype.rendererFactory;\n/** @type {?} */\nRootData.prototype.errorHandler;\n/** @type {?} */\nRootData.prototype.sanitizer;\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nDebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * @abstract\n */\nexport { DebugContext };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nvar CheckType = {\n    CheckAndUpdate: 0, CheckNoChanges: 1,\n};\nexport { CheckType };\n/**\n * @record\n */\nexport function ProviderOverride() { }\n/** @type {?} */\nProviderOverride.prototype.token;\n/** @type {?} */\nProviderOverride.prototype.flags;\n/** @type {?} */\nProviderOverride.prototype.value;\n/** @type {?} */\nProviderOverride.prototype.deps;\n/** @type {?} */\nProviderOverride.prototype.deprecatedBehavior;\n/** *\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n  @type {?} */\nexport var Services = {\n    setCurrentNode: /** @type {?} */ ((undefined)),\n    createRootView: /** @type {?} */ ((undefined)),\n    createEmbeddedView: /** @type {?} */ ((undefined)),\n    createComponentView: /** @type {?} */ ((undefined)),\n    createNgModuleRef: /** @type {?} */ ((undefined)),\n    overrideProvider: /** @type {?} */ ((undefined)),\n    overrideComponentView: /** @type {?} */ ((undefined)),\n    clearOverrides: /** @type {?} */ ((undefined)),\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\n    checkNoChangesView: /** @type {?} */ ((undefined)),\n    destroyView: /** @type {?} */ ((undefined)),\n    resolveDep: /** @type {?} */ ((undefined)),\n    createDebugContext: /** @type {?} */ ((undefined)),\n    handleEvent: /** @type {?} */ ((undefined)),\n    updateDirectives: /** @type {?} */ ((undefined)),\n    updateRenderer: /** @type {?} */ ((undefined)),\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\n};\n//# sourceMappingURL=types.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext } from '../errors';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg, context) {\n    /** @type {?} */\n    var err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical, stringify } from '../util';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\n/** @type {?} */\nexport var NOOP = function () { };\n/** @type {?} */\nvar _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    /** @type {?} */\n    var key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        /** @type {?} */\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        var bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    /** @type {?} */\n    var currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    var currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        var parentView = view.parent;\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    /** @type {?} */\n    var parentView = view.parent;\n    if (parentView) {\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    var matchedQueries = {};\n    /** @type {?} */\n    var matchedQueryIds = 0;\n    /** @type {?} */\n    var references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var queryId = _a[0], valueType = _a[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        /** @type {?} */\n        var token;\n        /** @type {?} */\n        var flags;\n        if (Array.isArray(value)) {\n            flags = value[0], token = value[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    var renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nvar DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    /** @type {?} */\n    var value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    /** @type {?} */\n    var renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nvar RenderNodeAction = {\n    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,\n};\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var hostView = /** @type {?} */ ((compView)).parent;\n    /** @type {?} */\n    var hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n    /** @type {?} */\n    var startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    var endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!/** @type {?} */ ((hostView)).parent) {\n        /** @type {?} */\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        var rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            /** @type {?} */ ((target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        var match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    /** @type {?} */\n    var flags = 0;\n    for (var i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    var result = '';\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\n/** @type {?} */\nexport var EMPTY_MAP = {};\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    /** @type {?} */\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    var _a;\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n    /** @type {?} */\n    var ns = /** @type {?} */ ((null));\n    /** @type {?} */\n    var name = /** @type {?} */ ((null));\n    if (namespaceAndName) {\n        _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    var bindingDefs = new Array(bindings.length);\n    for (var i = 0; i < bindings.length; i++) {\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n        /** @type {?} */\n        var securityContext = /** @type {?} */ ((undefined));\n        /** @type {?} */\n        var suffix = /** @type {?} */ ((undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    var outputDefs = new Array(outputs.length);\n    for (var i = 0; i < outputs.length; i++) {\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: /** @type {?} */ (target), eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    var attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\n        var namespaceAndName = _a[0], value = _a[1];\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n        return [ns, name, value];\n    }));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view, renderHost, def) {\n    /** @type {?} */\n    var elDef = /** @type {?} */ ((def.element));\n    /** @type {?} */\n    var rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    /** @type {?} */\n    var el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        /** @type {?} */\n        var preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (var i = 0; i < elDef.attrs.length; i++) {\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        var output = def.outputs[i];\n        /** @type {?} */\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        var listenTarget = output.target;\n        /** @type {?} */\n        var listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        var disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n        ((view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    /** @type {?} */\n    var changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    var renderNode = elData.renderElement;\n    /** @type {?} */\n    var name = /** @type {?} */ ((binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        var unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getInjectableDef } from '../di/defs';\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector } from '../di/injector';\nimport { setCurrentInjector } from '../di/injector_compatibility';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { splitDepsDsl, tokenKey } from './util';\n/** @type {?} */\nvar UNDEFINED_VALUE = new Object();\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    /** @type {?} */\n    var providersByKey = {};\n    /** @type {?} */\n    var modules = [];\n    /** @type {?} */\n    var isRoot = false;\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    /** @type {?} */\n    var def = data._def;\n    /** @type {?} */\n    var providers = data._providers = new Array(def.providers.length);\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    /** @type {?} */\n    var former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        var tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        var providerDef = data._def.providersByKey[tokenKey_1];\n        /** @type {?} */\n        var injectableDef = void 0;\n        if (providerDef) {\n            /** @type {?} */\n            var providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            var index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    var injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    var def = ngModule._def;\n    /** @type {?} */\n    var destroyed = new Set();\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            var instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                var onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    var prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    var projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    var parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    var view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    var view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    /** @type {?} */\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    var prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    var parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=view_attach.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\n/** @type {?} */\nvar EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var inputsArr = [];\n            /** @type {?} */\n            var inputs = /** @type {?} */ ((this._inputs));\n            for (var propName in inputs) {\n                /** @type {?} */\n                var templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var outputsArr = [];\n            for (var propName in this._outputs) {\n                /** @type {?} */\n                var templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory_.prototype.create = /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        var viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        var componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        var component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory_.prototype._inputs;\n    /** @type {?} */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (this._component.constructor); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._viewRef.destroy(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nif (false) {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef_.prototype._elDef;\n    /** @type {?} */\n    ComponentRef_.prototype._view;\n    /** @type {?} */\n    ComponentRef_.prototype._viewRef;\n    /** @type {?} */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: /**\n         * @deprecated No replacement\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var view = this._view;\n            /** @type {?} */\n            var elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = /** @type {?} */ ((view.parent));\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var len = this._embeddedViews.length;\n        for (var i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            var view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            var ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        /** @type {?} */\n        var viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var viewRef_ = /** @type {?} */ (viewRef);\n        /** @type {?} */\n        var viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /** @type {?} */\n    ViewContainerRef_.prototype._view;\n    /** @type {?} */\n    ViewContainerRef_.prototype._elDef;\n    /** @type {?} */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () { markParentViewsForCheck(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detach = /**\n     * @return {?}\n     */\n    function () { this._view.state &= ~4 /* Attached */; };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { Services.checkNoChangesView(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.reattach = /**\n     * @return {?}\n     */\n    function () { this._view.state |= 4 /* Attached */; };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(/** @type {?} */ (callback));\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /** @type {?} */\n    ViewRef_.prototype._viewContainerRef;\n    /** @type {?} */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef_.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /** @type {?} */\n    TemplateRef_.prototype._parentView;\n    /** @type {?} */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        /** @type {?} */\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nif (false) {\n    /** @type {?} */\n    Injector_.prototype.view;\n    /** @type {?} */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view, index) {\n    /** @type {?} */\n    var def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        var elData = asElementData(view, def.nodeIndex);\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    RendererAdapter.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    RendererAdapter.prototype.createElement = /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    function (parent, namespaceAndName) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        /** @type {?} */\n        var el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createViewRoot = /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    function (hostElement) { return hostElement; };\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createTemplateAnchor = /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (parentElement) {\n        /** @type {?} */\n        var comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    RendererAdapter.prototype.createText = /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    function (parentElement, value) {\n        /** @type {?} */\n        var node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.projectNodes = /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (parentElement, nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.attachViewAfter = /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (node, viewRootNodes) {\n        /** @type {?} */\n        var parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        var nextSibling = this.delegate.nextSibling(node);\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.detachView = /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (viewRootNodes) {\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            var node = viewRootNodes[i];\n            /** @type {?} */\n            var parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.destroyView = /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    function (hostElement, viewAllNodes) {\n        for (var i = 0; i < viewAllNodes.length; i++) {\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listen = /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listenGlobal = /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, name, callback) {\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementProperty = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementAttribute = /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    function (renderElement, namespaceAndName, attributeValue) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setBindingDebugInfo = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementClass = /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementStyle = /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    RendererAdapter.prototype.invokeElementMethod = /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    function (renderElement, methodName, args) {\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\n    };\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    RendererAdapter.prototype.setText = /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    /**\n     * @return {?}\n     */\n    RendererAdapter.prototype.animate = /**\n     * @return {?}\n     */\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nif (false) {\n    /** @type {?} */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    NgModuleRef_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\n        /** @type {?} */\n        var flags = 0 /* None */;\n        if (injectFlags & 4 /* SkipSelf */) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & 2 /* Self */) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgModuleRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\nif (false) {\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyListeners;\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /** @type {?} */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n//# sourceMappingURL=refs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { stringify } from '../util';\nimport { isObservable } from '../util/lang';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\n/** @type {?} */\nvar RendererV1TokenKey = tokenKey(RendererV1);\n/** @type {?} */\nvar Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nvar ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    /** @type {?} */\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    /** @type {?} */\n    var instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            var output = def.outputs[i];\n            /** @type {?} */\n            var outputObservable = instance[/** @type {?} */ ((output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n                ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return /** @type {?} */ ((providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/** @type {?} */\nexport var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = /** @type {?} */ ((elDef.parent));\n    }\n    /** @type {?} */\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (/** @type {?} */ ((elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    var providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef_1) {\n                        /** @type {?} */\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\n        searchView = /** @type {?} */ ((searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        var compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var propName = /** @type {?} */ ((binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        var binding_1 = def.bindings[bindingIdx];\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    var nodes = view.def.nodes;\n    /** @type {?} */\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = nodes[i];\n        /** @type {?} */\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(flags, id, bindings) {\n    /** @type {?} */\n    var bindingDefs = [];\n    for (var propName in bindings) {\n        /** @type {?} */\n        var bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nexport function createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view) {\n    /** @type {?} */\n    var queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        var tplDef = /** @type {?} */ ((view.parentNodeDef));\n        view = view.parent;\n        /** @type {?} */\n        var end = tplDef.nodeIndex + tplDef.childCount;\n        for (var i = 0; i <= end; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    var directiveInstance;\n    /** @type {?} */\n    var newValues = /** @type {?} */ ((undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        var elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    var bindings = /** @type {?} */ ((nodeDef.query)).bindings;\n    /** @type {?} */\n    var notify = false;\n    for (var i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        var binding = bindings[i];\n        /** @type {?} */\n        var boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        var valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            var elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    var embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    var dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            var projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    var ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=ng_content.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    var keys = Object.keys(propToIndex);\n    /** @type {?} */\n    var nbKeys = keys.length;\n    /** @type {?} */\n    var propertyNames = new Array(nbKeys);\n    for (var i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        var key = keys[i];\n        /** @type {?} */\n        var index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    var bindings = new Array(propertyNames.length);\n    for (var i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        var prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var i = 0; i < values.length; i++) {\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = values[0];\n                /** @type {?} */\n                var params = values.slice(1);\n                value = pipe.transform.apply(pipe, params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=pure_expression.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    var bindings = new Array(staticText.length - 1);\n    for (var i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view, renderHost, def) {\n    /** @type {?} */\n    var renderNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    renderNode = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var value = /** @type {?} */ ((def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var value = '';\n        for (var i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = /** @type {?} */ ((def.text)).prefix + value;\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    var valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=text.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    /** @type {?} */\n    var viewBindingCount = 0;\n    /** @type {?} */\n    var viewDisposableCount = 0;\n    /** @type {?} */\n    var viewNodeFlags = 0;\n    /** @type {?} */\n    var viewRootNodeFlags = 0;\n    /** @type {?} */\n    var viewMatchedQueries = 0;\n    /** @type {?} */\n    var currentParent = null;\n    /** @type {?} */\n    var currentRenderParent = null;\n    /** @type {?} */\n    var currentElementHasPublicProviders = false;\n    /** @type {?} */\n    var currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    var lastRenderRootNode = null;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            var elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true; /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true; /** @type {?} */\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\n                } /** @type {?} */\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                var newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    var template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        var parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root, def, context) {\n    /** @type {?} */\n    var view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    var compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    var nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    var view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    var renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        var hostDef = view.parentNodeDef;\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    var def = view.def;\n    /** @type {?} */\n    var nodes = view.nodes;\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        var nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                var el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\n                /** @type {?} */\n                var componentView = /** @type {?} */ ((undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = /** @type {?} */ ({\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                });\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    var instance = createProviderInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                var instance = createPipeInstance(view, nodeDef);\n                nodeData = /** @type {?} */ ({ instance: instance });\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    var instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    var compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = /** @type {?} */ (createQuery());\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            var projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    var len = view.def.nodes.length;\n    for (var i = 0; i < len; i++) {\n        /** @type {?} */\n        var def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nvar ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    var viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    var nodeCount = view.def.nodes.length;\n    for (var i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugElement, DebugNode, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { getInjectableDef } from '../di/defs';\nimport { ErrorHandler } from '../error_handler';\nimport { isDevMode } from '../is_dev_mode';\nimport { ivyEnabled } from '../ivy_switch';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { tokenKey } from '../view/util';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\n/** @type {?} */\nvar initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    var services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    var sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    var errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nvar providerOverrides = new Map();\n/** @type {?} */\nvar providerOverridesWithScope = new Map();\n/** @type {?} */\nvar viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    var injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(/** @type {?} */ (override.token), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        var elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        var lastElementDef = null;\n        for (var i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                var provider = /** @type {?} */ ((nodeDef.provider));\n                /** @type {?} */\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        var hasOverrides = false;\n        /** @type {?} */\n        var hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            /** @type {?} */\n            var override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (/** @type {?} */ ((getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (var i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            var provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            var override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            var moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(/** @type {?} */ ((getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    var provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nvar DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nvar _currentAction;\n/** @type {?} */\nvar _currentView;\n/** @type {?} */\nvar _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    var changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n    if (changed) {\n        /** @type {?} */\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            var bindingValues = {};\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                var binding = nodeDef.bindings[i];\n                /** @type {?} */\n                var value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            var elDef = /** @type {?} */ ((nodeDef.parent));\n            /** @type {?} */\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!/** @type {?} */ ((elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var attr in bindingValues) {\n                    /** @type {?} */\n                    var value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\n/** @type {?} */\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var elDef = this.nodeDef;\n        /** @type {?} */\n        var elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = /** @type {?} */ ((elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\n                elView = /** @type {?} */ ((elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var tokens = [];\n            if (this.elDef) {\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext_.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        /** @type {?} */\n        var logViewDef;\n        /** @type {?} */\n        var logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        /** @type {?} */\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        var currRenderNodeIndex = -1;\n        /** @type {?} */\n        var nodeLogger = function () {\n            var _a;\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\n            }\n            else {\n                return NOOP;\n            }\n        }; /** @type {?} */\n        ((logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, values);\n        }\n    };\n    return DebugContext_;\n}());\nif (false) {\n    /** @type {?} */\n    DebugContext_.prototype.nodeDef;\n    /** @type {?} */\n    DebugContext_.prototype.elView;\n    /** @type {?} */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    /** @type {?} */\n    var renderNodeIndex = -1;\n    for (var i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        var nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = /** @type {?} */ ((view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (var refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    var oldAction = _currentAction;\n    /** @type {?} */\n    var oldView = _currentView;\n    /** @type {?} */\n    var oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        var result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.begin = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.end = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nexport { DebugRendererFactory2 };\nif (false) {\n    /** @type {?} */\n    DebugRendererFactory2.prototype.delegate;\n}\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createDebugContext = /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    function (nativeElement) { return this.debugContextFactory(nativeElement); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroyNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createElement = /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (name, namespace) {\n        /** @type {?} */\n        var el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            var debugEl = new DebugElement(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createComment = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var comment = this.delegate.createComment(value);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createText = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var text = this.delegate.createText(value);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(text, null, debugCtx));\n        }\n        return text;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.appendChild = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (parent, newChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.insertBefore = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    function (parent, newChild, refChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        var debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeChild = /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    function (parent, oldChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    DebugRenderer2.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    function (selectorOrNode, preserveContent) {\n        /** @type {?} */\n        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        var debugCtx = getCurrentDebugContext() || (ivyEnabled ? this.createDebugContext(el) : null);\n        if (debugCtx) {\n            indexDebugNode(new DebugElement(el, null, debugCtx));\n        }\n        return el;\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, value, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, value, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setProperty = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (el, name, value) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    DebugRenderer2.prototype.listen = /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            var debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.parentNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.nextSibling = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setValue = /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nexport { DebugRenderer2 };\nif (false) {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     * @type {?}\n     */\n    DebugRenderer2.prototype.debugContextFactory;\n    /** @type {?} */\n    DebugRenderer2.prototype.delegate;\n}\n//# sourceMappingURL=services.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    var providers = Array.from(def.providers);\n    /** @type {?} */\n    var modules = Array.from(def.modules);\n    /** @type {?} */\n    var providersByKey = {};\n    for (var key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n    };\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory_.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        initServicesIfNeeded();\n        /** @type {?} */\n        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\nif (false) {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /** @type {?} */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n//# sourceMappingURL=entrypoint.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DebugRendererFactory2 } from '../view/services';\nimport { getHostComponent, getInjector, getLocalRefs, loadContext } from './discovery_utils';\nimport { TVIEW } from './interfaces/view';\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nvar /**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nRender3DebugRendererFactory2 = /** @class */ (function (_super) {\n    tslib_1.__extends(Render3DebugRendererFactory2, _super);\n    function Render3DebugRendererFactory2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    Render3DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        /** @type {?} */\n        var renderer = /** @type {?} */ (_super.prototype.createRenderer.call(this, element, renderData));\n        renderer.debugContextFactory = function (nativeElement) { return new Render3DebugContext(nativeElement); };\n        return renderer;\n    };\n    return Render3DebugRendererFactory2;\n}(DebugRendererFactory2));\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nexport { Render3DebugRendererFactory2 };\n/**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nvar /**\n * Stores context information about view nodes.\n *\n * Used in tests to retrieve information those nodes.\n */\nRender3DebugContext = /** @class */ (function () {\n    function Render3DebugContext(_nativeNode) {\n        this._nativeNode = _nativeNode;\n    }\n    Object.defineProperty(Render3DebugContext.prototype, \"nodeIndex\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return loadContext(this._nativeNode).nodeIndex; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"view\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return loadContext(this._nativeNode).lViewData; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getInjector(this._nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getHostComponent(this._nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var lDebugCtx = loadContext(this._nativeNode);\n            /** @type {?} */\n            var lViewData = lDebugCtx.lViewData;\n            /** @type {?} */\n            var tNode = /** @type {?} */ (lViewData[TVIEW].data[lDebugCtx.nodeIndex]);\n            /** @type {?} */\n            var directivesCount = tNode.flags & 4095 /* DirectiveCountMask */;\n            if (directivesCount > 0) {\n                /** @type {?} */\n                var directiveIdxStart = tNode.flags >> 16 /* DirectiveStartingIndexShift */;\n                /** @type {?} */\n                var directiveIdxEnd = directiveIdxStart + directivesCount;\n                /** @type {?} */\n                var viewDirectiveDefs = this.view[TVIEW].data;\n                /** @type {?} */\n                var directiveDefs = /** @type {?} */ (viewDirectiveDefs.slice(directiveIdxStart, directiveIdxEnd));\n                return directiveDefs.map(function (directiveDef) { return directiveDef.type; });\n            }\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getLocalRefs(this._nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"context\", {\n        // TODO(pk): check previous implementation and re-implement\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"componentRenderElement\", {\n        // TODO(pk): check previous implementation and re-implement\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Render3DebugContext.prototype, \"renderNode\", {\n        // TODO(pk): check previous implementation and re-implement\n        get: /**\n         * @return {?}\n         */\n        function () { throw new Error('Not implemented in ivy'); },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO(pk): check previous implementation and re-implement\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    Render3DebugContext.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        console.error.apply(console, values);\n    };\n    return Render3DebugContext;\n}());\nif (false) {\n    /** @type {?} */\n    Render3DebugContext.prototype._nativeNode;\n}\n//# sourceMappingURL=debug.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @record\n */\nfunction TypeWithMetadata() { }\n/** @type {?|undefined} */\nTypeWithMetadata.prototype.decorators;\n/** @type {?|undefined} */\nTypeWithMetadata.prototype.ctorParameters;\n/** @type {?|undefined} */\nTypeWithMetadata.prototype.propDecorators;\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nexport function setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    var _a;\n    /** @type {?} */\n    var clazz = /** @type {?} */ (type);\n    if (decorators !== null) {\n        if (clazz.decorators !== undefined) {\n            (_a = clazz.decorators).push.apply(_a, decorators);\n        }\n        else {\n            clazz.decorators = decorators;\n        }\n    }\n    if (ctorParameters !== null) {\n        // Rather than merging, clobber the existing parameters. If other projects exist which use\n        // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n        // but that is vanishingly unlikely.\n        clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n        // The property decorator objects are merged as it is possible different fields have different\n        // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n        // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n        // decorator that's also been downleveled.\n        if (clazz.propDecorators !== undefined) {\n            clazz.propDecorators = tslib_1.__assign({}, clazz.propDecorators, propDecorators);\n        }\n        else {\n            clazz.propDecorators = propDecorators;\n        }\n    }\n}\n//# sourceMappingURL=metadata.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport './ng_dev_mode';\nimport { getContext } from './context_discovery';\nimport { getRootContext } from './discovery_utils';\nimport { scheduleTick } from './instructions';\nimport { HEADER_OFFSET } from './interfaces/view';\nimport { addPlayerInternal, getOrCreatePlayerContext, getPlayerContext, getPlayersInternal, getStylingContext, throwInvalidRefError } from './styling/util';\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param {?} ref The element, directive or component that the player will be placed on.\n * @param {?} player The player that will be triggered to play once change detection has run.\n * @return {?}\n */\nexport function addPlayer(ref, player) {\n    /** @type {?} */\n    var context = getContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return;\n    }\n    /** @type {?} */\n    var element = /** @type {?} */ (context.native);\n    /** @type {?} */\n    var lViewData = context.lViewData;\n    /** @type {?} */\n    var playerContext = /** @type {?} */ ((getOrCreatePlayerContext(element, context)));\n    /** @type {?} */\n    var rootContext = getRootContext(lViewData);\n    addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n * @param {?} ref\n * @return {?}\n */\nexport function getPlayers(ref) {\n    /** @type {?} */\n    var context = getContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return [];\n    }\n    /** @type {?} */\n    var stylingContext = getStylingContext(context.nodeIndex - HEADER_OFFSET, context.lViewData);\n    /** @type {?} */\n    var playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n    return playerContext ? getPlayersInternal(playerContext) : [];\n}\n//# sourceMappingURL=players.js.map"]}